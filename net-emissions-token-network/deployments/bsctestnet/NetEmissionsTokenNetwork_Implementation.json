{
  "address": "0x3B7513A5Da337A4B4C5067d3F9545a99780f5fe4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredDealer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredIndustry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retiredBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuedBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuedFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuedTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dateCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRetired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredDealer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredIndustry",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_CONSUMER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_EMISSIONS_AUDITOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_INDUSTRY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_INDUSTRY_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_OFFSET_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_REC_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "_consumerOrDealer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableAndRetired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableRetiredAndTransferred",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIssuedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfUniqueTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRetiredBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoles",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isAdmin",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isConsumer",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRecDealer",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCeoDealer",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isAeDealer",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIndustry",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIndustryDealer",
              "type": "bool"
            }
          ],
          "internalType": "struct NetEmissionsTokenNetwork.RolesInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "tokenTypeId",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "issuedBy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuedFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuedTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thruDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateCreated",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "manifest",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalIssued",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRetired",
              "type": "uint256"
            }
          ],
          "internalType": "struct NetEmissionsTokenNetwork.CarbonTokenDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenRetiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTypeId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "getTransferHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTransferredBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        }
      ],
      "name": "isAuditor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isConsumerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isDealerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuedFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuedTo",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuedBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuedFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuedTo",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "issueOnBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitedMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "registerConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "registerDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "registerIndustry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_limitedMode",
          "type": "bool"
        }
      ],
      "name": "setLimitedMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unregisterConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "unregisterDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unregisterIndustry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x926b0951218c49cbbf7bf717ceeb99757a67c2e29caa765ecfa92e12609492ef",
  "receipt": {
    "to": null,
    "from": "0x366c6D94e553040461a140cf5550145C199F09B1",
    "contractAddress": "0x3B7513A5Da337A4B4C5067d3F9545a99780f5fe4",
    "transactionIndex": 0,
    "gasUsed": "4824721",
    "logsBloom": "0x
    "blockHash": "0xa129eb245219fcd88cd25d1b63b6c298d7233d2d19e26867f4cd362c6e33a09d",
    "transactionHash": "0x926b0951218c49cbbf7bf717ceeb99757a67c2e29caa765ecfa92e12609492ef",
    "logs": [],
    "blockNumber": 18659522,
    "cumulativeGasUsed": "4824721",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2493895d463d207c9060c74c2810fd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredDealer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredIndustry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retiredBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuedFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredDealer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredIndustry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_CONSUMER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_EMISSIONS_AUDITOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_INDUSTRY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_INDUSTRY_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_OFFSET_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_REC_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"_consumerOrDealer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableAndRetired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableRetiredAndTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIssuedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfUniqueTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRetiredBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoles\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isConsumer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRecDealer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCeoDealer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAeDealer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIndustry\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIndustryDealer\",\"type\":\"bool\"}],\"internalType\":\"struct NetEmissionsTokenNetwork.RolesInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"issuedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuedFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRetired\",\"type\":\"uint256\"}],\"internalType\":\"struct NetEmissionsTokenNetwork.CarbonTokenDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRetiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTypeId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"getTransferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTransferredBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"isAuditor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isConsumerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDealerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuedFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuedTo\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuedFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuedTo\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"issueOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"registerDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerIndustry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitedMode\",\"type\":\"bool\"}],\"name\":\"setLimitedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unregisterConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"unregisterDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unregisterIndustry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_consumerOrDealer(address)\":{\"details\":\"Returns `true` if hasRole of dealer, industry or consumer\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getIssuedBy(uint256)\":{\"details\":\"returns issuer of a given tokenId\"},\"getNumOfUniqueTokens()\":{\"details\":\"returns number of unique tokens\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoles(address)\":{\"details\":\"Helper function for returning tuple of bools of role membership\",\"params\":{\"account\":\"address to check roles\"}},\"getTokenDetails(uint256)\":{\"details\":\"returns the details of a given tokenId, omitting holders\",\"params\":{\"tokenId\":\"token to check\"}},\"getTokenRetiredAmount(address,uint256)\":{\"details\":\"returns the retired amount on a token\",\"params\":{\"tokenId\":\"token to check\"}},\"getTokenType(uint256)\":{\"details\":\"returns the token name for the given token as a string value\",\"params\":{\"tokenId\":\"token to check\"}},\"getTransferHash(address,address,uint256[],uint256[])\":{\"details\":\"Returns keccak256 hash of transaction request including next available nonce for transfer from -> to addresses\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isConsumerRegistered(address)\":{\"details\":\"returns true if Consumers's account is registered\",\"params\":{\"account\":\"address of the dealer\"}},\"isDealerRegistered(address)\":{\"details\":\"returns true if Dealer's account is registered\",\"params\":{\"account\":\"address of the dealer\"}},\"issue(address,address,uint8,uint256,uint256,uint256,string,string,string)\":{\"details\":\"External function to mint an amount of a token Only authorized dealer of associated token type can call this function\",\"params\":{\"quantity\":\"of the token to mint For ex: if one needs 100 full tokens, the caller should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\"}},\"issueOnBehalf(address,address,address,uint8,uint256,uint256,uint256,string,string,string)\":{\"details\":\"Issue function for DAO (on limited mode) or admin to manually pass issuer Must be called from Timelock contract through a successful proposal or by admin if limited mode is set to false\"},\"mint(address,uint256,uint256)\":{\"details\":\"mints more of an existing token\",\"params\":{\"quantity\":\"amount to mint\",\"to\":\"reciepient of token\",\"tokenId\":\"token to mint more of\"}},\"registerConsumer(address)\":{\"details\":\"returns true if Consumer's account is registered for the given token\",\"params\":{\"account\":\"address of the consumer\"}},\"registerDealer(address,uint8)\":{\"details\":\"Only contract owner can register Dealers\",\"params\":{\"account\":\"address of the dealer to register\"}},\"registerIndustry(address)\":{\"details\":\"msg.sender can volunteer themselves as registered industry or other registered dealer can register Industry\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"retire(uint256,uint256)\":{\"details\":\"sets the token to the retire state to disable transfers, mints and burns\",\"params\":{\"tokenId\":\"token to set in pause state   Only contract owner can pause or resume tokens\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setLimitedMode(bool)\":{\"details\":\"turns off or on limited mode\",\"params\":{\"_limitedMode\":\"boolean value\"}},\"transfer(address,uint256,uint256)\":{\"details\":\"transfers the value to the 'to' account for tokenId\",\"params\":{\"to\":\"recipient address\",\"tokenId\":\"tokenId for the transfer\",\"value\":\"amount of transfer Transfer can start only when both parties are registered and the token is not paused Note: Token holders can arbitrarily call safeTransferFrom() without these checks The requires commented out below have been moved to _beforeTokenTransfer hook so that they are always applied to safeTransferFrom (or safeBatch...)      \"}},\"unregisterConsumer(address)\":{\"details\":\"Only contract owner can unregister Consumers TO-DO clarify the above - function allows any Dealer to unregister consumers. Why would we need to unregister consumers?\",\"params\":{\"account\":\"address to be unregistered\"}},\"unregisterDealer(address,uint8)\":{\"details\":\"Only contract owner can unregister Dealers\",\"params\":{\"account\":\"address to be unregistered\"}},\"unregisterIndustry(address)\":{\"details\":\"msg.sender can unvolunteer themselves as registered industry or other registered dealer can unregister Industry\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"verifySignature(bytes32,bytes,address)\":{\"details\":\"Returns `true` if transfer has been approved by to address reconstruct transferHash and check that it matches the signature\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NetEmissionsTokenNetwork.sol\":\"NetEmissionsTokenNetwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/NetEmissionsTokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\ncontract NetEmissionsTokenNetwork is Initializable, ERC1155Upgradeable, AccessControlUpgradeable {\\n\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using ECDSAUpgradeable for bytes32;\\n    using ECDSAUpgradeable for address;\\n\\n    bool public limitedMode;  // disables some features like arbitrary token transfers and issuing without proposals\\n    address public admin;     // address that has permission to register dealers, transfer in limitedMode, etc.\\n    address private timelock; // DAO contract that executes proposals to issue tokens after a successful vote\\n\\n    // Generic dealer role for registering/unregistering consumers\\n    bytes32 public constant REGISTERED_DEALER =\\n        keccak256(\\\"REGISTERED_DEALER\\\");\\n    // Token type specific roles\\n    bytes32 public constant REGISTERED_REC_DEALER =\\n        keccak256(\\\"REGISTERED_REC_DEALER\\\");\\n    bytes32 public constant REGISTERED_OFFSET_DEALER =\\n        keccak256(\\\"REGISTERED_OFFSET_DEALER\\\");\\n    bytes32 public constant REGISTERED_EMISSIONS_AUDITOR =\\n        keccak256(\\\"REGISTERED_EMISSIONS_AUDITOR\\\");\\n    // Consumer role\\n    bytes32 public constant REGISTERED_CONSUMER =\\n        keccak256(\\\"REGISTERED_CONSUMER\\\");\\n    // Industry role (voluntary/nominate)\\n    bytes32 public constant REGISTERED_INDUSTRY =\\n        keccak256(\\\"REGISTERED_INDUSTRY\\\");\\n    // Registered Industry Dealer (admin assignment)\\n    bytes32 public constant REGISTERED_INDUSTRY_DEALER =\\n        keccak256(\\\"REGISTERED_INDUSTRY_DEALER\\\");\\n\\n    /**\\n     * @dev Structure of all tokens issued in this contract\\n     * tokenId - Auto-increments whenever new tokens are issued\\n     * tokenTypeId - Corresponds to the three token types:\\n     *   1 => Renewable Energy Certificate\\n     *   2 => Carbon Emissions Offset\\n     *   3 => Audited Emissions\\n     *   4 => Carbon Tracker tokens (traded, burnt or stored fuel/feed stock)\\n     *   TO-DO define carbon tracker storage transactions (i.e. captured CO2 management) \\n     * issuedBy - Address of transaction runner\\n     * issuedFrom - Address of dealer issuing this token\\n     * issuee - Address of original issued recipient this token\\n     * fromDate - Unix timestamp\\n     * thruDate - Unix timestamp\\n     * dateCreated - Unix timestamp\\n     */\\n    struct CarbonTokenDetails {\\n        uint256 tokenId;\\n        uint8 tokenTypeId;\\n        address issuedBy;\\n        address issuedFrom;\\n        address issuedTo;\\n        uint256 fromDate;\\n        uint256 thruDate;\\n        uint256 dateCreated;\\n        string metadata;\\n        string manifest;\\n        string description;\\n        uint256 totalIssued;\\n        uint256 totalRetired;\\n    }\\n\\n    // Counts number of unique token IDs (auto-incrementing)\\n    CountersUpgradeable.Counter private _numOfUniqueTokens;\\n\\n    // Token metadata and retired balances\\n    mapping(uint256 => CarbonTokenDetails) private _tokenDetails;\\n    mapping(uint256 => mapping(address => uint256)) private _retiredBalances;\\n    mapping(uint256 => mapping(address => uint256)) private _transferredBalances;\\n\\n    // Nonce for tokeTypeId 4 transfer from => to account\\n    mapping(address => mapping(address => uint32)) private carbonTransferNonce;\\n\\n    // Events\\n    event TokenCreated(\\n        uint256 availableBalance,\\n        uint256 retiredBalance,\\n        uint256 tokenId,\\n        uint8 tokenTypeId,\\n        address indexed issuedBy,\\n        address indexed issuedFrom,\\n        address indexed issuedTo,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 dateCreated,\\n        string metadata,\\n        string manifest,\\n        string description\\n    );\\n    event TokenRetired(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event RegisteredConsumer(address indexed account);\\n    event UnregisteredConsumer(address indexed account);\\n    event RegisteredDealer(address indexed account);\\n    event UnregisteredDealer(address indexed account);\\n    event RegisteredIndustry(address indexed account);\\n    event UnregisteredIndustry(address indexed account);\\n\\n    // Replaces constructor in OpenZeppelin Upgrades\\n    function initialize(address _admin) public initializer {\\n\\n        __ERC1155_init(\\\"\\\");\\n\\n        // Allow dealers to register consumers\\n        _setRoleAdmin(REGISTERED_CONSUMER, REGISTERED_DEALER);\\n\\n        // Set-up admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(REGISTERED_DEALER, _admin);\\n        _setupRole(REGISTERED_REC_DEALER, _admin);\\n        _setupRole(REGISTERED_OFFSET_DEALER, _admin);\\n        _setupRole(REGISTERED_EMISSIONS_AUDITOR, _admin);\\n        _setupRole(REGISTERED_INDUSTRY_DEALER, _admin);\\n        _setupRole(REGISTERED_INDUSTRY, _admin);\\n        admin = _admin;\\n\\n        // initialize\\n        timelock = address(0);\\n\\n        limitedMode = false;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::onlyAdmin: msg.sender not the admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier consumerOrDealer(address from,address to) {\\n        if(from!=address(0)){\\n            // if not minting require sender to be consumerOrDealer \\n            require(_consumerOrDealer(from),\\n                \\\"CLM8::consumerOrDealer: sender not a consumer or a dealer\\\");\\n        }\\n        if(to!=address(0)){\\n            // if not burning require receiver is consumerOrDealer \\n            require(_consumerOrDealer(to),\\n                \\\"CLM8::consumerOrDealer: recipient must be consumer, dealer or industry\\\"); \\n        }\\n        _;\\n    }\\n\\n    modifier onlyDealer() {\\n        _onlyDealer();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if hasRole of dealer\\n     */\\n    function _onlyDealer() internal view {\\n        /*\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, msg.sender);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, msg.sender);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender);\\n        bool isInDealer = hasRole(REGISTERED_INDUSTRY_DEALER, msg.sender);\\n        */\\n        require(\\n            //hasRole(REGISTERED_REC_DEALER, msg.sender) ||\\n            //hasRole(REGISTERED_OFFSET_DEALER, msg.sender) ||\\n            //hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender) ||\\n            //hasRole(REGISTERED_INDUSTRY_DEALER, msg.sender) ||\\n            // the below will achieve the same as the above\\n            hasRole(REGISTERED_DEALER,msg.sender) || \\n            // REGISTERED_INDSUTRY are considered dealers of carbon tokens\\n            // but have not be assigned REGISTERED_DEALER role by admin\\n            hasRole(REGISTERED_INDUSTRY,msg.sender),\\n            \\\"CLM8::onlyDealer: msg.sender not a dealer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns `true` if hasRole of dealer, industry or consumer\\n     */\\n    function _consumerOrDealer(address entity) public view returns (bool) {\\n        // check for one role and return if true if true\\n        // before checking the next to minimize gas\\n        if(hasRole(REGISTERED_DEALER, entity) ||\\n           hasRole(REGISTERED_CONSUMER, entity) ||\\n           hasRole(REGISTERED_INDUSTRY, entity) \\n        ) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if transfer has been approved by to address\\n     * reconstruct transferHash and check that it matches the signature\\n     */\\n    function verifySignature(\\n        bytes32 msgHash,\\n        bytes memory signature,\\n        address signer\\n    ) public pure returns (bool){   \\n        bytes32 ethSignedMessageHash = msgHash.toEthSignedMessageHash();\\n        return ethSignedMessageHash.recover(signature)==signer;\\n    }\\n    /**\\n     * @dev Returns keccak256 hash of transaction request\\n     * including next available nonce for transfer from -> to addresses\\n     */\\n    function getTransferHash(\\n        address _from, \\n        address _to, \\n        uint256[] memory _ids, \\n        uint256[] memory _amounts\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_from, _to, _ids, _amounts, carbonTransferNonce[_from][_to]+1));\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenId exists\\n     */\\n    function tokenExists(uint256 tokenId) private view returns (bool) {\\n        if (_numOfUniqueTokens.current() >= tokenId) return true;\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenTypeId is valid\\n     */\\n    function tokenTypeIdIsValid(uint8 tokenTypeId) pure private returns (bool) {\\n        if ((tokenTypeId > 0) && (tokenTypeId <= 4)) {\\n            return true;\\n        }\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns number of unique tokens\\n     */\\n    function getNumOfUniqueTokens() public view returns (uint256) {\\n        return _numOfUniqueTokens.current();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual \\n        override(ERC1155Upgradeable,AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev hook to prevent transfers from non-admin account if limitedMode is on\\n     * @param data signature of getTransferHash() for transfer of carbon token type (id=4)\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override\\n        consumerOrDealer(from,to)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        \\n        // TO-DO this could be set as a modifier ...\\n        require((from != to), \\\"CLM8::_beforeTokenTransfer: sender and receiver cannot be the same\\\");\\n        bool approveCarbon; // bool if we need to approve the transfer of carbon tokens\\n        for (uint i = 0; i < ids.length; i++) {\\n\\n            CarbonTokenDetails storage token = _tokenDetails[ids[i]];\\n            // disable most transfers if limitedMode is on\\n            if (limitedMode) {\\n\\n                // allow retiring/burning one's tokens\\n                if (to == address(0)) {\\n                    continue;\\n                }\\n\\n                // for tokenType 1 and 2, only the timelock and DAO can transfer/issue\\n                // for tokenType 3, only emissions auditors can transfer/issue\\n                // (and they are automatically retired right after)\\n                if (token.tokenTypeId == 1 || token.tokenTypeId == 2 ) {\\n                    require(\\n                        operator == timelock || hasRole(DEFAULT_ADMIN_ROLE, operator),\\n                        \\\"CLM8::_beforeTokenTransfer(limited): only admin and DAO can transfer tokens\\\"\\n                    );\\n                } else if (token.tokenTypeId == 3) {\\n                    require(\\n                        hasRole(REGISTERED_EMISSIONS_AUDITOR, operator),\\n                        \\\"CLM8::_beforeTokenTransfer(limited): only emissions auditors can issue audited emissions\\\"\\n                    );\\n                }\\n            }\\n            // for tokenType 4, any authorized operator can\\n            // issue (from == address(0)) or\\n            // burn/retire (to == address(0))\\n            // otherwise require receiver (to address) to have approved (signed) the transferHash\\n            if(token.tokenTypeId == 4 && to != address(0) && from != address(0)) {\\n                approveCarbon = false;//true;\\n                // TO-DO: drop internal approval of carbon transfers?\\n                // voluntary carbon tracker token can be sent to anyone to use in the C-NFT\\n                // they can be sent without approval inviting the receiver to track them to their NFT\\n                // accumulate total transferred balances (not minted or burnt)\\n                _transferredBalances[token.tokenId][from] =\\n                    _transferredBalances[token.tokenId][from].add(amounts[i]);\\n            }\\n\\n        }\\n        if(approveCarbon){\\n            bytes32 messageHash = getTransferHash(from,to,ids,amounts);\\n            require(\\n                verifySignature(messageHash, data, to),\\n                \\\"CLM8::_beforeTokenTransfer: receiver's approval signature is not valid\\\"\\n            );\\n            //increment the nonce once transaction has been confirmed\\n            carbonTransferNonce[from][to]++;\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev External function to mint an amount of a token\\n     * Only authorized dealer of associated token type can call this function\\n     * @param quantity of the token to mint For ex: if one needs 100 full tokens, the caller\\n     * should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\\n     */\\n    function issue(\\n        address issuedFrom,\\n        address issuedTo,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public onlyDealer {\\n        return _issue(\\n            msg.sender, // issuedBy\\n            issuedFrom,\\n            issuedTo,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    /**\\n     * @dev Issue function for DAO (on limited mode) or admin to manually pass issuer\\n     * Must be called from Timelock contract through a successful proposal\\n     * or by admin if limited mode is set to false\\n     */\\n    function issueOnBehalf(\\n        address issuedBy,\\n        address issuedFrom,\\n        address issuedTo,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public {\\n\\n        require(\\n            (msg.sender == timelock) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::issueOnBehalf: call must come from DAO or admin\\\"\\n        );\\n\\n        return _issue(\\n            issuedBy,\\n            issuedFrom,\\n            issuedTo,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    function _issue(\\n        address _issuedBy,\\n        address _issuedFrom,\\n        address _issuedTo,\\n        uint8 _tokenTypeId,\\n        uint256 _quantity,\\n        uint256 _fromDate,\\n        uint256 _thruDate,\\n        string memory _metadata,\\n        string memory _manifest,\\n        string memory _description\\n    ) internal {\\n\\n        require(\\n            tokenTypeIdIsValid(_tokenTypeId),\\n            \\\"CLM8::_issue: tokenTypeId is invalid\\\"\\n        );\\n\\n        if (limitedMode) {\\n            if (_tokenTypeId == 1 || _tokenTypeId == 2 ) {\\n                require(\\n                    msg.sender == timelock,\\n                    \\\"CLM8::_issue(limited): msg.sender not timelock\\\"\\n                );\\n                require(\\n                    hasRole(DEFAULT_ADMIN_ROLE, _issuedTo),\\n                    \\\"CLM8::_issue(limited): issuee not admin\\\"\\n                );\\n                require(\\n                    hasRole(REGISTERED_REC_DEALER, _issuedBy) || hasRole(REGISTERED_OFFSET_DEALER, _issuedBy),\\n                    \\\"CLM8::_issue(limited): proposer not a registered dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 3) {\\n                require(\\n                    hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuedBy),\\n                    \\\"CLM8::_issue(limited): issuer not a registered emissions auditor\\\"\\n                );\\n            }\\n        } else {\\n            if (_tokenTypeId == 1) {\\n                require(\\n                    hasRole(REGISTERED_REC_DEALER, _issuedBy),\\n                    \\\"CLM8::_issue: issuer not a registered REC dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 2) {\\n                require(\\n                    hasRole(REGISTERED_OFFSET_DEALER, _issuedBy),\\n                    \\\"CLM8::_issue: issuer not a registered offset dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 3) {\\n                require(\\n                    hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuedBy),\\n                    \\\"CLM8::_issue: issuer not a registered emissions auditor\\\"\\n                );\\n                // require(\\n                //     hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuer),\\n                //     \\\"CLM8::_issue: issuer not a registered emissions auditor\\\"\\n                // );\\n            }\\n        }\\n        // TO-DO: Define limited mode for tokenTypeId 4?\\n        if (_tokenTypeId == 4) {\\n            require(\\n                hasRole(REGISTERED_INDUSTRY, _issuedBy),\\n                \\\"CLM8::_issue: issuer not a registered industry\\\"\\n            );\\n            require(\\n                msg.sender == _issuedBy,\\n                \\\"CLM8::_issue: registered industry can only issue carbon to itself\\\"\\n            );\\n        } \\n\\n        // increment token identifier\\n        _numOfUniqueTokens.increment();\\n\\n        // create token details\\n        CarbonTokenDetails storage tokenInfo = _tokenDetails[_numOfUniqueTokens.current()];\\n\\n        tokenInfo.tokenId = _numOfUniqueTokens.current();\\n        tokenInfo.tokenTypeId = _tokenTypeId;\\n        tokenInfo.issuedBy = _issuedBy;\\n        tokenInfo.issuedFrom = _issuedFrom;\\n        tokenInfo.issuedTo = _issuedTo;\\n        tokenInfo.fromDate = _fromDate;\\n        tokenInfo.thruDate = _thruDate;\\n        tokenInfo.dateCreated = block.timestamp;\\n        tokenInfo.metadata = _metadata;\\n        tokenInfo.manifest = _manifest;\\n        tokenInfo.description = _description;\\n        tokenInfo.totalIssued = _quantity;\\n        tokenInfo.totalRetired = uint256(0);\\n\\n        super._mint(_issuedTo, _numOfUniqueTokens.current(), _quantity, \\\"\\\");\\n\\n        // retire audited emissions on mint\\n        if (_tokenTypeId == 3) {\\n            _retire(tokenInfo.issuedTo, tokenInfo.tokenId, _quantity);\\n        }\\n\\n        // emit event with all token details and balances\\n        emit TokenCreated(\\n            _quantity,\\n            _retiredBalances[tokenInfo.tokenId][tokenInfo.issuedTo],\\n            tokenInfo.tokenId,\\n            tokenInfo.tokenTypeId,\\n            tokenInfo.issuedBy,\\n            tokenInfo.issuedFrom,\\n            tokenInfo.issuedTo,\\n            tokenInfo.fromDate,\\n            tokenInfo.thruDate,\\n            tokenInfo.dateCreated,\\n            tokenInfo.metadata,\\n            tokenInfo.manifest,\\n            tokenInfo.description\\n        );\\n    }\\n\\n    /**\\n     * @dev mints more of an existing token\\n     * @param to reciepient of token\\n     * @param tokenId token to mint more of\\n     * @param quantity amount to mint\\n     */\\n     // To DO - this will increase _balances of to account\\n     // but will not update the totalIssued ?\\n    function mint(address to, uint256 tokenId, uint256 quantity)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::mint: tokenId does not exist\\\");\\n        require(!limitedMode, \\\"CLM8::mint: cannot mint new tokens in limited mode\\\");\\n        super._mint(to, tokenId, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev returns the token name for the given token as a string value\\n     * @param tokenId token to check\\n     */\\n    function getTokenType(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenType: tokenId does not exist\\\");\\n        CarbonTokenDetails storage token = _tokenDetails[tokenId];\\n\\n        if (token.tokenTypeId == 1) {\\n            return \\\"Renewable Energy Certificate\\\";\\n        } else if (token.tokenTypeId == 2) {\\n            return \\\"Carbon Emissions Offset\\\";\\n        } else if (token.tokenTypeId == 3) {\\n            return \\\"Audited Emissions\\\";\\n        } else if (token.tokenTypeId == 4) {\\n            return \\\"Carbon Tracker\\\";\\n        } else {\\n            return \\\"Token does not exist\\\";\\n        }\\n    }\\n    function getTokenTypeId(uint tokenId) external view returns(uint8){\\n        return _tokenDetails[tokenId].tokenTypeId;\\n    }\\n    function getRetiredBalances(uint tokenId, address account) \\n        external view returns(uint){\\n        return _retiredBalances[tokenId][account];\\n    }\\n    function getTransferredBalances(uint tokenId, address account) \\n        external view returns(uint){\\n        return _transferredBalances[tokenId][account];\\n    }\\n\\n    /**\\n     * @dev returns the retired amount on a token\\n     * @param tokenId token to check\\n     */\\n    function getTokenRetiredAmount(address account, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenRetiredAmount: tokenId does not exist\\\");\\n        uint256 amount = _retiredBalances[tokenId][account];\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev sets the token to the retire state to disable transfers, mints and burns\\n     * @param tokenId token to set in pause state\\n     *   Only contract owner can pause or resume tokens\\n     */\\n    function retire(\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external consumerOrDealer(msg.sender,address(0)) {\\n        require(tokenExists(tokenId), \\\"CLM8::retire: tokenId does not exist\\\");\\n        // TO-DO do we need this require statement? super._burn sub() will require this ...\\n        require( (amount <= super.balanceOf(msg.sender, tokenId)), \\\"CLM8::retire: not enough available balance to retire\\\" );\\n\\n        _retire(msg.sender, tokenId, amount);\\n        emit TokenRetired(\\n            msg.sender,\\n            tokenId,\\n            amount\\n        );\\n    }\\n\\n    function _retire(\\n        address _address,\\n        uint256 tokenId,\\n        uint256 _quantity\\n    ) internal {\\n        super._burn(_address, tokenId, _quantity);\\n        _tokenDetails[tokenId].totalRetired = _tokenDetails[tokenId].totalRetired.add(_quantity);\\n        _retiredBalances[tokenId][_address] = _retiredBalances[tokenId][_address].add(_quantity);\\n    }\\n\\n\\n    /**\\n     * @dev returns true if Dealer's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isDealerRegistered(address account) public view returns (bool) {\\n        if (hasRole(REGISTERED_REC_DEALER, account) ||\\n            hasRole(REGISTERED_OFFSET_DEALER, account) ||\\n            hasRole(REGISTERED_EMISSIONS_AUDITOR, account) ||\\n            hasRole(REGISTERED_INDUSTRY_DEALER, account) \\n        ) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isConsumerRegistered(address account) public view returns (bool) {\\n        return hasRole(REGISTERED_CONSUMER, account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's or Dealer's account is registered\\n     * @param account address of the consumer/dealer\\n     */\\n    function isRegisteredDealerOrConsumer(address account) private view returns (bool) {\\n        return (isDealerRegistered(account) || isConsumerRegistered(account));\\n    }\\n    \\n    struct RolesInfo {\\n      bool isAdmin;\\n      bool isConsumer;\\n      bool isRecDealer;\\n      bool isCeoDealer;\\n      bool isAeDealer;\\n      bool isIndustry;\\n      bool isIndustryDealer;\\n    }\\n\\n    /**\\n     * @dev Helper function for returning tuple of bools of role membership\\n     * @param account address to check roles\\n     */\\n    function getRoles(address account) external view returns (RolesInfo memory) {\\n        RolesInfo memory roles;\\n        roles.isAdmin = hasRole(DEFAULT_ADMIN_ROLE, account);\\n        roles.isRecDealer = hasRole(REGISTERED_REC_DEALER, account);\\n        roles.isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, account);\\n        roles.isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        roles.isIndustry = hasRole(REGISTERED_INDUSTRY, account);\\n        roles.isConsumer = hasRole(REGISTERED_CONSUMER, account);\\n        roles.isIndustryDealer = hasRole(REGISTERED_INDUSTRY_DEALER, account);\\n        return roles;\\n    }\\n\\n    /**\\n     * @dev Only contract owner can register Dealers\\n     * @param account address of the dealer to register\\n     */\\n    function registerDealer(address account, uint8 tokenTypeId)\\n        public\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::registerDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            grantRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            grantRole(REGISTERED_OFFSET_DEALER, account);\\n        } else if (tokenTypeId == 3){\\n            grantRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        } else if (tokenTypeId == 4) {\\n            grantRole(REGISTERED_INDUSTRY, account);\\n            grantRole(REGISTERED_INDUSTRY_DEALER, account);\\n        }\\n        // Also grant generic dealer role for registering/unregistering dealer\\n        grantRole(REGISTERED_DEALER, account);\\n        emit RegisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev msg.sender can volunteer themselves as registered industry\\n     * or other registered dealer can register Industry\\n     */\\n    function registerIndustry(address account) external\\n    {\\n        if(msg.sender != account){\\n            // only dealer can register industry\\n            _onlyDealer();\\n        }\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::registerIndustry(limited): only admin can register industries\\\");\\n        }\\n        _setupRole(REGISTERED_INDUSTRY, account);\\n        emit RegisteredIndustry(account);\\n    }\\n\\n    /**\\n     * @dev msg.sender can unvolunteer themselves as registered industry\\n     * or other registered dealer can unregister Industry\\n     */\\n    function unregisterIndustry(address account) external\\n    {\\n        if(msg.sender != account){\\n            // only dealer can register industry\\n            _onlyDealer();\\n        }\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::unregisterIndustry(limited): only admin can unregister industries\\\");\\n        }\\n        revokeRole(REGISTERED_INDUSTRY, account);\\n        emit UnregisteredIndustry(account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumer's account is registered for the given token\\n     * @param account address of the consumer\\n     */\\n    function registerConsumer(address account) external onlyDealer {\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::registerConsumer(limited): only admin can register consumers\\\");\\n        }\\n        grantRole(REGISTERED_CONSUMER, account);\\n        emit RegisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Dealers\\n     * @param account address to be unregistered\\n     */\\n    function unregisterDealer(address account, uint8 tokenTypeId)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::unregisterDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            super.revokeRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            super.revokeRole(REGISTERED_OFFSET_DEALER, account);\\n        } else if (tokenTypeId == 3) {\\n            super.revokeRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        } else if (tokenTypeId == 4) {\\n            super.revokeRole(REGISTERED_INDUSTRY_DEALER, account);\\n        }\\n        // If no longer a dealer of any token type, remove generic dealer role\\n        if (!isDealerRegistered(account)) {\\n            revokeRole(REGISTERED_DEALER, account);\\n        }\\n\\n        emit UnregisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Consumers\\n     * TO-DO clarify the above - function allows any Dealer to unregister consumers.\\n     * Why would we need to unregister consumers?\\n     * @param account address to be unregistered\\n     */\\n    function unregisterConsumer(address account) external onlyDealer {\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::unregisterConsumer(limited): only admin can unregister consumers\\\");\\n        }\\n        super.revokeRole(REGISTERED_CONSUMER, account);\\n        emit UnregisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev transfers the value to the 'to' account for tokenId\\n     * @param to recipient address\\n     * @param tokenId tokenId for the transfer\\n     * @param value amount of transfer\\n     * Transfer can start only when both parties are registered and the token is not paused\\n     * Note: Token holders can arbitrarily call safeTransferFrom() without these checks\\n     * The requires commented out below have been moved to _beforeTokenTransfer hook\\n     * so that they are always applied to safeTransferFrom (or safeBatch...)      \\n     */\\n    function transfer(\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        require(tokenExists(tokenId), \\\"CLM8::transfer: tokenId does not exist\\\");\\n\\n        /*\\n        require((msg.sender != to), \\\"CLM8::transfer: sender and receiver cannot be the same\\\");\\n        receiver must be Consumer or Dealer or Industry\\n        require(\\n            hasRole(REGISTERED_CONSUMER, to) || \\n            hasRole(REGISTERED_DEALER, to) || \\n            hasRole(REGISTERED_INDUSTRY, to),\\n            \\\"CLM8::transfer: Recipient must be consumer, industry, or dealer\\\"\\n        ); */\\n        super.safeTransferFrom(msg.sender, to, tokenId, value, '0x00');\\n    }\\n\\n    function setTimelock(\\n        address _timelock\\n    ) external onlyAdmin {\\n        timelock = _timelock;\\n    }\\n\\n    function getAvailableAndRetired(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 available = super.balanceOf(account, tokenId);\\n        uint256 retired = this.getTokenRetiredAmount(account, tokenId);\\n        return (available, retired);\\n    }\\n    function getAvailableRetiredAndTransferred(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        uint256 available;\\n        uint256 retired;\\n        (available,retired) = this.getAvailableAndRetired(account, tokenId);\\n        uint256 transferred = _transferredBalances[tokenId][account];\\n        return (available, retired, transferred);\\n    }\\n\\n    /**\\n     * @dev returns issuer of a given tokenId\\n     */\\n    function getIssuedBy(uint256 tokenId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _tokenDetails[tokenId].issuedBy;\\n    }\\n\\n    /**\\n     * @dev returns the details of a given tokenId, omitting holders\\n     * @param tokenId token to check\\n     */\\n    function getTokenDetails(uint256 tokenId)\\n        external\\n        view\\n        returns (CarbonTokenDetails memory)\\n    {\\n        return _tokenDetails[tokenId];\\n    }\\n\\n    /**\\n     * @dev turns off or on limited mode\\n     * @param _limitedMode boolean value\\n     */\\n    function setLimitedMode(bool _limitedMode)\\n        external\\n        onlyAdmin\\n    {\\n        limitedMode = _limitedMode;\\n    }\\n\\n    function isAuditor(address auditor) view external returns (bool) {\\n        return hasRole(REGISTERED_EMISSIONS_AUDITOR, auditor);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa28bf76031c18825906724e50e94aa52cbd5b74801d57e0b52e31f1961a12e18\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061564b80620000216000396000f3fe608060405234801561001057600080fd5b50600436106103415760003560e01c806378e5c592116101b8578063ce6ccfaf11610104578063ee042956116100a2578063f851a4401161007c578063f851a4401461084d578063fbdf37ea14610865578063fc0bbce31461087a578063fcba79481461088d57610341565b8063ee042956146107bb578063f242432a14610804578063f73e09e01461081757610341565b8063dba851b0116100de578063dba851b01461074c578063ddc3e6eb14610759578063e2e564f21461076c578063e985e9c51461077f57610341565b8063ce6ccfaf146106e3578063d547741f14610703578063d75cfd581461071657610341565b8063a0d975a711610171578063bdacb3031161014b578063bdacb3031461068a578063c03df9701461069d578063c1e03728146106b0578063c4d66de8146106d057610341565b8063a0d975a71461065c578063a217fddf1461066f578063a22cb4651461067757610341565b806378e5c592146105d15780637aab1b88146105e65780637f157c9b146105f957806388e871b414610621578063907b66521461063457806391d148541461064957610341565b806331aa4b201161029257806349b90557116102305780635ddb368f1161020a5780635ddb368f1461058e57806369f7ef441461059657806376aed2e1146105a957806376ce4755146105bc57610341565b806349b90557146105485780634e1273f41461055b57806353dbe9821461057b57610341565b806336568abe1161026c57806336568abe146104e15780633752eb75146104f457806344b22fdd14610507578063496dd90b1461051a57610341565b806331aa4b20146104a857806331cd4199146104bb57806333781a0e146104ce57610341565b8063156e29f6116102ff578063248a9ca3116102d9578063248a9ca31461044c578063293a7f2e1461046f5780632eb2c2d6146104825780632f2ff15d1461049557610341565b8063156e29f61461040f57806318a50d7e146104225780631ef68ef71461043757610341565b8062fdd58e1461034657806301ffc9a71461036c578063033fd9191461038f578063095bcdb6146103a45780630e89341c146103b7578063127d5ad0146103d7575b600080fd5b610359610354366004614931565b6108a2565b6040519081526020015b60405180910390f35b61037f61037a366004614b27565b61093b565b6040519015158152602001610363565b6103a261039d36600461457c565b610968565b005b6103a26103b236600461495a565b610a63565b6103ca6103c5366004614a99565b610af5565b6040516103639190614e96565b6103fd6103e5366004614a99565b600090815260cc602052604090206001015460ff1690565b60405160ff9091168152602001610363565b6103a261041d36600461495a565b610b89565b61035960008051602061559683398151915281565b61035960008051602061553683398151915281565b61035961045a366004614a99565b60009081526097602052604090206001015490565b6103a261047d366004614b77565b610c99565b6103a261049036600461472e565b610e1e565b6103a26104a3366004614ab1565b610eb5565b6103a26104b636600461498c565b610edc565b61037f6104c9366004614ad3565b61106e565b61037f6104dc36600461457c565b6110f1565b6103a26104ef366004614ab1565b61110b565b6103a26105023660046145c8565b611189565b6103a261051536600461457c565b611230565b61052d610528366004614931565b61131a565b60408051938452602084019290925290820152606001610363565b61037f61055636600461457c565b6113d3565b61056e6105693660046149b5565b6113ed565b6040516103639190614e55565b6103a261058936600461457c565b61154e565b61035961163c565b61037f6105a436600461457c565b61164d565b6103ca6105b7366004614a99565b6116d6565b6103596000805160206155f683398151915281565b61035960008051602061557683398151915281565b6103596105f43660046146ad565b611896565b61060c610607366004614931565b61190b565b60408051928352602083019190915201610363565b6103a261062f366004614835565b6119ad565b61035960008051602061555683398151915281565b61037f610657366004614ab1565b6119d2565b61035961066a366004614931565b6119fd565b610359600081565b6103a2610685366004614908565b611a98565b6103a261069836600461457c565b611aa3565b6103a26106ab36600461457c565b611aec565b6106c36106be366004614a99565b611beb565b60405161036391906150dd565b6103a26106de36600461457c565b611ec7565b6106f66106f136600461457c565b61208c565b60405161036391906151e2565b6103a2610711366004614ab1565b6121cd565b610359610724366004614ab1565b600091825260cd602090815260408084206001600160a01b0393909316845291905290205490565b60c95461037f9060ff1681565b6103a2610767366004614a7f565b6121f3565b6103a261077a36600461498c565b61222d565b61037f61078d366004614596565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6107ec6107c9366004614a99565b600090815260cc602052604090206001015461010090046001600160a01b031690565b6040516001600160a01b039091168152602001610363565b6103a26108123660046147d3565b6123b6565b610359610825366004614ab1565b600091825260ce602090815260408084206001600160a01b0393909316845291905290205490565b60c9546107ec9061010090046001600160a01b031681565b61035960008051602061551683398151915281565b61037f61088836600461457c565b61243d565b6103596000805160206155d683398151915281565b60006001600160a01b0383166109135760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216637965db0b60e01b1480610960575061096082612493565b90505b919050565b336001600160a01b03821614610980576109806124b8565b60c95460ff1615610a14576109966000336119d2565b610a145760405162461bcd60e51b815260206004820152604360248201527f434c4d383a3a7265676973746572496e647573747279286c696d69746564293a60448201527f206f6e6c792061646d696e2063616e20726567697374657220696e647573747260648201526269657360e81b608482015260a40161090a565b610a2c6000805160206155168339815191528261254e565b6040516001600160a01b038216907f1230fb0cdc77da02d53e840f6f60d5e7f68646d7d1ccdd890860e05533b62f5390600090a250565b610a6c82612558565b610ac75760405162461bcd60e51b815260206004820152602660248201527f434c4d383a3a7472616e736665723a20746f6b656e496420646f6573206e6f7460448201526508195e1a5cdd60d21b606482015260840161090a565b610af033848484604051806040016040528060048152602001630307830360e41b8152506123b6565b505050565b606060678054610b049061538b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b309061538b565b8015610b7d5780601f10610b5257610100808354040283529160200191610b7d565b820191906000526020600020905b815481529060010190602001808311610b6057829003601f168201915b50505050509050919050565b610b946000336119d2565b610bb05760405162461bcd60e51b815260040161090a90614ef1565b610bb982612558565b610c105760405162461bcd60e51b815260206004820152602260248201527f434c4d383a3a6d696e743a20746f6b656e496420646f6573206e6f74206578696044820152611cdd60f21b606482015260840161090a565b60c95460ff1615610c7e5760405162461bcd60e51b815260206004820152603260248201527f434c4d383a3a6d696e743a2063616e6e6f74206d696e74206e657720746f6b656044820152716e7320696e206c696d69746564206d6f646560701b606482015260840161090a565b610af083838360405180602001604052806000815250612571565b3360008115610cc757610cab8261243d565b610cc75760405162461bcd60e51b815260040161090a90615035565b6001600160a01b03811615610cfb57610cdf8161243d565b610cfb5760405162461bcd60e51b815260040161090a90614f3a565b610d0484612558565b610d5c5760405162461bcd60e51b8152602060048201526024808201527f434c4d383a3a7265746972653a20746f6b656e496420646f6573206e6f7420656044820152631e1a5cdd60e21b606482015260840161090a565b610d6633856108a2565b831115610dd25760405162461bcd60e51b815260206004820152603460248201527f434c4d383a3a7265746972653a206e6f7420656e6f75676820617661696c61626044820152736c652062616c616e636520746f2072657469726560601b606482015260840161090a565b610ddd338585612683565b604080518581526020810185905233917f8f1b5ebb586d3d169e4ed07db9cd10ce0dd30c7b656171310eae7517c0b53cf9910160405180910390a250505050565b6001600160a01b038516331480610e3a5750610e3a853361078d565b610ea15760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161090a565b610eae858585858561270f565b5050505050565b600082815260976020526040902060010154610ed281335b612919565b610af0838361297d565b610ee76000336119d2565b610f035760405162461bcd60e51b815260040161090a90614ef1565b610f0c81612a03565b610f715760405162461bcd60e51b815260206004820152603060248201527f434c4d383a3a72656769737465724465616c65723a20746f6b656e547970654960448201526f1908191bd95cc81b9bdd08195e1a5cdd60821b606482015260840161090a565b8060ff1660011415610f9a57610f956000805160206155d683398151915283610eb5565b61101e565b8060ff1660021415610fbe57610f9560008051602061553683398151915283610eb5565b8060ff1660031415610fe257610f956000805160206155f683398151915283610eb5565b8060ff166004141561101e5761100660008051602061551683398151915283610eb5565b61101e60008051602061555683398151915283610eb5565b61103660008051602061559683398151915283610eb5565b6040516001600160a01b038316907fa8377deee15954185683d55effd369508b4935978c8cb2bab790bf04c570181490600090a25050565b6000806110c8856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b0383166110de8286612a25565b6001600160a01b03161495945050505050565b6000610960600080516020615576833981519152836119d2565b6001600160a01b038116331461117b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161090a565b6111858282612a41565b5050565b60ca546001600160a01b03163314806111a857506111a86000336119d2565b6112125760405162461bcd60e51b815260206004820152603560248201527f434c4d383a3a69737375654f6e426568616c663a2063616c6c206d757374206360448201527437b6b290333937b6902220a79037b91030b236b4b760591b606482015260840161090a565b6112248a8a8a8a8a8a8a8a8a8a612aa8565b50505050505050505050565b6112386124b8565b60c95460ff16156112cb5761124e6000336119d2565b6112cb5760405162461bcd60e51b815260206004820152604260248201527f434c4d383a3a7265676973746572436f6e73756d6572286c696d69746564293a60448201527f206f6e6c792061646d696e2063616e20726567697374657220636f6e73756d65606482015261727360f01b608482015260a40161090a565b6112e360008051602061557683398151915282610eb5565b6040516001600160a01b038216907f69a0adee259d26fe61f4776f7bea7f3a9737c7321256821b985f988545efd31990600090a250565b604051637f157c9b60e01b81526001600160a01b03831660048201526024810182905260009081908190819081903090637f157c9b90604401604080518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190614b98565b600097885260ce60209081526040808a206001600160a01b039b909b168a5299905297909620549597945050505050565b60006109606000805160206155f6833981519152836119d2565b606081518351146114525760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161090a565b600083516001600160401b0381111561147b57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114a4578160200160208202803683370190505b50905060005b84518110156115465761150b8582815181106114d657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106114fe57634e487b7160e01b600052603260045260246000fd5b60200260200101516108a2565b82828151811061152b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015261153f816153ec565b90506114aa565b509392505050565b6115566124b8565b60c95460ff16156115ed5761156c6000336119d2565b6115ed5760405162461bcd60e51b815260206004820152604660248201527f434c4d383a3a756e7265676973746572436f6e73756d6572286c696d6974656460448201527f293a206f6e6c792061646d696e2063616e20756e726567697374657220636f6e60648201526573756d65727360d01b608482015260a40161090a565b611605600080516020615576833981519152826121cd565b6040516001600160a01b038216907f03a38088da75ee2d80f6c753f55f8fd17602ae17d8bd0ef44d5e1f28ab5af11f90600090a250565b600061164760cb5490565b90505b90565b60006116676000805160206155d6833981519152836119d2565b806116855750611685600080516020615536833981519152836119d2565b806116a357506116a36000805160206155f6833981519152836119d2565b806116c157506116c1600080516020615556833981519152836119d2565b156116ce57506001610963565b506000919050565b60606116e182612558565b6117405760405162461bcd60e51b815260206004820152602a60248201527f434c4d383a3a676574546f6b656e547970653a20746f6b656e496420646f6573604482015269081b9bdd08195e1a5cdd60b21b606482015260840161090a565b600082815260cc6020526040902060018082015460ff16141561179857505060408051808201909152601c81527f52656e657761626c6520456e65726779204365727469666963617465000000006020820152610963565b600181015460ff16600214156117e357505060408051808201909152601781527f436172626f6e20456d697373696f6e73204f66667365740000000000000000006020820152610963565b600181015460ff16600314156118225750506040805180820190915260118152704175646974656420456d697373696f6e7360781b6020820152610963565b600181015460ff166004141561185e57505060408051808201909152600e81526d21b0b93137b7102a3930b1b5b2b960911b6020820152610963565b5050604080518082019091526014815273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6020820152610963565b50919050565b6001600160a01b03808516600090815260cf6020908152604080832093871683529290529081205485908590859085906118d79063ffffffff1660016152fd565b6040516020016118eb959493929190614ce4565b604051602081830303815290604052805190602001209050949350505050565b600080600061191a85856108a2565b60405163a0d975a760e01b81526001600160a01b038716600482015260248101869052909150600090309063a0d975a79060440160206040518083038186803b15801561196657600080fd5b505afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190614b5f565b919350909150505b9250929050565b6119b56124b8565b6119c7338a8a8a8a8a8a8a8a8a612aa8565b505050505050505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611a0882612558565b611a705760405162461bcd60e51b815260206004820152603360248201527f434c4d383a3a676574546f6b656e52657469726564416d6f756e743a20746f6b604482015272195b925908191bd95cc81b9bdd08195e1a5cdd606a1b606482015260840161090a565b50600090815260cd602090815260408083206001600160a01b03949094168352929052205490565b611185338383613235565b611aae6000336119d2565b611aca5760405162461bcd60e51b815260040161090a90614ef1565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b03821614611b0457611b046124b8565b60c95460ff1615611b9c57611b1a6000336119d2565b611b9c5760405162461bcd60e51b815260206004820152604760248201527f434c4d383a3a756e7265676973746572496e647573747279286c696d6974656460448201527f293a206f6e6c792061646d696e2063616e20756e726567697374657220696e646064820152667573747269657360c81b608482015260a40161090a565b611bb4600080516020615516833981519152826121cd565b6040516001600160a01b038216907fe2fd90a75c6850a2aeaad25eb28a5176ac5166c6e3e6dfe0284e34a628e90ef290600090a250565b611c74604051806101a0016040528060008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001600081525090565b600082815260cc602090815260409182902082516101a08101845281548152600182015460ff8116938201939093526001600160a01b036101009384900481169482019490945260028201548416606082015260038201549093166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810180549192840191611d069061538b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d329061538b565b8015611d7f5780601f10611d5457610100808354040283529160200191611d7f565b820191906000526020600020905b815481529060010190602001808311611d6257829003601f168201915b50505050508152602001600882018054611d989061538b565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc49061538b565b8015611e115780601f10611de657610100808354040283529160200191611e11565b820191906000526020600020905b815481529060010190602001808311611df457829003601f168201915b50505050508152602001600982018054611e2a9061538b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e569061538b565b8015611ea35780601f10611e7857610100808354040283529160200191611ea3565b820191906000526020600020905b815481529060010190602001808311611e8657829003601f168201915b50505050508152602001600a8201548152602001600b820154815250509050919050565b600054610100900460ff16611ee25760005460ff1615611ee6565b303b155b611f495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161090a565b600054610100900460ff16158015611f6b576000805461ffff19166101011790555b611f8360405180602001604052806000815250613316565b611fa9600080516020615576833981519152600080516020615596833981519152613349565b611fb460008361254e565b611fcc6000805160206155968339815191528361254e565b611fe46000805160206155d68339815191528361254e565b611ffc6000805160206155368339815191528361254e565b6120146000805160206155f68339815191528361254e565b61202c6000805160206155568339815191528361254e565b6120446000805160206155168339815191528361254e565b60c9805460ca80546001600160a01b03191690556001600160a81b0319166101006001600160a01b0385160260ff19161790558015611185576000805461ff00191690555050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526121096000846119d2565b151581526121256000805160206155d6833981519152846119d2565b15156040820152612144600080516020615536833981519152846119d2565b151560608201526121636000805160206155f6833981519152846119d2565b15156080820152612182600080516020615516833981519152846119d2565b151560a08201526121a1600080516020615576833981519152846119d2565b151560208201526121c0600080516020615556833981519152846119d2565b151560c082015292915050565b6000828152609760205260409020600101546121e98133610ecd565b610af08383612a41565b6121fe6000336119d2565b61221a5760405162461bcd60e51b815260040161090a90614ef1565b60c9805460ff1916911515919091179055565b6122386000336119d2565b6122545760405162461bcd60e51b815260040161090a90614ef1565b61225d81612a03565b6122c45760405162461bcd60e51b815260206004820152603260248201527f434c4d383a3a756e72656769737465724465616c65723a20746f6b656e54797060448201527119525908191bd95cc81b9bdd08195e1a5cdd60721b606482015260840161090a565b8060ff16600114156122ed576122e86000805160206155d6833981519152836121cd565b612359565b8060ff1660021415612311576122e8600080516020615536833981519152836121cd565b8060ff1660031415612335576122e86000805160206155f6833981519152836121cd565b8060ff166004141561235957612359600080516020615556833981519152836121cd565b6123628261164d565b61237e5761237e600080516020615596833981519152836121cd565b6040516001600160a01b038316907f98552ded770f1d05a505572f3387c108dbc6b566ea3d49f83cff3d1f1c72a04290600090a25050565b6001600160a01b0385163314806123d257506123d2853361078d565b6124305760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161090a565b610eae8585858585613394565b6000612457600080516020615596833981519152836119d2565b806124755750612475600080516020615576833981519152836119d2565b806116c157506116c1600080516020615516833981519152836119d2565b60006001600160e01b03198216637965db0b60e01b14806109605750610960826134b5565b6124d0600080516020615596833981519152336119d2565b806124ee57506124ee600080516020615516833981519152336119d2565b61254c5760405162461bcd60e51b815260206004820152602960248201527f434c4d383a3a6f6e6c794465616c65723a206d73672e73656e646572206e6f746044820152681030903232b0b632b960b91b606482015260840161090a565b565b611185828261297d565b60008161256460cb5490565b106116ce57506001610963565b6001600160a01b0384166125d15760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161090a565b336125f1816000876125e288613505565b6125eb88613505565b8761355e565b60008481526065602090815260408083206001600160a01b0389168452909152812080548592906126239084906152e5565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610eae81600087878787613a4e565b61268e838383613bb9565b600082815260cc60205260409020600b01546126aa9082613d36565b600083815260cc60209081526040808320600b019390935560cd81528282206001600160a01b0387168352905220546126e39082613d36565b600092835260cd602090815260408085206001600160a01b039096168552949052929091209190915550565b81518351146127715760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161090a565b6001600160a01b0384166127975760405162461bcd60e51b815260040161090a90614fa6565b336127a681878787878761355e565b60005b84518110156128ab5760008582815181106127d457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061280057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156128515760405162461bcd60e51b815260040161090a90614feb565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906128909084906152e5565b92505081905550505050806128a4906153ec565b90506127a9565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516128fb929190614e68565b60405180910390a4612911818787878787613d49565b505050505050565b61292382826119d2565b6111855761293b816001600160a01b03166014613e13565b612946836020613e13565b604051602001612957929190614d3d565b60408051601f198184030181529082905262461bcd60e51b825261090a91600401614e96565b61298782826119d2565b6111855760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556129bf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000808260ff161180156116c1575060048260ff16116116ce57506001610963565b6000806000612a348585613ff4565b9150915061154681614061565b612a4b82826119d2565b156111855760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612ab187612a03565b612b095760405162461bcd60e51b8152602060048201526024808201527f434c4d383a3a5f69737375653a20746f6b656e54797065496420697320696e76604482015263185b1a5960e21b606482015260840161090a565b60c95460ff1615612d50578660ff1660011480612b2957508660ff166002145b15612cb35760ca546001600160a01b03163314612b9f5760405162461bcd60e51b815260206004820152602e60248201527f434c4d383a3a5f6973737565286c696d69746564293a206d73672e73656e646560448201526d72206e6f742074696d656c6f636b60901b606482015260840161090a565b612baa6000896119d2565b612c065760405162461bcd60e51b815260206004820152602760248201527f434c4d383a3a5f6973737565286c696d69746564293a20697373756565206e6f6044820152663a1030b236b4b760c91b606482015260840161090a565b612c1e6000805160206155d68339815191528b6119d2565b80612c3c5750612c3c6000805160206155368339815191528b6119d2565b612cae5760405162461bcd60e51b815260206004820152603760248201527f434c4d383a3a5f6973737565286c696d69746564293a2070726f706f7365722060448201527f6e6f7420612072656769737465726564206465616c6572000000000000000000606482015260840161090a565b612d4b565b8660ff1660031415612d4b57612cd76000805160206155f68339815191528b6119d2565b612d4b576040805162461bcd60e51b81526020600482015260248101919091527f434c4d383a3a5f6973737565286c696d69746564293a20697373756572206e6f60448201527f742061207265676973746572656420656d697373696f6e732061756469746f72606482015260840161090a565b612ec5565b8660ff1660011415612dc757612d746000805160206155d68339815191528b6119d2565b612d4b5760405162461bcd60e51b815260206004820152603060248201526000805160206155b683398151915260448201526f3a32b932b2102922a1903232b0b632b960811b606482015260840161090a565b8660ff1660021415612e4157612deb6000805160206155368339815191528b6119d2565b612d4b5760405162461bcd60e51b815260206004820152603360248201526000805160206155b68339815191526044820152723a32b932b21037b33339b2ba103232b0b632b960691b606482015260840161090a565b8660ff1660031415612ec557612e656000805160206155f68339815191528b6119d2565b612ec55760405162461bcd60e51b815260206004820152603760248201526000805160206155b683398151915260448201527f746572656420656d697373696f6e732061756469746f72000000000000000000606482015260840161090a565b8660ff1660041415612fc257612ee96000805160206155168339815191528b6119d2565b612f3a5760405162461bcd60e51b815260206004820152602e60248201526000805160206155b683398151915260448201526d746572656420696e64757374727960901b606482015260840161090a565b336001600160a01b038b1614612fc25760405162461bcd60e51b815260206004820152604160248201527f434c4d383a3a5f69737375653a207265676973746572656420696e647573747260448201527f792063616e206f6e6c7920697373756520636172626f6e20746f20697473656c6064820152603360f91b608482015260a40161090a565b612fd060cb80546001019055565b600060cc6000612fdf60cb5490565b81526020019081526020016000209050612ff860cb5490565b81556001810180546001600160a01b03808e16610100026001600160a81b031990921660ff8c1617919091179091556002820180548c83166001600160a01b031991821617909155600383018054928c16929091169190911790556004810186905560058101859055426006820155835161307c90600783019060208701906143c9565b50825161309290600883019060208601906143c9565b5081516130a890600983019060208501906143c9565b50600a81018790556000600b8201556130da896130c460cb5490565b8960405180602001604052806000815250612571565b8760ff16600314156131015760038101548154613101916001600160a01b03169089612683565b8060030160009054906101000a90046001600160a01b03166001600160a01b03168160020160009054906101000a90046001600160a01b03166001600160a01b03168260010160019054906101000a90046001600160a01b03166001600160a01b03167fb8ad5d21459c6ed7d4702603e83b1d759ee9d681fe8f39ef2a1e9d9ba23771df8a60cd60008760000154815260200190815260200160002060008760030160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205486600001548760010160009054906101000a900460ff16886004015489600501548a600601548b6007018c6008018d6009016040516132209a99989796959493929190615246565b60405180910390a45050505050505050505050565b816001600160a01b0316836001600160a01b031614156132a95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161090a565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff1661333d5760405162461bcd60e51b815260040161090a90615092565b61334681614264565b50565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6001600160a01b0384166133ba5760405162461bcd60e51b815260040161090a90614fa6565b336133ca8187876125e288613505565b60008481526065602090815260408083206001600160a01b038a1684529091529020548381101561340d5760405162461bcd60e51b815260040161090a90614feb565b60008581526065602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061344c9084906152e5565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46134ac828888888888613a4e565b50505050505050565b60006001600160e01b03198216636cdb3d1360e11b14806134e657506001600160e01b031982166303a24d0760e21b145b8061096057506301ffc9a760e01b6001600160e01b0319831614610960565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061354d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b84846001600160a01b03821615613594576135788261243d565b6135945760405162461bcd60e51b815260040161090a90615035565b6001600160a01b038116156135c8576135ac8161243d565b6135c85760405162461bcd60e51b815260040161090a90614f3a565b856001600160a01b0316876001600160a01b0316141561365b5760405162461bcd60e51b815260206004820152604260248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a2073656e6460448201527f657220616e642072656365697665722063616e6e6f74206265207468652073616064820152616d6560f01b608482015260a40161090a565b6000805b865181101561394757600060cc600089848151811061368e57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020905060c960009054906101000a900460ff161561385d576001600160a01b0389166136cf5750613935565b60018082015460ff1614806136eb5750600181015460ff166002145b1561379d5760ca546001600160a01b038c811691161480613712575061371260008c6119d2565b6137985760405162461bcd60e51b815260206004820152604b60248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e73666572286c696d697460448201527f6564293a206f6e6c792061646d696e20616e642044414f2063616e207472616e60648201526a7366657220746f6b656e7360a81b608482015260a40161090a565b61385d565b600181015460ff166003141561385d576137c56000805160206155f68339815191528c6119d2565b61385d5760405162461bcd60e51b815260206004820152605860248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e73666572286c696d697460448201527f6564293a206f6e6c7920656d697373696f6e732061756469746f72732063616e60648201527f206973737565206175646974656420656d697373696f6e730000000000000000608482015260a40161090a565b600181015460ff16600414801561387c57506001600160a01b03891615155b801561389057506001600160a01b038a1615155b15613933576000925061390d8783815181106138bc57634e487b7160e01b600052603260045260246000fd5b602002602001015160ce60008460000154815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054613d3690919063ffffffff16565b8154600090815260ce602090815260408083206001600160a01b038f1684529091529020555b505b8061393f816153ec565b91505061365f565b5080156119c757600061395c89898989611896565b905061396981868a61106e565b6139ea5760405162461bcd60e51b815260206004820152604660248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a207265636560448201527f69766572277320617070726f76616c207369676e6174757265206973206e6f74606482015265081d985b1a5960d21b608482015260a40161090a565b6001600160a01b03808a16600090815260cf60209081526040808320938c168352929052908120805463ffffffff1691613a2383615407565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050505050505050505050565b6001600160a01b0384163b156129115760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613a929089908990889088908890600401614e10565b602060405180830381600087803b158015613aac57600080fd5b505af1925050508015613adc575060408051601f3d908101601f19168201909252613ad991810190614b43565b60015b613b8957613ae8615457565b806308c379a01415613b225750613afd61546e565b80613b085750613b24565b8060405162461bcd60e51b815260040161090a9190614e96565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161090a565b6001600160e01b0319811663f23a6e6160e01b146134ac5760405162461bcd60e51b815260040161090a90614ea9565b6001600160a01b038316613c1b5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161090a565b33613c4a81856000613c2c87613505565b613c3587613505565b6040518060200160405280600081525061355e565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015613cc95760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161090a565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000613d4282846152e5565b9392505050565b6001600160a01b0384163b156129115760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190613d8d9089908990889088908890600401614db2565b602060405180830381600087803b158015613da757600080fd5b505af1925050508015613dd7575060408051601f3d908101601f19168201909252613dd491810190614b43565b60015b613de357613ae8615457565b6001600160e01b0319811663bc197c8160e01b146134ac5760405162461bcd60e51b815260040161090a90614ea9565b60606000613e22836002615325565b613e2d9060026152e5565b6001600160401b03811115613e5257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613e7c576020820181803683370190505b509050600360fc1b81600081518110613ea557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613ee257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613f06846002615325565b613f119060016152e5565b90505b6001811115613fa5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613f5357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613f7757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613f9e81615374565b9050613f14565b508315613d425760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161090a565b60008082516041141561402b5760208301516040840151606085015160001a61401f87828585614294565b945094505050506119a6565b825160401415614055576020830151604084015161404a868383614381565b9350935050506119a6565b506000905060026119a6565b600081600481111561408357634e487b7160e01b600052602160045260246000fd5b141561408e57613346565b60018160048111156140b057634e487b7160e01b600052602160045260246000fd5b14156140fe5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161090a565b600281600481111561412057634e487b7160e01b600052602160045260246000fd5b141561416e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161090a565b600381600481111561419057634e487b7160e01b600052602160045260246000fd5b14156141e95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161090a565b600481600481111561420b57634e487b7160e01b600052602160045260246000fd5b14156133465760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161090a565b600054610100900460ff1661428b5760405162461bcd60e51b815260040161090a90615092565b613346816143ba565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156142cb5750600090506003614378565b8460ff16601b141580156142e357508460ff16601c14155b156142f45750600090506004614378565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614348573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661437157600060019250925050614378565b9150600090505b94509492505050565b6000806001600160ff1b0383168161439e60ff86901c601b6152e5565b90506143ac87828885614294565b935093505050935093915050565b80516111859060679060208401905b8280546143d59061538b565b90600052602060002090601f0160209004810192826143f7576000855561443d565b82601f1061441057805160ff191683800117855561443d565b8280016001018555821561443d579182015b8281111561443d578251825591602001919060010190614422565b5061444992915061444d565b5090565b5b80821115614449576000815560010161444e565b80356001600160a01b038116811461096357600080fd5b600082601f830112614489578081fd5b81356020614496826152c2565b6040516144a382826153c0565b8381528281019150858301600585901b870184018810156144c2578586fd5b855b858110156144e0578135845292840192908401906001016144c4565b5090979650505050505050565b8035801515811461096357600080fd5b600082601f83011261450d578081fd5b81356001600160401b0381111561452657614526615441565b60405161453d601f8301601f1916602001826153c0565b818152846020838601011115614551578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461096357600080fd5b60006020828403121561458d578081fd5b613d4282614462565b600080604083850312156145a8578081fd5b6145b183614462565b91506145bf60208401614462565b90509250929050565b6000806000806000806000806000806101408b8d0312156145e7578586fd5b6145f08b614462565b99506145fe60208c01614462565b985061460c60408c01614462565b975061461a60608c0161456b565b965060808b0135955060a08b0135945060c08b0135935060e08b01356001600160401b038082111561464a578485fd5b6146568e838f016144fd565b94506101008d013591508082111561466c578384fd5b6146788e838f016144fd565b93506101208d013591508082111561468e578283fd5b5061469b8d828e016144fd565b9150509295989b9194979a5092959850565b600080600080608085870312156146c2578384fd5b6146cb85614462565b93506146d960208601614462565b925060408501356001600160401b03808211156146f4578384fd5b61470088838901614479565b93506060870135915080821115614715578283fd5b5061472287828801614479565b91505092959194509250565b600080600080600060a08688031215614745578081fd5b61474e86614462565b945061475c60208701614462565b935060408601356001600160401b0380821115614777578283fd5b61478389838a01614479565b94506060880135915080821115614798578283fd5b6147a489838a01614479565b935060808801359150808211156147b9578283fd5b506147c6888289016144fd565b9150509295509295909350565b600080600080600060a086880312156147ea578283fd5b6147f386614462565b945061480160208701614462565b9350604086013592506060860135915060808601356001600160401b03811115614829578182fd5b6147c6888289016144fd565b60008060008060008060008060006101208a8c031215614853578283fd5b61485c8a614462565b985061486a60208b01614462565b975061487860408b0161456b565b965060608a0135955060808a0135945060a08a0135935060c08a01356001600160401b03808211156148a8578485fd5b6148b48d838e016144fd565b945060e08c01359150808211156148c9578384fd5b6148d58d838e016144fd565b93506101008c01359150808211156148eb578283fd5b506148f88c828d016144fd565b9150509295985092959850929598565b6000806040838503121561491a578182fd5b61492383614462565b91506145bf602084016144ed565b60008060408385031215614943578182fd5b61494c83614462565b946020939093013593505050565b60008060006060848603121561496e578081fd5b61497784614462565b95602085013595506040909401359392505050565b6000806040838503121561499e578182fd5b6149a783614462565b91506145bf6020840161456b565b600080604083850312156149c7578182fd5b82356001600160401b03808211156149dd578384fd5b818501915085601f8301126149f0578384fd5b813560206149fd826152c2565b604051614a0a82826153c0565b8381528281019150858301600585901b870184018b1015614a29578889fd5b8896505b84871015614a5257614a3e81614462565b835260019690960195918301918301614a2d565b5096505086013592505080821115614a68578283fd5b50614a7585828601614479565b9150509250929050565b600060208284031215614a90578081fd5b613d42826144ed565b600060208284031215614aaa578081fd5b5035919050565b60008060408385031215614ac3578182fd5b823591506145bf60208401614462565b600080600060608486031215614ae7578081fd5b8335925060208401356001600160401b03811115614b03578182fd5b614b0f868287016144fd565b925050614b1e60408501614462565b90509250925092565b600060208284031215614b38578081fd5b8135613d42816154ff565b600060208284031215614b54578081fd5b8151613d42816154ff565b600060208284031215614b70578081fd5b5051919050565b60008060408385031215614b89578182fd5b50508035926020909101359150565b60008060408385031215614baa578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015614bea57815187529582019590820190600101614bce565b509495945050505050565b80516000906020808401838315614bea57815187529582019590820190600101614bce565b60008151808452614c32816020860160208601615344565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680614c6057607f831692505b6020808410821415614c8057634e487b7160e01b86526022600452602486fd5b83885260208801828015614c9b5760018114614cac57614cd7565b60ff19871682528282019750614cd7565b60008981526020902060005b87811015614cd157815484820152908601908401614cb8565b83019850505b5050505050505092915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b16601484015250614d1e614d186028840187614bf5565b85614bf5565b60e09390931b6001600160e01b03191683525050600401949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614d75816017850160208801615344565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614da6816028840160208801615344565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090614dde90830186614bbb565b8281036060840152614df08186614bbb565b90508281036080840152614e048185614c1a565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614e4a90830184614c1a565b979650505050505050565b600060208252613d426020830184614bbb565b600060408252614e7b6040830185614bbb565b8281036020840152614e8d8185614bbb565b95945050505050565b600060208252613d426020830184614c1a565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206e6f74206040820152683a34329030b236b4b760b91b606082015260800190565b60208082526046908201527f434c4d383a3a636f6e73756d65724f724465616c65723a20726563697069656e60408201527f74206d75737420626520636f6e73756d65722c206465616c6572206f7220696e60608201526564757374727960d01b608082015260a00190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526039908201527f434c4d383a3a636f6e73756d65724f724465616c65723a2073656e646572206e60408201527f6f74206120636f6e73756d6572206f722061206465616c657200000000000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082528251602083015260208301516150fe604084018260ff169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101a0610120818186015261517f6101c0860184614c1a565b9250808601519050601f196101408187860301818801526151a08584614c1a565b9450808801519250506101608187860301818801526151bf8584614c1a565b908801516101808881019190915290970151929095019190915250929392505050565b600060e08201905082511515825260208301511515602083015260408301511515604083015260608301511515606083015260808301511515608083015260a0830151151560a083015260c083015161523f60c084018215159052565b5092915050565b60006101408c83528b60208401528a604084015260ff8a1660608401528860808401528760a08401528660c08401528060e084015261528781840187614c46565b905082810361010084015261529c8186614c46565b90508281036101208401526152b18185614c46565b9d9c50505050505050505050505050565b60006001600160401b038211156152db576152db615441565b5060051b60200190565b600082198211156152f8576152f861542b565b500190565b600063ffffffff80831681851680830382111561531c5761531c61542b565b01949350505050565b600081600019048311821515161561533f5761533f61542b565b500290565b60005b8381101561535f578181015183820152602001615347565b8381111561536e576000848401525b50505050565b6000816153835761538361542b565b506000190190565b600181811c9082168061539f57607f821691505b6020821081141561189057634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b03811182821017156153e5576153e5615441565b6040525050565b60006000198214156154005761540061542b565b5060010190565b600063ffffffff808316818114156154215761542161542b565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561164a57600481823e5160e01c90565b600060443d101561547e5761164a565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156154af57505050505061164a565b82850191508151818111156154c95750505050505061164a565b843d87010160208285010111156154e55750505050505061164a565b6154f4602082860101876153c0565b509094505050505090565b6001600160e01b03198116811461334657600080fdfe8305613dd3dbc3e0773e56336f52890c75fc1219c6ed3f363339b8ada04df289ede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5ff047c8eb56a4fb9b90290fc55ce546369985412ba2348c56342b7afbf87ec1a65e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76af8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf3434c4d383a3a5f69737375653a20697373756572206e6f7420612072656769732ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d860e97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12ca26469706673582212208733b0d1b11ca1f26415dd1df4cc97acd8da1ba418bd3699a33433fa7ff73e1464736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_consumerOrDealer(address)": {
        "details": "Returns `true` if hasRole of dealer, industry or consumer"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getIssuedBy(uint256)": {
        "details": "returns issuer of a given tokenId"
      },
      "getNumOfUniqueTokens()": {
        "details": "returns number of unique tokens"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoles(address)": {
        "details": "Helper function for returning tuple of bools of role membership",
        "params": {
          "account": "address to check roles"
        }
      },
      "getTokenDetails(uint256)": {
        "details": "returns the details of a given tokenId, omitting holders",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTokenRetiredAmount(address,uint256)": {
        "details": "returns the retired amount on a token",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTokenType(uint256)": {
        "details": "returns the token name for the given token as a string value",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTransferHash(address,address,uint256[],uint256[])": {
        "details": "Returns keccak256 hash of transaction request including next available nonce for transfer from -> to addresses"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isConsumerRegistered(address)": {
        "details": "returns true if Consumers's account is registered",
        "params": {
          "account": "address of the dealer"
        }
      },
      "isDealerRegistered(address)": {
        "details": "returns true if Dealer's account is registered",
        "params": {
          "account": "address of the dealer"
        }
      },
      "issue(address,address,uint8,uint256,uint256,uint256,string,string,string)": {
        "details": "External function to mint an amount of a token Only authorized dealer of associated token type can call this function",
        "params": {
          "quantity": "of the token to mint For ex: if one needs 100 full tokens, the caller should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)"
        }
      },
      "issueOnBehalf(address,address,address,uint8,uint256,uint256,uint256,string,string,string)": {
        "details": "Issue function for DAO (on limited mode) or admin to manually pass issuer Must be called from Timelock contract through a successful proposal or by admin if limited mode is set to false"
      },
      "mint(address,uint256,uint256)": {
        "details": "mints more of an existing token",
        "params": {
          "quantity": "amount to mint",
          "to": "reciepient of token",
          "tokenId": "token to mint more of"
        }
      },
      "registerConsumer(address)": {
        "details": "returns true if Consumer's account is registered for the given token",
        "params": {
          "account": "address of the consumer"
        }
      },
      "registerDealer(address,uint8)": {
        "details": "Only contract owner can register Dealers",
        "params": {
          "account": "address of the dealer to register"
        }
      },
      "registerIndustry(address)": {
        "details": "msg.sender can volunteer themselves as registered industry or other registered dealer can register Industry"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "retire(uint256,uint256)": {
        "details": "sets the token to the retire state to disable transfers, mints and burns",
        "params": {
          "tokenId": "token to set in pause state   Only contract owner can pause or resume tokens"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setLimitedMode(bool)": {
        "details": "turns off or on limited mode",
        "params": {
          "_limitedMode": "boolean value"
        }
      },
      "transfer(address,uint256,uint256)": {
        "details": "transfers the value to the 'to' account for tokenId",
        "params": {
          "to": "recipient address",
          "tokenId": "tokenId for the transfer",
          "value": "amount of transfer Transfer can start only when both parties are registered and the token is not paused Note: Token holders can arbitrarily call safeTransferFrom() without these checks The requires commented out below have been moved to _beforeTokenTransfer hook so that they are always applied to safeTransferFrom (or safeBatch...)      "
        }
      },
      "unregisterConsumer(address)": {
        "details": "Only contract owner can unregister Consumers TO-DO clarify the above - function allows any Dealer to unregister consumers. Why would we need to unregister consumers?",
        "params": {
          "account": "address to be unregistered"
        }
      },
      "unregisterDealer(address,uint8)": {
        "details": "Only contract owner can unregister Dealers",
        "params": {
          "account": "address to be unregistered"
        }
      },
      "unregisterIndustry(address)": {
        "details": "msg.sender can unvolunteer themselves as registered industry or other registered dealer can unregister Industry"
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "verifySignature(bytes32,bytes,address)": {
        "details": "Returns `true` if transfer has been approved by to address reconstruct transferHash and check that it matches the signature"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3107,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3835,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 504,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 510,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 512,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6657,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "limitedMode",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 6659,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "admin",
        "offset": 1,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 6661,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "timelock",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 6726,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_numOfUniqueTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)3114_storage"
      },
      {
        "astId": 6731,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_tokenDetails",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_struct(CarbonTokenDetails)6723_storage)"
      },
      {
        "astId": 6737,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_retiredBalances",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6743,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_transferredBalances",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6749,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "carbonTransferNonce",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint32))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint32)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(CarbonTokenDetails)6723_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NetEmissionsTokenNetwork.CarbonTokenDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonTokenDetails)6723_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CarbonTokenDetails)6723_storage": {
        "encoding": "inplace",
        "label": "struct NetEmissionsTokenNetwork.CarbonTokenDetails",
        "members": [
          {
            "astId": 6698,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6700,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "tokenTypeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 6702,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuedBy",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6704,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuedFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6706,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuedTo",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6708,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "fromDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6710,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "thruDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6712,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "dateCreated",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6714,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "metadata",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 6716,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "manifest",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 6718,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "description",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 6720,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "totalIssued",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6722,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "totalRetired",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Counter)3114_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3113,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}