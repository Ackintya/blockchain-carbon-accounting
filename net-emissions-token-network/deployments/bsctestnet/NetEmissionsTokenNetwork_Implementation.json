{
  "address": "0x28B6fB2903040F58F9442039426236E74f4c3DB7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredDealer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredIndustry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retiredBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dateCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "automaticRetireDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRetired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredDealer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredIndustry",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_CONSUMER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_EMISSIONS_AUDITOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_INDUSTRY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_INDUSTRY_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_OFFSET_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_REC_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "_consumerOrDealer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableAndRetired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableRetiredAndTransferred",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIssuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfUniqueTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRetiredBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "tokenTypeId",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thruDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateCreated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "automaticRetireDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "manifest",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalIssued",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRetired",
              "type": "uint256"
            }
          ],
          "internalType": "struct NetEmissionsTokenNetwork.CarbonTokenDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenRetiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTypeId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "getTransferHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTransferredBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        }
      ],
      "name": "isAuditor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isConsumerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isDealerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuee",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "automaticRetireDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "automaticRetireDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "issueOnBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitedMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "registerConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "registerDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "registerIndustry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_limitedMode",
          "type": "bool"
        }
      ],
      "name": "setLimitedMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unregisterConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "unregisterDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x77ec2999f8558901dfe82c79d03fb05ec01ab709b46c499238102eb0692a2716",
  "receipt": {
    "to": null,
    "from": "0x69c1Cb2C2fC06D17a1454864F7b206cf9599Bd14",
    "contractAddress": "0x28B6fB2903040F58F9442039426236E74f4c3DB7",
    "transactionIndex": 0,
    "gasUsed": "4725011",
    "logsBloom": "0x
    "blockHash": "0x9751759cead08e6754e7d9610a906f6051abb34b09b66287e6dbd2a594b114ed",
    "transactionHash": "0x77ec2999f8558901dfe82c79d03fb05ec01ab709b46c499238102eb0692a2716",
    "logs": [],
    "blockNumber": 17770681,
    "cumulativeGasUsed": "4725011",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fc9e1c8020119dc64ffe4724b62437be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredDealer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredIndustry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retiredBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredDealer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredIndustry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_CONSUMER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_EMISSIONS_AUDITOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_INDUSTRY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_INDUSTRY_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_OFFSET_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_REC_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"_consumerOrDealer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableAndRetired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableRetiredAndTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfUniqueTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRetiredBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRetired\",\"type\":\"uint256\"}],\"internalType\":\"struct NetEmissionsTokenNetwork.CarbonTokenDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRetiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTypeId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"getTransferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTransferredBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"isAuditor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isConsumerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDealerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"issueOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"registerDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerIndustry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitedMode\",\"type\":\"bool\"}],\"name\":\"setLimitedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unregisterConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"unregisterDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_consumerOrDealer(address)\":{\"details\":\"Returns `true` if hasRole of dealer, industry or consumer\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getIssuer(uint256)\":{\"details\":\"returns issuer of a given tokenId\"},\"getNumOfUniqueTokens()\":{\"details\":\"returns number of unique tokens\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoles(address)\":{\"details\":\"Helper function for returning tuple of bools of role membership\",\"params\":{\"account\":\"address to check roles\"}},\"getTokenDetails(uint256)\":{\"details\":\"returns the details of a given tokenId, omitting holders\",\"params\":{\"tokenId\":\"token to check\"}},\"getTokenRetiredAmount(address,uint256)\":{\"details\":\"returns the retired amount on a token\",\"params\":{\"tokenId\":\"token to check\"}},\"getTokenType(uint256)\":{\"details\":\"returns the token name for the given token as a string value\",\"params\":{\"tokenId\":\"token to check\"}},\"getTransferHash(address,address,uint256[],uint256[])\":{\"details\":\"Returns keccak256 hash of transaction request including next available nonce for transfer from -> to addresses\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isConsumerRegistered(address)\":{\"details\":\"returns true if Consumers's account is registered\",\"params\":{\"account\":\"address of the dealer\"}},\"isDealerRegistered(address)\":{\"details\":\"returns true if Dealer's account is registered\",\"params\":{\"account\":\"address of the dealer\"}},\"issue(address,uint8,uint256,uint256,uint256,uint256,string,string,string)\":{\"details\":\"External function to mint an amount of a token Only authorized dealer of associated token type can call this function\",\"params\":{\"quantity\":\"of the token to mint For ex: if one needs 100 full tokens, the caller should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\"}},\"issueOnBehalf(address,address,uint8,uint256,uint256,uint256,uint256,string,string,string)\":{\"details\":\"Issue function for DAO (on limited mode) or admin to manually pass issuer Must be called from Timelock contract through a successful proposal or by admin if limited mode is set to false\"},\"mint(address,uint256,uint256)\":{\"details\":\"mints more of an existing token\",\"params\":{\"quantity\":\"amount to mint\",\"to\":\"reciepient of token\",\"tokenId\":\"token to mint more of\"}},\"registerConsumer(address)\":{\"details\":\"returns true if Consumer's account is registered for the given token\",\"params\":{\"account\":\"address of the consumer\"}},\"registerDealer(address,uint8)\":{\"details\":\"Only contract owner can register Dealers\",\"params\":{\"account\":\"address of the dealer to register\"}},\"registerIndustry(address)\":{\"details\":\"msg.sender can volunteer themselves as registered industry or other registered dealer can register Industry\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"retire(uint256,uint256)\":{\"details\":\"sets the token to the retire state to disable transfers, mints and burns\",\"params\":{\"tokenId\":\"token to set in pause state   Only contract owner can pause or resume tokens\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setLimitedMode(bool)\":{\"details\":\"turns off or on limited mode\",\"params\":{\"_limitedMode\":\"boolean value\"}},\"transfer(address,uint256,uint256)\":{\"details\":\"transfers the value to the 'to' account for tokenId\",\"params\":{\"to\":\"recipient address\",\"tokenId\":\"tokenId for the transfer\",\"value\":\"amount of transfer Transfer can start only when both parties are registered and the token is not paused Note: Token holders can arbitrarily call safeTransferFrom() without these checks The requires commented out below have been moved to _beforeTokenTransfer hook so that they are always applied to safeTransferFrom (or safeBatch...)      \"}},\"unregisterConsumer(address)\":{\"details\":\"Only contract owner can unregister Consumers TO-DO clarify the above - function allows any Dealer to unregister consumers. Why would we need to unregister consumers?\",\"params\":{\"account\":\"address to be unregistered\"}},\"unregisterDealer(address,uint8)\":{\"details\":\"Only contract owner can unregister Dealers\",\"params\":{\"account\":\"address to be unregistered\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"verifySignature(bytes32,bytes,address)\":{\"details\":\"Returns `true` if transfer has been approved by to address reconstruct transferHash and check that it matches the signature\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NetEmissionsTokenNetwork.sol\":\"NetEmissionsTokenNetwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc8a2776bd48e62498418d7eede80bde0f00c6b5d67286abf49499d7f7b65b95c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x1762ac67d230279d7fb183567ce22bbe202054ce08f94224d8794f9d19546d51\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/NetEmissionsTokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\ncontract NetEmissionsTokenNetwork is Initializable, ERC1155Upgradeable, AccessControlUpgradeable {\\n\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using ECDSAUpgradeable for bytes32;\\n    using ECDSAUpgradeable for address;\\n\\n    bool public limitedMode;  // disables some features like arbitrary token transfers and issuing without proposals\\n    address public admin;     // address that has permission to register dealers, transfer in limitedMode, etc.\\n    address private timelock; // DAO contract that executes proposals to issue tokens after a successful vote\\n\\n    // Generic dealer role for registering/unregistering consumers\\n    bytes32 public constant REGISTERED_DEALER =\\n        keccak256(\\\"REGISTERED_DEALER\\\");\\n    // Token type specific roles\\n    bytes32 public constant REGISTERED_REC_DEALER =\\n        keccak256(\\\"REGISTERED_REC_DEALER\\\");\\n    bytes32 public constant REGISTERED_OFFSET_DEALER =\\n        keccak256(\\\"REGISTERED_OFFSET_DEALER\\\");\\n    bytes32 public constant REGISTERED_EMISSIONS_AUDITOR =\\n        keccak256(\\\"REGISTERED_EMISSIONS_AUDITOR\\\");\\n    // Consumer role\\n    bytes32 public constant REGISTERED_CONSUMER =\\n        keccak256(\\\"REGISTERED_CONSUMER\\\");\\n    // Industry role (voluntary/nominate)\\n    bytes32 public constant REGISTERED_INDUSTRY =\\n        keccak256(\\\"REGISTERED_INDUSTRY\\\");\\n    // Registered Industry Dealer (admin assignment)\\n    bytes32 public constant REGISTERED_INDUSTRY_DEALER =\\n        keccak256(\\\"REGISTERED_INDUSTRY_DEALER\\\");\\n\\n    /**\\n     * @dev Structure of all tokens issued in this contract\\n     * tokenId - Auto-increments whenever new tokens are issued\\n     * tokenTypeId - Corresponds to the three token types:\\n     *   1 => Renewable Energy Certificate\\n     *   2 => Carbon Emissions Offset\\n     *   3 => Audited Emissions\\n     *   4 => Carbon Tracker tokens (traded, burnt or stored fuel/feed stock)\\n     *   TO-DO define carbon tracker storage transactions (i.e. captured CO2 management) \\n     * issuer - Address of dealer issuing this token\\n     * issuee - Address of original issued recipient this token\\n     * fromDate - Unix timestamp\\n     * thruDate - Unix timestamp\\n     * dateCreated - Unix timestamp\\n     * automaticRetireDate - Unix timestamp\\n     */\\n    struct CarbonTokenDetails {\\n        uint256 tokenId;\\n        uint8 tokenTypeId;\\n        address issuer;\\n        address issuee;\\n        uint256 fromDate;\\n        uint256 thruDate;\\n        uint256 dateCreated;\\n        uint256 automaticRetireDate;\\n        string metadata;\\n        string manifest;\\n        string description;\\n        uint256 totalIssued;\\n        uint256 totalRetired;\\n    }\\n\\n\\n    // Counts number of unique token IDs (auto-incrementing)\\n    CountersUpgradeable.Counter private _numOfUniqueTokens;\\n\\n    // Token metadata and retired balances\\n    mapping(uint256 => CarbonTokenDetails) private _tokenDetails;\\n    mapping(uint256 => mapping(address => uint256)) private _retiredBalances;\\n    mapping(uint256 => mapping(address => uint256)) private _transferredBalances;\\n\\n    // Nonce for tokeTypeId 4 transfer from => to account\\n    mapping(address => mapping(address => uint32)) private carbonTransferNonce;\\n\\n    // Events\\n    event TokenCreated(\\n        uint256 availableBalance,\\n        uint256 retiredBalance,\\n        uint256 tokenId,\\n        uint8 tokenTypeId,\\n        address indexed issuer,\\n        address indexed issuee,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 dateCreated,\\n        uint256 automaticRetireDate,\\n        string metadata,\\n        string manifest,\\n        string description\\n    );\\n    event TokenRetired(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event RegisteredConsumer(address indexed account);\\n    event UnregisteredConsumer(address indexed account);\\n    event RegisteredDealer(address indexed account);\\n    event UnregisteredDealer(address indexed account);\\n    event RegisteredIndustry(address indexed account);\\n    event UnregisteredIndustry(address indexed account);\\n\\n    // Replaces constructor in OpenZeppelin Upgrades\\n    function initialize(address _admin) public initializer {\\n\\n        __ERC1155_init(\\\"\\\");\\n\\n        // Allow dealers to register consumers\\n        _setRoleAdmin(REGISTERED_CONSUMER, REGISTERED_DEALER);\\n\\n        // Set-up admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(REGISTERED_DEALER, _admin);\\n        _setupRole(REGISTERED_REC_DEALER, _admin);\\n        _setupRole(REGISTERED_OFFSET_DEALER, _admin);\\n        _setupRole(REGISTERED_EMISSIONS_AUDITOR, _admin);\\n        _setupRole(REGISTERED_INDUSTRY_DEALER, _admin);\\n        _setupRole(REGISTERED_INDUSTRY, _admin);\\n        admin = _admin;\\n\\n        // initialize\\n        timelock = address(0);\\n\\n        limitedMode = false;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::onlyAdmin: msg.sender not the admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier consumerOrDealer(address from,address to) {\\n        if(from!=address(0)){\\n            // if not minting require sender to be consumerOrDealer \\n            require(_consumerOrDealer(from),\\n                \\\"CLM8::consumerOrDealer: sender not a consumer or a dealer\\\");\\n        }\\n        if(to!=address(0)){\\n            // if not burning require receiver is consumerOrDealer \\n            require(_consumerOrDealer(to),\\n                \\\"CLM8::consumerOrDealer: recipient must be consumer, dealer or industry\\\"); \\n        }\\n        _;\\n    }\\n\\n    modifier onlyDealer() {\\n        _onlyDealer();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if hasRole of dealer\\n     */\\n    function _onlyDealer() internal view {\\n        /*\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, msg.sender);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, msg.sender);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender);\\n        bool isInDealer = hasRole(REGISTERED_INDUSTRY_DEALER, msg.sender);\\n        */\\n        require(\\n            //hasRole(REGISTERED_REC_DEALER, msg.sender) ||\\n            //hasRole(REGISTERED_OFFSET_DEALER, msg.sender) ||\\n            //hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender) ||\\n            //hasRole(REGISTERED_INDUSTRY_DEALER, msg.sender) ||\\n            // the below will achieve the same as the above\\n            hasRole(REGISTERED_DEALER,msg.sender) || \\n            // REGISTERED_INDSUTRY are considered dealers of carbon tokens\\n            // but have not be assigned REGISTERED_DEALER role by admin\\n            hasRole(REGISTERED_INDUSTRY,msg.sender),\\n            \\\"CLM8::onlyDealer: msg.sender not a dealer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns `true` if hasRole of dealer, industry or consumer\\n     */\\n    function _consumerOrDealer(address entity) public view returns (bool) {\\n        // check for one role and return if true if true\\n        // before checking the next to minimize gas\\n        if(hasRole(REGISTERED_DEALER, entity) ||\\n           hasRole(REGISTERED_CONSUMER, entity) ||\\n           hasRole(REGISTERED_INDUSTRY, entity) \\n        ) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if transfer has been approved by to address\\n     * reconstruct transferHash and check that it matches the signature\\n     */\\n    function verifySignature(\\n        bytes32 msgHash,\\n        bytes memory signature,\\n        address signer\\n    ) public pure returns (bool){   \\n        bytes32 ethSignedMessageHash = msgHash.toEthSignedMessageHash();\\n        return ethSignedMessageHash.recover(signature)==signer;\\n    }\\n    /**\\n     * @dev Returns keccak256 hash of transaction request\\n     * including next available nonce for transfer from -> to addresses\\n     */\\n    function getTransferHash(\\n        address _from, \\n        address _to, \\n        uint256[] memory _ids, \\n        uint256[] memory _amounts\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_from, _to, _ids, _amounts, carbonTransferNonce[_from][_to]+1));\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenId exists\\n     */\\n    function tokenExists(uint256 tokenId) private view returns (bool) {\\n        if (_numOfUniqueTokens.current() >= tokenId) return true;\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenTypeId is valid\\n     */\\n    function tokenTypeIdIsValid(uint8 tokenTypeId) pure private returns (bool) {\\n        if ((tokenTypeId > 0) && (tokenTypeId <= 4)) {\\n            return true;\\n        }\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns number of unique tokens\\n     */\\n    function getNumOfUniqueTokens() public view returns (uint256) {\\n        return _numOfUniqueTokens.current();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual \\n        override(ERC1155Upgradeable,AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev hook to prevent transfers from non-admin account if limitedMode is on\\n     * @param data signature of getTransferHash() for transfer of carbon token type (id=4)\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override\\n        consumerOrDealer(from,to)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        \\n        // TO-DO this could be set as a modifier ...\\n        require((from != to), \\\"CLM8::_beforeTokenTransfer: sender and receiver cannot be the same\\\");\\n        bool approveCarbon; // bool if we need to approve the transfer of carbon tokens\\n        for (uint i = 0; i < ids.length; i++) {\\n\\n            CarbonTokenDetails storage token = _tokenDetails[ids[i]];\\n            // disable most transfers if limitedMode is on\\n            if (limitedMode) {\\n\\n                // allow retiring/burning one's tokens\\n                if (to == address(0)) {\\n                    continue;\\n                }\\n\\n                // for tokenType 1 and 2, only the timelock and DAO can transfer/issue\\n                // for tokenType 3, only emissions auditors can transfer/issue\\n                // (and they are automatically retired right after)\\n                if (token.tokenTypeId == 1 || token.tokenTypeId == 2 ) {\\n                    require(\\n                        operator == timelock || hasRole(DEFAULT_ADMIN_ROLE, operator),\\n                        \\\"CLM8::_beforeTokenTransfer(limited): only admin and DAO can transfer tokens\\\"\\n                    );\\n                } else if (token.tokenTypeId == 3) {\\n                    require(\\n                        hasRole(REGISTERED_EMISSIONS_AUDITOR, operator),\\n                        \\\"CLM8::_beforeTokenTransfer(limited): only emissions auditors can issue audited emissions\\\"\\n                    );\\n                }\\n            }\\n            // for tokenType 4, any authorized operator can\\n            // issue (from == address(0)) or\\n            // burn/retire (to == address(0))\\n            // otherwise require receiver (to address) to have approved (signed) the transferHash\\n            if(token.tokenTypeId == 4 && to != address(0) && from != address(0)) {\\n                approveCarbon = false;//true;\\n                // TO-DO: drop internal approval of carbon transfers?\\n                // voluntary carbon tracker token can be sent to anyone to use in the C-NFT\\n                // they can be sent without approval inviting the receiver to track them to their NFT\\n                // accumulate total transferred balances (not minted or burnt)\\n                _transferredBalances[token.tokenId][from] =\\n                    _transferredBalances[token.tokenId][from].add(amounts[i]);\\n            }\\n\\n        }\\n        if(approveCarbon){\\n            bytes32 messageHash = getTransferHash(from,to,ids,amounts);\\n            require(\\n                verifySignature(messageHash, data, to),\\n                \\\"CLM8::_beforeTokenTransfer: receiver's approval signature is not valid\\\"\\n            );\\n            //increment the nonce once transaction has been confirmed\\n            carbonTransferNonce[from][to]++;\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev External function to mint an amount of a token\\n     * Only authorized dealer of associated token type can call this function\\n     * @param quantity of the token to mint For ex: if one needs 100 full tokens, the caller\\n     * should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\\n     */\\n    function issue(\\n        address issuee,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 automaticRetireDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public onlyDealer {\\n        return _issue(\\n            issuee,\\n            msg.sender,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            automaticRetireDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    /**\\n     * @dev Issue function for DAO (on limited mode) or admin to manually pass issuer\\n     * Must be called from Timelock contract through a successful proposal\\n     * or by admin if limited mode is set to false\\n     */\\n    function issueOnBehalf(\\n        address issuee,\\n        address issuer,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 automaticRetireDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public {\\n\\n        require(\\n            (msg.sender == timelock) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::issueOnBehalf: call must come from DAO or admin\\\"\\n        );\\n\\n        return _issue(\\n            issuee,\\n            issuer,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            automaticRetireDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    function _issue(\\n        address _issuee,\\n        address _issuer,\\n        uint8 _tokenTypeId,\\n        uint256 _quantity,\\n        uint256 _fromDate,\\n        uint256 _thruDate,\\n        uint256 _automaticRetireDate,\\n        string memory _metadata,\\n        string memory _manifest,\\n        string memory _description\\n    ) internal {\\n\\n        require(\\n            tokenTypeIdIsValid(_tokenTypeId),\\n            \\\"CLM8::_issue: tokenTypeId is invalid\\\"\\n        );\\n\\n        if (limitedMode) {\\n            if (_tokenTypeId == 1 || _tokenTypeId == 2 ) {\\n                require(\\n                    msg.sender == timelock,\\n                    \\\"CLM8::_issue(limited): msg.sender not timelock\\\"\\n                );\\n                require(\\n                    hasRole(DEFAULT_ADMIN_ROLE, _issuee),\\n                    \\\"CLM8::_issue(limited): issuee not admin\\\"\\n                );\\n                require(\\n                    hasRole(REGISTERED_REC_DEALER, _issuer) || hasRole(REGISTERED_OFFSET_DEALER, _issuer),\\n                    \\\"CLM8::_issue(limited): proposer not a registered dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 3) {\\n                require(\\n                    hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuer),\\n                    \\\"CLM8::_issue(limited): issuer not a registered emissions auditor\\\"\\n                );\\n            }\\n        } else {\\n            if (_tokenTypeId == 1) {\\n                require(\\n                    hasRole(REGISTERED_REC_DEALER, _issuer),\\n                    \\\"CLM8::_issue: issuer not a registered REC dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 2) {\\n                require(\\n                    hasRole(REGISTERED_OFFSET_DEALER, _issuer),\\n                    \\\"CLM8::_issue: issuer not a registered offset dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 3) {\\n                require(\\n                    hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuer),\\n                    \\\"CLM8::_issue: issuer not a registered emissions auditor\\\"\\n                );\\n            }\\n        }\\n        // TO-DO: Define limited mode for tokenTypeId 4?\\n        if (_tokenTypeId == 4) {\\n            require(\\n                hasRole(REGISTERED_INDUSTRY, _issuer),\\n                \\\"CLM8::_issue: issuer not a registered industry\\\"\\n            );\\n            require(\\n                msg.sender == _issuee,\\n                \\\"CLM8::_issue: registered industry can only issue carbon to itself\\\"\\n            );\\n        } \\n\\n        // increment token identifier\\n        _numOfUniqueTokens.increment();\\n\\n        // create token details\\n        CarbonTokenDetails storage tokenInfo = _tokenDetails[_numOfUniqueTokens.current()];\\n\\n        tokenInfo.tokenId = _numOfUniqueTokens.current();\\n        tokenInfo.tokenTypeId = _tokenTypeId;\\n        tokenInfo.issuee = _issuee;\\n        tokenInfo.issuer = _issuer;\\n        tokenInfo.fromDate = _fromDate;\\n        tokenInfo.thruDate = _thruDate;\\n        tokenInfo.automaticRetireDate = _automaticRetireDate;\\n        tokenInfo.dateCreated = block.timestamp;\\n        tokenInfo.metadata = _metadata;\\n        tokenInfo.manifest = _manifest;\\n        tokenInfo.description = _description;\\n        tokenInfo.totalIssued = _quantity;\\n        tokenInfo.totalRetired = uint256(0);\\n\\n        super._mint(_issuee, _numOfUniqueTokens.current(), _quantity, \\\"\\\");\\n\\n        // retire audited emissions on mint\\n        if (_tokenTypeId == 3) {\\n            _retire(tokenInfo.issuee, tokenInfo.tokenId, _quantity);\\n        }\\n\\n        // emit event with all token details and balances\\n        emit TokenCreated(\\n            _quantity,\\n            _retiredBalances[tokenInfo.tokenId][tokenInfo.issuee],\\n            tokenInfo.tokenId,\\n            tokenInfo.tokenTypeId,\\n            tokenInfo.issuer,\\n            tokenInfo.issuee,\\n            tokenInfo.fromDate,\\n            tokenInfo.thruDate,\\n            tokenInfo.dateCreated,\\n            tokenInfo.automaticRetireDate,\\n            tokenInfo.metadata,\\n            tokenInfo.manifest,\\n            tokenInfo.description\\n        );\\n    }\\n\\n    /**\\n     * @dev mints more of an existing token\\n     * @param to reciepient of token\\n     * @param tokenId token to mint more of\\n     * @param quantity amount to mint\\n     */\\n     // To DO - this will increase _balances of to account\\n     // but will not update the totalIssued ?\\n    function mint(address to, uint256 tokenId, uint256 quantity)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::mint: tokenId does not exist\\\");\\n        require(!limitedMode, \\\"CLM8::mint: cannot mint new tokens in limited mode\\\");\\n        super._mint(to, tokenId, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev returns the token name for the given token as a string value\\n     * @param tokenId token to check\\n     */\\n    function getTokenType(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenType: tokenId does not exist\\\");\\n        CarbonTokenDetails storage token = _tokenDetails[tokenId];\\n\\n        if (token.tokenTypeId == 1) {\\n            return \\\"Renewable Energy Certificate\\\";\\n        } else if (token.tokenTypeId == 2) {\\n            return \\\"Carbon Emissions Offset\\\";\\n        } else if (token.tokenTypeId == 3) {\\n            return \\\"Audited Emissions\\\";\\n        } else if (token.tokenTypeId == 4) {\\n            return \\\"Carbon Tracker\\\";\\n        } else {\\n            return \\\"Token does not exist\\\";\\n        }\\n    }\\n    function getTokenTypeId(uint tokenId) external view returns(uint8){\\n        return _tokenDetails[tokenId].tokenTypeId;\\n    }\\n    function getRetiredBalances(uint tokenId, address account) \\n        external view returns(uint){\\n        return _retiredBalances[tokenId][account];\\n    }\\n    function getTransferredBalances(uint tokenId, address account) \\n        external view returns(uint){\\n        return _transferredBalances[tokenId][account];\\n    }\\n\\n    /**\\n     * @dev returns the retired amount on a token\\n     * @param tokenId token to check\\n     */\\n    function getTokenRetiredAmount(address account, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenRetiredAmount: tokenId does not exist\\\");\\n        uint256 amount = _retiredBalances[tokenId][account];\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev sets the token to the retire state to disable transfers, mints and burns\\n     * @param tokenId token to set in pause state\\n     *   Only contract owner can pause or resume tokens\\n     */\\n    function retire(\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external consumerOrDealer(msg.sender,address(0)) {\\n        require(tokenExists(tokenId), \\\"CLM8::retire: tokenId does not exist\\\");\\n        // TO-DO do we need this require statement? super._burn sub() will require this ...\\n        require( (amount <= super.balanceOf(msg.sender, tokenId)), \\\"CLM8::retire: not enough available balance to retire\\\" );\\n\\n        _retire(msg.sender, tokenId, amount);\\n        emit TokenRetired(\\n            msg.sender,\\n            tokenId,\\n            amount\\n        );\\n    }\\n\\n    function _retire(\\n        address _address,\\n        uint256 tokenId,\\n        uint256 _quantity\\n    ) internal {\\n        super._burn(_address, tokenId, _quantity);\\n        _tokenDetails[tokenId].totalRetired = _tokenDetails[tokenId].totalRetired.add(_quantity);\\n        _retiredBalances[tokenId][_address] = _retiredBalances[tokenId][_address].add(_quantity);\\n    }\\n\\n\\n    /**\\n     * @dev returns true if Dealer's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isDealerRegistered(address account) public view returns (bool) {\\n        if (hasRole(REGISTERED_REC_DEALER, account) ||\\n            hasRole(REGISTERED_OFFSET_DEALER, account) ||\\n            hasRole(REGISTERED_EMISSIONS_AUDITOR, account) ||\\n            hasRole(REGISTERED_INDUSTRY_DEALER, account) \\n        ) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isConsumerRegistered(address account) public view returns (bool) {\\n        return hasRole(REGISTERED_CONSUMER, account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's or Dealer's account is registered\\n     * @param account address of the consumer/dealer\\n     */\\n    function isRegisteredDealerOrConsumer(address account) private view returns (bool) {\\n        return (isDealerRegistered(account) || isConsumerRegistered(account));\\n    }\\n\\n    /**\\n     * @dev Helper function for returning tuple of bools of role membership\\n     * @param account address to check roles\\n     */\\n    function getRoles(address account) external view returns (bool, bool, bool, bool, bool, bool) {\\n        bool isAdmin = hasRole(DEFAULT_ADMIN_ROLE, account);\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, account);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, account);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        bool isIndustry = hasRole(REGISTERED_INDUSTRY, account);\\n        bool isConsumer = hasRole(REGISTERED_CONSUMER, account);\\n        return (isAdmin, isRecDealer, isCeoDealer, isAeDealer, isIndustry, isConsumer);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can register Dealers\\n     * @param account address of the dealer to register\\n     */\\n    function registerDealer(address account, uint8 tokenTypeId)\\n        public\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::registerDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            grantRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            grantRole(REGISTERED_OFFSET_DEALER, account);\\n        } else if (tokenTypeId == 3){\\n            grantRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        } else if (tokenTypeId == 4) {\\n            grantRole(REGISTERED_INDUSTRY, account);\\n            grantRole(REGISTERED_INDUSTRY_DEALER, account);\\n        }\\n        // Also grant generic dealer role for registering/unregistering dealer\\n        grantRole(REGISTERED_DEALER, account);\\n        emit RegisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev msg.sender can volunteer themselves as registered industry\\n     * or other registered dealer can register Industry\\n     */\\n    function registerIndustry(address account) external\\n    {\\n        if(msg.sender != account){\\n            // only dealer can register industry\\n            _onlyDealer();\\n        }\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::registerIndustry(limited): only admin can register industries\\\");\\n        }\\n        _setupRole(REGISTERED_INDUSTRY, account);\\n        emit RegisteredIndustry(account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumer's account is registered for the given token\\n     * @param account address of the consumer\\n     */\\n    function registerConsumer(address account) external onlyDealer {\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::registerConsumer(limited): only admin can register consumers\\\");\\n        }\\n        grantRole(REGISTERED_CONSUMER, account);\\n        emit RegisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Dealers\\n     * @param account address to be unregistered\\n     */\\n    function unregisterDealer(address account, uint8 tokenTypeId)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::unregisterDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            super.revokeRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            super.revokeRole(REGISTERED_OFFSET_DEALER, account);\\n        } else if (tokenTypeId == 3) {\\n            super.revokeRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        } else if (tokenTypeId == 4) {\\n            super.revokeRole(REGISTERED_INDUSTRY_DEALER, account);\\n        }\\n        // If no longer a dealer of any token type, remove generic dealer role\\n        if (!isDealerRegistered(account)) {\\n            revokeRole(REGISTERED_DEALER, account);\\n        }\\n\\n        emit UnregisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Consumers\\n     * TO-DO clarify the above - function allows any Dealer to unregister consumers.\\n     * Why would we need to unregister consumers?\\n     * @param account address to be unregistered\\n     */\\n    function unregisterConsumer(address account) external onlyDealer {\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::unregisterConsumer(limited): only admin can unregister consumers\\\");\\n        }\\n        super.revokeRole(REGISTERED_CONSUMER, account);\\n        emit UnregisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev transfers the value to the 'to' account for tokenId\\n     * @param to recipient address\\n     * @param tokenId tokenId for the transfer\\n     * @param value amount of transfer\\n     * Transfer can start only when both parties are registered and the token is not paused\\n     * Note: Token holders can arbitrarily call safeTransferFrom() without these checks\\n     * The requires commented out below have been moved to _beforeTokenTransfer hook\\n     * so that they are always applied to safeTransferFrom (or safeBatch...)      \\n     */\\n    function transfer(\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        require(tokenExists(tokenId), \\\"CLM8::transfer: tokenId does not exist\\\");\\n\\n        /*\\n        require((msg.sender != to), \\\"CLM8::transfer: sender and receiver cannot be the same\\\");\\n        receiver must be Consumer or Dealer or Industry\\n        require(\\n            hasRole(REGISTERED_CONSUMER, to) || \\n            hasRole(REGISTERED_DEALER, to) || \\n            hasRole(REGISTERED_INDUSTRY, to),\\n            \\\"CLM8::transfer: Recipient must be consumer, industry, or dealer\\\"\\n        ); */\\n        super.safeTransferFrom(msg.sender, to, tokenId, value, '0x00');\\n    }\\n\\n    function setTimelock(\\n        address _timelock\\n    ) external onlyAdmin {\\n        timelock = _timelock;\\n    }\\n\\n    function getAvailableAndRetired(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 available = super.balanceOf(account, tokenId);\\n        uint256 retired = this.getTokenRetiredAmount(account, tokenId);\\n        return (available, retired);\\n    }\\n    function getAvailableRetiredAndTransferred(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        uint256 available;\\n        uint256 retired;\\n        (available,retired) = this.getAvailableAndRetired(account, tokenId);\\n        uint256 transferred = _transferredBalances[tokenId][account];\\n        return (available, retired, transferred);\\n    }\\n\\n    /**\\n     * @dev returns issuer of a given tokenId\\n     */\\n    function getIssuer(uint256 tokenId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _tokenDetails[tokenId].issuer;\\n    }\\n\\n    /**\\n     * @dev returns the details of a given tokenId, omitting holders\\n     * @param tokenId token to check\\n     */\\n    function getTokenDetails(uint256 tokenId)\\n        external\\n        view\\n        returns (CarbonTokenDetails memory)\\n    {\\n        return _tokenDetails[tokenId];\\n    }\\n\\n    /**\\n     * @dev turns off or on limited mode\\n     * @param _limitedMode boolean value\\n     */\\n    function setLimitedMode(bool _limitedMode)\\n        external\\n        onlyAdmin\\n    {\\n        limitedMode = _limitedMode;\\n    }\\n\\n    function isAuditor(address auditor) view external returns (bool) {\\n        return hasRole(REGISTERED_EMISSIONS_AUDITOR, auditor);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x175746f0388ca50254dad5f80c5bf4f11abb71213f04c0eaf3ff232987d1f292\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061547e806100206000396000f3fe608060405234801561001057600080fd5b50600436106103265760003560e01c806378e5c592116101b8578063d547741f11610104578063f242432a116100a2578063fbdf37ea1161007c578063fbdf37ea14610850578063fc0bbce314610865578063fcba794814610878578063fd0c4a9a1461088d57610326565b8063f242432a146107ef578063f73e09e014610802578063f851a4401461083857610326565b8063ddc3e6eb116100de578063ddc3e6eb1461077a578063e2e564f21461078d578063e985e9c5146107a0578063f000be98146107dc57610326565b8063d547741f14610724578063d75cfd5814610737578063dba851b01461076d57610326565b8063a0d975a711610171578063bdacb3031161014b578063bdacb30314610692578063c1e03728146106a5578063c4d66de8146106c5578063ce6ccfaf146106d857610326565b8063a0d975a714610664578063a217fddf14610677578063a22cb4651461067f57610326565b806378e5c592146105a35780637aab1b88146105b85780637f157c9b146105cb578063907b6652146105f357806391d148541461060857806392089c461461061b57610326565b806331aa4b201161027757806349b90557116102305780635ddb368f1161020a5780635ddb368f1461056057806369f7ef441461056857806376aed2e11461057b57806376ce47551461058e57610326565b806349b905571461051a5780634e1273f41461052d57806353dbe9821461054d57610326565b806331aa4b201461048d57806331cd4199146104a057806333781a0e146104b357806336568abe146104c657806344b22fdd146104d9578063496dd90b146104ec57610326565b8063156e29f6116102e4578063248a9ca3116102be578063248a9ca314610431578063293a7f2e146104545780632eb2c2d6146104675780632f2ff15d1461047a57610326565b8063156e29f6146103f457806318a50d7e146104075780631ef68ef71461041c57610326565b8062fdd58e1461032b57806301ffc9a714610351578063033fd91914610374578063095bcdb6146103895780630e89341c1461039c578063127d5ad0146103bc575b600080fd5b61033e6103393660046146ff565b6108a0565b6040519081526020015b60405180910390f35b61036461035f3660046149c1565b610939565b6040519015158152602001610348565b610387610382366004614424565b610966565b005b610387610397366004614728565b610a61565b6103af6103aa366004614933565b610af3565b6040516103489190614d30565b6103e26103ca366004614933565b600090815260cc602052604090206001015460ff1690565b60405160ff9091168152602001610348565b610387610402366004614728565b610b87565b61033e6000805160206153c983398151915281565b61033e60008051602061536983398151915281565b61033e61043f366004614933565b60009081526097602052604090206001015490565b610387610462366004614a11565b610c97565b6103876104753660046144f1565b610e1c565b61038761048836600461494b565b610eb3565b61038761049b36600461475a565b610eda565b6103646104ae36600461496d565b61106c565b6103646104c1366004614424565b6110ef565b6103876104d436600461494b565b611109565b6103876104e7366004614424565b611187565b6104ff6104fa3660046146ff565b611271565b60408051938452602084019290925290820152606001610348565b610364610528366004614424565b61132a565b61054061053b36600461484f565b611344565b6040516103489190614cef565b61038761055b366004614424565b6114a5565b61033e611593565b610364610576366004614424565b6115a4565b6103af610589366004614933565b61162d565b61033e60008051602061542983398151915281565b61033e6000805160206153a983398151915281565b61033e6105c6366004614470565b6117ed565b6105de6105d93660046146ff565b611862565b60408051928352602083019190915201610348565b61033e60008051602061538983398151915281565b61036461061636600461494b565b611904565b61064c610629366004614933565b600090815260cc602052604090206001015461010090046001600160a01b031690565b6040516001600160a01b039091168152602001610348565b61033e6106723660046146ff565b61192f565b61033e600081565b61038761068d3660046146d6565b6119ca565b6103876106a0366004614424565b6119d5565b6106b86106b3366004614933565b611a1e565b6040516103489190614f77565b6103876106d3366004614424565b611cef565b6106eb6106e6366004614424565b611eb4565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c001610348565b61038761073236600461494b565b611f68565b61033e61074536600461494b565b600091825260cd602090815260408084206001600160a01b0393909316845291905290205490565b60c9546103649060ff1681565b610387610788366004614919565b611f8e565b61038761079b36600461475a565b611fc8565b6103646107ae36600461443e565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6103876107ea3660046145f8565b612151565b6103876107fd366004614596565b6121f8565b61033e61081036600461494b565b600091825260ce602090815260408084206001600160a01b0393909316845291905290205490565b60c95461064c9061010090046001600160a01b031681565b61033e60008051602061534983398151915281565b610364610873366004614424565b61227f565b61033e60008051602061540983398151915281565b61038761089b366004614783565b6122d5565b60006001600160a01b0383166109115760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216637965db0b60e01b148061095e575061095e826122fa565b90505b919050565b336001600160a01b0382161461097e5761097e61231f565b60c95460ff1615610a1257610994600033611904565b610a125760405162461bcd60e51b815260206004820152604360248201527f434c4d383a3a7265676973746572496e647573747279286c696d69746564293a60448201527f206f6e6c792061646d696e2063616e20726567697374657220696e647573747260648201526269657360e81b608482015260a401610908565b610a2a600080516020615349833981519152826123b5565b6040516001600160a01b038216907f1230fb0cdc77da02d53e840f6f60d5e7f68646d7d1ccdd890860e05533b62f5390600090a250565b610a6a826123bf565b610ac55760405162461bcd60e51b815260206004820152602660248201527f434c4d383a3a7472616e736665723a20746f6b656e496420646f6573206e6f7460448201526508195e1a5cdd60d21b6064820152608401610908565b610aee33848484604051806040016040528060048152602001630307830360e41b8152506121f8565b505050565b606060678054610b02906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2e906151be565b8015610b7b5780601f10610b5057610100808354040283529160200191610b7b565b820191906000526020600020905b815481529060010190602001808311610b5e57829003601f168201915b50505050509050919050565b610b92600033611904565b610bae5760405162461bcd60e51b815260040161090890614d8b565b610bb7826123bf565b610c0e5760405162461bcd60e51b815260206004820152602260248201527f434c4d383a3a6d696e743a20746f6b656e496420646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610908565b60c95460ff1615610c7c5760405162461bcd60e51b815260206004820152603260248201527f434c4d383a3a6d696e743a2063616e6e6f74206d696e74206e657720746f6b656044820152716e7320696e206c696d69746564206d6f646560701b6064820152608401610908565b610aee838383604051806020016040528060008152506123d8565b3360008115610cc557610ca98261227f565b610cc55760405162461bcd60e51b815260040161090890614ecf565b6001600160a01b03811615610cf957610cdd8161227f565b610cf95760405162461bcd60e51b815260040161090890614dd4565b610d02846123bf565b610d5a5760405162461bcd60e51b8152602060048201526024808201527f434c4d383a3a7265746972653a20746f6b656e496420646f6573206e6f7420656044820152631e1a5cdd60e21b6064820152608401610908565b610d6433856108a0565b831115610dd05760405162461bcd60e51b815260206004820152603460248201527f434c4d383a3a7265746972653a206e6f7420656e6f75676820617661696c61626044820152736c652062616c616e636520746f2072657469726560601b6064820152608401610908565b610ddb3385856124ea565b604080518581526020810185905233917f8f1b5ebb586d3d169e4ed07db9cd10ce0dd30c7b656171310eae7517c0b53cf9910160405180910390a250505050565b6001600160a01b038516331480610e385750610e3885336107ae565b610e9f5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610908565b610eac8585858585612576565b5050505050565b600082815260976020526040902060010154610ed081335b612780565b610aee83836127e4565b610ee5600033611904565b610f015760405162461bcd60e51b815260040161090890614d8b565b610f0a8161286a565b610f6f5760405162461bcd60e51b815260206004820152603060248201527f434c4d383a3a72656769737465724465616c65723a20746f6b656e547970654960448201526f1908191bd95cc81b9bdd08195e1a5cdd60821b6064820152608401610908565b8060ff1660011415610f9857610f9360008051602061540983398151915283610eb3565b61101c565b8060ff1660021415610fbc57610f9360008051602061536983398151915283610eb3565b8060ff1660031415610fe057610f9360008051602061542983398151915283610eb3565b8060ff166004141561101c5761100460008051602061534983398151915283610eb3565b61101c60008051602061538983398151915283610eb3565b6110346000805160206153c983398151915283610eb3565b6040516001600160a01b038316907fa8377deee15954185683d55effd369508b4935978c8cb2bab790bf04c570181490600090a25050565b6000806110c6856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b0383166110dc828661288c565b6001600160a01b03161495945050505050565b600061095e6000805160206153a983398151915283611904565b6001600160a01b03811633146111795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610908565b61118382826128a8565b5050565b61118f61231f565b60c95460ff1615611222576111a5600033611904565b6112225760405162461bcd60e51b815260206004820152604260248201527f434c4d383a3a7265676973746572436f6e73756d6572286c696d69746564293a60448201527f206f6e6c792061646d696e2063616e20726567697374657220636f6e73756d65606482015261727360f01b608482015260a401610908565b61123a6000805160206153a983398151915282610eb3565b6040516001600160a01b038216907f69a0adee259d26fe61f4776f7bea7f3a9737c7321256821b985f988545efd31990600090a250565b604051637f157c9b60e01b81526001600160a01b03831660048201526024810182905260009081908190819081903090637f157c9b90604401604080518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f99190614a32565b600097885260ce60209081526040808a206001600160a01b039b909b168a5299905297909620549597945050505050565b600061095e60008051602061542983398151915283611904565b606081518351146113a95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610908565b600083516001600160401b038111156113d257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113fb578160200160208202803683370190505b50905060005b845181101561149d5761146285828151811061142d57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061145557634e487b7160e01b600052603260045260246000fd5b60200260200101516108a0565b82828151811061148257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114968161521f565b9050611401565b509392505050565b6114ad61231f565b60c95460ff1615611544576114c3600033611904565b6115445760405162461bcd60e51b815260206004820152604660248201527f434c4d383a3a756e7265676973746572436f6e73756d6572286c696d6974656460448201527f293a206f6e6c792061646d696e2063616e20756e726567697374657220636f6e60648201526573756d65727360d01b608482015260a401610908565b61155c6000805160206153a983398151915282611f68565b6040516001600160a01b038216907f03a38088da75ee2d80f6c753f55f8fd17602ae17d8bd0ef44d5e1f28ab5af11f90600090a250565b600061159e60cb5490565b90505b90565b60006115be60008051602061540983398151915283611904565b806115dc57506115dc60008051602061536983398151915283611904565b806115fa57506115fa60008051602061542983398151915283611904565b80611618575061161860008051602061538983398151915283611904565b1561162557506001610961565b506000919050565b6060611638826123bf565b6116975760405162461bcd60e51b815260206004820152602a60248201527f434c4d383a3a676574546f6b656e547970653a20746f6b656e496420646f6573604482015269081b9bdd08195e1a5cdd60b21b6064820152608401610908565b600082815260cc6020526040902060018082015460ff1614156116ef57505060408051808201909152601c81527f52656e657761626c6520456e65726779204365727469666963617465000000006020820152610961565b600181015460ff166002141561173a57505060408051808201909152601781527f436172626f6e20456d697373696f6e73204f66667365740000000000000000006020820152610961565b600181015460ff16600314156117795750506040805180820190915260118152704175646974656420456d697373696f6e7360781b6020820152610961565b600181015460ff16600414156117b557505060408051808201909152600e81526d21b0b93137b7102a3930b1b5b2b960911b6020820152610961565b5050604080518082019091526014815273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6020820152610961565b50919050565b6001600160a01b03808516600090815260cf60209081526040808320938716835292905290812054859085908590859061182e9063ffffffff166001615130565b604051602001611842959493929190614b7e565b604051602081830303815290604052805190602001209050949350505050565b600080600061187185856108a0565b60405163a0d975a760e01b81526001600160a01b038716600482015260248101869052909150600090309063a0d975a79060440160206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f591906149f9565b919350909150505b9250929050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061193a826123bf565b6119a25760405162461bcd60e51b815260206004820152603360248201527f434c4d383a3a676574546f6b656e52657469726564416d6f756e743a20746f6b604482015272195b925908191bd95cc81b9bdd08195e1a5cdd606a1b6064820152608401610908565b50600090815260cd602090815260408083206001600160a01b03949094168352929052205490565b61118333838361290f565b6119e0600033611904565b6119fc5760405162461bcd60e51b815260040161090890614d8b565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b611a9e604051806101a0016040528060008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001600081525090565b600082815260cc602090815260409182902082516101a08101845281548152600182015460ff8116938201939093526001600160a01b03610100938490048116948201949094526002820154909316606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e08401526007810180549192840191611b2e906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5a906151be565b8015611ba75780601f10611b7c57610100808354040283529160200191611ba7565b820191906000526020600020905b815481529060010190602001808311611b8a57829003601f168201915b50505050508152602001600882018054611bc0906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec906151be565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600982018054611c52906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e906151be565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505050508152602001600a8201548152602001600b820154815250509050919050565b600054610100900460ff16611d0a5760005460ff1615611d0e565b303b155b611d715760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610908565b600054610100900460ff16158015611d93576000805461ffff19166101011790555b611dab604051806020016040528060008152506129f0565b611dd16000805160206153a98339815191526000805160206153c9833981519152612a33565b611ddc6000836123b5565b611df46000805160206153c9833981519152836123b5565b611e0c600080516020615409833981519152836123b5565b611e24600080516020615369833981519152836123b5565b611e3c600080516020615429833981519152836123b5565b611e54600080516020615389833981519152836123b5565b611e6c600080516020615349833981519152836123b5565b60c9805460ca80546001600160a01b03191690556001600160a81b0319166101006001600160a01b0385160260ff19161790558015611183576000805461ff00191690555050565b6000808080808080611ec68189611904565b90506000611ee26000805160206154098339815191528a611904565b90506000611efe6000805160206153698339815191528b611904565b90506000611f1a6000805160206154298339815191528c611904565b90506000611f366000805160206153498339815191528d611904565b90506000611f526000805160206153a98339815191528e611904565b959d949c50929a50909850965091945092505050565b600082815260976020526040902060010154611f848133610ecb565b610aee83836128a8565b611f99600033611904565b611fb55760405162461bcd60e51b815260040161090890614d8b565b60c9805460ff1916911515919091179055565b611fd3600033611904565b611fef5760405162461bcd60e51b815260040161090890614d8b565b611ff88161286a565b61205f5760405162461bcd60e51b815260206004820152603260248201527f434c4d383a3a756e72656769737465724465616c65723a20746f6b656e54797060448201527119525908191bd95cc81b9bdd08195e1a5cdd60721b6064820152608401610908565b8060ff16600114156120885761208360008051602061540983398151915283611f68565b6120f4565b8060ff16600214156120ac5761208360008051602061536983398151915283611f68565b8060ff16600314156120d05761208360008051602061542983398151915283611f68565b8060ff16600414156120f4576120f460008051602061538983398151915283611f68565b6120fd826115a4565b612119576121196000805160206153c983398151915283611f68565b6040516001600160a01b038316907f98552ded770f1d05a505572f3387c108dbc6b566ea3d49f83cff3d1f1c72a04290600090a25050565b60ca546001600160a01b03163314806121705750612170600033611904565b6121da5760405162461bcd60e51b815260206004820152603560248201527f434c4d383a3a69737375654f6e426568616c663a2063616c6c206d757374206360448201527437b6b290333937b6902220a79037b91030b236b4b760591b6064820152608401610908565b6121ec8a8a8a8a8a8a8a8a8a8a612a7e565b50505050505050505050565b6001600160a01b038516331480612214575061221485336107ae565b6122725760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610908565b610eac858585858561321f565b60006122996000805160206153c983398151915283611904565b806122b757506122b76000805160206153a983398151915283611904565b80611618575061161860008051602061534983398151915283611904565b6122dd61231f565b6122ef89338a8a8a8a8a8a8a8a612a7e565b505050505050505050565b60006001600160e01b03198216637965db0b60e01b148061095e575061095e82613340565b6123376000805160206153c983398151915233611904565b80612355575061235560008051602061534983398151915233611904565b6123b35760405162461bcd60e51b815260206004820152602960248201527f434c4d383a3a6f6e6c794465616c65723a206d73672e73656e646572206e6f746044820152681030903232b0b632b960b91b6064820152608401610908565b565b61118382826127e4565b6000816123cb60cb5490565b1061162557506001610961565b6001600160a01b0384166124385760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610908565b336124588160008761244988613390565b61245288613390565b876133e9565b60008481526065602090815260408083206001600160a01b03891684529091528120805485929061248a908490615118565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610eac816000878787876138d9565b6124f5838383613a44565b600082815260cc60205260409020600b01546125119082613bc1565b600083815260cc60209081526040808320600b019390935560cd81528282206001600160a01b03871683529052205461254a9082613bc1565b600092835260cd602090815260408085206001600160a01b039096168552949052929091209190915550565b81518351146125d85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610908565b6001600160a01b0384166125fe5760405162461bcd60e51b815260040161090890614e40565b3361260d8187878787876133e9565b60005b845181101561271257600085828151811061263b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061266757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156126b85760405162461bcd60e51b815260040161090890614e85565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906126f7908490615118565b925050819055505050508061270b9061521f565b9050612610565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612762929190614d02565b60405180910390a4612778818787878787613bd4565b505050505050565b61278a8282611904565b611183576127a2816001600160a01b03166014613c9e565b6127ad836020613c9e565b6040516020016127be929190614bd7565b60408051601f198184030181529082905262461bcd60e51b825261090891600401614d30565b6127ee8282611904565b6111835760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128263390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000808260ff16118015611618575060048260ff161161162557506001610961565b600080600061289b8585613e7f565b9150915061149d81613eec565b6128b28282611904565b156111835760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031614156129835760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610908565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff16612a175760405162461bcd60e51b815260040161090890614f2c565b612a1f6140ef565b612a276140ef565b612a3081614116565b50565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b612a878861286a565b612adf5760405162461bcd60e51b8152602060048201526024808201527f434c4d383a3a5f69737375653a20746f6b656e54797065496420697320696e76604482015263185b1a5960e21b6064820152608401610908565b60c95460ff1615612d26578760ff1660011480612aff57508760ff166002145b15612c895760ca546001600160a01b03163314612b755760405162461bcd60e51b815260206004820152602e60248201527f434c4d383a3a5f6973737565286c696d69746564293a206d73672e73656e646560448201526d72206e6f742074696d656c6f636b60901b6064820152608401610908565b612b8060008b611904565b612bdc5760405162461bcd60e51b815260206004820152602760248201527f434c4d383a3a5f6973737565286c696d69746564293a20697373756565206e6f6044820152663a1030b236b4b760c91b6064820152608401610908565b612bf46000805160206154098339815191528a611904565b80612c125750612c126000805160206153698339815191528a611904565b612c845760405162461bcd60e51b815260206004820152603760248201527f434c4d383a3a5f6973737565286c696d69746564293a2070726f706f7365722060448201527f6e6f7420612072656769737465726564206465616c65720000000000000000006064820152608401610908565b612d21565b8760ff1660031415612d2157612cad6000805160206154298339815191528a611904565b612d21576040805162461bcd60e51b81526020600482015260248101919091527f434c4d383a3a5f6973737565286c696d69746564293a20697373756572206e6f60448201527f742061207265676973746572656420656d697373696f6e732061756469746f726064820152608401610908565b612e9b565b8760ff1660011415612d9d57612d4a6000805160206154098339815191528a611904565b612d215760405162461bcd60e51b815260206004820152603060248201526000805160206153e983398151915260448201526f3a32b932b2102922a1903232b0b632b960811b6064820152608401610908565b8760ff1660021415612e1757612dc16000805160206153698339815191528a611904565b612d215760405162461bcd60e51b815260206004820152603360248201526000805160206153e98339815191526044820152723a32b932b21037b33339b2ba103232b0b632b960691b6064820152608401610908565b8760ff1660031415612e9b57612e3b6000805160206154298339815191528a611904565b612e9b5760405162461bcd60e51b815260206004820152603760248201526000805160206153e983398151915260448201527f746572656420656d697373696f6e732061756469746f720000000000000000006064820152608401610908565b8760ff1660041415612f9857612ebf6000805160206153498339815191528a611904565b612f105760405162461bcd60e51b815260206004820152602e60248201526000805160206153e983398151915260448201526d746572656420696e64757374727960901b6064820152608401610908565b336001600160a01b038b1614612f985760405162461bcd60e51b815260206004820152604160248201527f434c4d383a3a5f69737375653a207265676973746572656420696e647573747260448201527f792063616e206f6e6c7920697373756520636172626f6e20746f20697473656c6064820152603360f91b608482015260a401610908565b612fa660cb80546001019055565b600060cc6000612fb560cb5490565b81526020019081526020016000209050612fce60cb5490565b8160000181905550888160010160006101000a81548160ff021916908360ff1602179055508a8160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550898160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555086816003018190555085816004018190555084816006018190555042816005018190555083816007019080519060200190613081929190614271565b5082516130979060088301906020860190614271565b5081516130ad9060098301906020850190614271565b50600a81018890556000600b8201556130df8b6130c960cb5490565b8a604051806020016040528060008152506123d8565b8860ff16600314156131065760028101548154613106916001600160a01b0316908a6124ea565b8060020160009054906101000a90046001600160a01b03166001600160a01b03168160010160019054906101000a90046001600160a01b03166001600160a01b03167f99cc3eeb446560c9a2d2483bc5160735ec0fb1851aea3bde32e7a56c30c11da68a60cd60008660000154815260200190815260200160002060008660020160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205485600001548660010160009054906101000a900460ff168760030154886004015489600501548a600601548b6007018c6008018d60090160405161320a9b9a99989796959493929190615071565b60405180910390a35050505050505050505050565b6001600160a01b0384166132455760405162461bcd60e51b815260040161090890614e40565b3361325581878761244988613390565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156132985760405162461bcd60e51b815260040161090890614e85565b60008581526065602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906132d7908490615118565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46133378288888888886138d9565b50505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061337157506001600160e01b031982166303a24d0760e21b145b8061095e57506301ffc9a760e01b6001600160e01b031983161461095e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106133d857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b84846001600160a01b0382161561341f576134038261227f565b61341f5760405162461bcd60e51b815260040161090890614ecf565b6001600160a01b03811615613453576134378161227f565b6134535760405162461bcd60e51b815260040161090890614dd4565b856001600160a01b0316876001600160a01b031614156134e65760405162461bcd60e51b815260206004820152604260248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a2073656e6460448201527f657220616e642072656365697665722063616e6e6f74206265207468652073616064820152616d6560f01b608482015260a401610908565b6000805b86518110156137d257600060cc600089848151811061351957634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020905060c960009054906101000a900460ff16156136e8576001600160a01b03891661355a57506137c0565b60018082015460ff1614806135765750600181015460ff166002145b156136285760ca546001600160a01b038c81169116148061359d575061359d60008c611904565b6136235760405162461bcd60e51b815260206004820152604b60248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e73666572286c696d697460448201527f6564293a206f6e6c792061646d696e20616e642044414f2063616e207472616e60648201526a7366657220746f6b656e7360a81b608482015260a401610908565b6136e8565b600181015460ff16600314156136e8576136506000805160206154298339815191528c611904565b6136e85760405162461bcd60e51b815260206004820152605860248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e73666572286c696d697460448201527f6564293a206f6e6c7920656d697373696f6e732061756469746f72732063616e60648201527f206973737565206175646974656420656d697373696f6e730000000000000000608482015260a401610908565b600181015460ff16600414801561370757506001600160a01b03891615155b801561371b57506001600160a01b038a1615155b156137be576000925061379887838151811061374757634e487b7160e01b600052603260045260246000fd5b602002602001015160ce60008460000154815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054613bc190919063ffffffff16565b8154600090815260ce602090815260408083206001600160a01b038f1684529091529020555b505b806137ca8161521f565b9150506134ea565b5080156122ef5760006137e7898989896117ed565b90506137f481868a61106c565b6138755760405162461bcd60e51b815260206004820152604660248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a207265636560448201527f69766572277320617070726f76616c207369676e6174757265206973206e6f74606482015265081d985b1a5960d21b608482015260a401610908565b6001600160a01b03808a16600090815260cf60209081526040808320938c168352929052908120805463ffffffff16916138ae8361523a565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050505050505050505050565b6001600160a01b0384163b156127785760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061391d9089908990889088908890600401614caa565b602060405180830381600087803b15801561393757600080fd5b505af1925050508015613967575060408051601f3d908101601f19168201909252613964918101906149dd565b60015b613a145761397361528a565b806308c379a014156139ad57506139886152a1565b8061399357506139af565b8060405162461bcd60e51b81526004016109089190614d30565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610908565b6001600160e01b0319811663f23a6e6160e01b146133375760405162461bcd60e51b815260040161090890614d43565b6001600160a01b038316613aa65760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610908565b33613ad581856000613ab787613390565b613ac087613390565b604051806020016040528060008152506133e9565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015613b545760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610908565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000613bcd8284615118565b9392505050565b6001600160a01b0384163b156127785760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190613c189089908990889088908890600401614c4c565b602060405180830381600087803b158015613c3257600080fd5b505af1925050508015613c62575060408051601f3d908101601f19168201909252613c5f918101906149dd565b60015b613c6e5761397361528a565b6001600160e01b0319811663bc197c8160e01b146133375760405162461bcd60e51b815260040161090890614d43565b60606000613cad836002615158565b613cb8906002615118565b6001600160401b03811115613cdd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613d07576020820181803683370190505b509050600360fc1b81600081518110613d3057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613d6d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613d91846002615158565b613d9c906001615118565b90505b6001811115613e30576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613dde57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613e0257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613e29816151a7565b9050613d9f565b508315613bcd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610908565b600080825160411415613eb65760208301516040840151606085015160001a613eaa87828585614146565b945094505050506118fd565b825160401415613ee05760208301516040840151613ed5868383614233565b9350935050506118fd565b506000905060026118fd565b6000816004811115613f0e57634e487b7160e01b600052602160045260246000fd5b1415613f1957612a30565b6001816004811115613f3b57634e487b7160e01b600052602160045260246000fd5b1415613f895760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610908565b6002816004811115613fab57634e487b7160e01b600052602160045260246000fd5b1415613ff95760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610908565b600381600481111561401b57634e487b7160e01b600052602160045260246000fd5b14156140745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610908565b600481600481111561409657634e487b7160e01b600052602160045260246000fd5b1415612a305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610908565b600054610100900460ff166123b35760405162461bcd60e51b815260040161090890614f2c565b600054610100900460ff1661413d5760405162461bcd60e51b815260040161090890614f2c565b612a3081614262565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561417d575060009050600361422a565b8460ff16601b1415801561419557508460ff16601c14155b156141a6575060009050600461422a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156141fa573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166142235760006001925092505061422a565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161425487828885614146565b935093505050935093915050565b80516111839060679060208401905b82805461427d906151be565b90600052602060002090601f01602090048101928261429f57600085556142e5565b82601f106142b857805160ff19168380011785556142e5565b828001600101855582156142e5579182015b828111156142e55782518255916020019190600101906142ca565b506142f19291506142f5565b5090565b5b808211156142f157600081556001016142f6565b80356001600160a01b038116811461096157600080fd5b600082601f830112614331578081fd5b8135602061433e826150f5565b60405161434b82826151f3565b8381528281019150858301600585901b8701840188101561436a578586fd5b855b858110156143885781358452928401929084019060010161436c565b5090979650505050505050565b8035801515811461096157600080fd5b600082601f8301126143b5578081fd5b81356001600160401b038111156143ce576143ce615274565b6040516143e5601f8301601f1916602001826151f3565b8181528460208386010111156143f9578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461096157600080fd5b600060208284031215614435578081fd5b613bcd8261430a565b60008060408385031215614450578081fd5b6144598361430a565b91506144676020840161430a565b90509250929050565b60008060008060808587031215614485578182fd5b61448e8561430a565b935061449c6020860161430a565b925060408501356001600160401b03808211156144b7578384fd5b6144c388838901614321565b935060608701359150808211156144d8578283fd5b506144e587828801614321565b91505092959194509250565b600080600080600060a08688031215614508578081fd5b6145118661430a565b945061451f6020870161430a565b935060408601356001600160401b038082111561453a578283fd5b61454689838a01614321565b9450606088013591508082111561455b578283fd5b61456789838a01614321565b9350608088013591508082111561457c578283fd5b50614589888289016143a5565b9150509295509295909350565b600080600080600060a086880312156145ad578081fd5b6145b68661430a565b94506145c46020870161430a565b9350604086013592506060860135915060808601356001600160401b038111156145ec578182fd5b614589888289016143a5565b6000806000806000806000806000806101408b8d031215614617578485fd5b6146208b61430a565b995061462e60208c0161430a565b985061463c60408c01614413565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b01356001600160401b0380821115614673578485fd5b61467f8e838f016143a5565b94506101008d0135915080821115614695578384fd5b6146a18e838f016143a5565b93506101208d01359150808211156146b7578283fd5b506146c48d828e016143a5565b9150509295989b9194979a5092959850565b600080604083850312156146e8578182fd5b6146f18361430a565b915061446760208401614395565b60008060408385031215614711578182fd5b61471a8361430a565b946020939093013593505050565b60008060006060848603121561473c578081fd5b6147458461430a565b95602085013595506040909401359392505050565b6000806040838503121561476c578182fd5b6147758361430a565b915061446760208401614413565b60008060008060008060008060006101208a8c0312156147a1578283fd5b6147aa8a61430a565b98506147b860208b01614413565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a01356001600160401b03808211156147ef578485fd5b6147fb8d838e016143a5565b945060e08c0135915080821115614810578384fd5b61481c8d838e016143a5565b93506101008c0135915080821115614832578283fd5b5061483f8c828d016143a5565b9150509295985092959850929598565b60008060408385031215614861578182fd5b82356001600160401b0380821115614877578384fd5b818501915085601f83011261488a578384fd5b81356020614897826150f5565b6040516148a482826151f3565b8381528281019150858301600585901b870184018b10156148c3578889fd5b8896505b848710156148ec576148d88161430a565b8352600196909601959183019183016148c7565b5096505086013592505080821115614902578283fd5b5061490f85828601614321565b9150509250929050565b60006020828403121561492a578081fd5b613bcd82614395565b600060208284031215614944578081fd5b5035919050565b6000806040838503121561495d578182fd5b823591506144676020840161430a565b600080600060608486031215614981578081fd5b8335925060208401356001600160401b0381111561499d578182fd5b6149a9868287016143a5565b9250506149b86040850161430a565b90509250925092565b6000602082840312156149d2578081fd5b8135613bcd81615332565b6000602082840312156149ee578081fd5b8151613bcd81615332565b600060208284031215614a0a578081fd5b5051919050565b60008060408385031215614a23578182fd5b50508035926020909101359150565b60008060408385031215614a44578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015614a8457815187529582019590820190600101614a68565b509495945050505050565b80516000906020808401838315614a8457815187529582019590820190600101614a68565b60008151808452614acc816020860160208601615177565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680614afa57607f831692505b6020808410821415614b1a57634e487b7160e01b86526022600452602486fd5b83885260208801828015614b355760018114614b4657614b71565b60ff19871682528282019750614b71565b60008981526020902060005b87811015614b6b57815484820152908601908401614b52565b83019850505b5050505050505092915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b16601484015250614bb8614bb26028840187614a8f565b85614a8f565b60e09390931b6001600160e01b03191683525050600401949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614c0f816017850160208801615177565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614c40816028840160208801615177565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090614c7890830186614a55565b8281036060840152614c8a8186614a55565b90508281036080840152614c9e8185614ab4565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614ce490830184614ab4565b979650505050505050565b600060208252613bcd6020830184614a55565b600060408252614d156040830185614a55565b8281036020840152614d278185614a55565b95945050505050565b600060208252613bcd6020830184614ab4565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206e6f74206040820152683a34329030b236b4b760b91b606082015260800190565b60208082526046908201527f434c4d383a3a636f6e73756d65724f724465616c65723a20726563697069656e60408201527f74206d75737420626520636f6e73756d65722c206465616c6572206f7220696e60608201526564757374727960d01b608082015260a00190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526039908201527f434c4d383a3a636f6e73756d65724f724465616c65723a2073656e646572206e60408201527f6f74206120636f6e73756d6572206f722061206465616c657200000000000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208252825160208301526020830151614f98604084018260ff169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101a0610120818186015261500e6101c0860184614ab4565b9250808601519050601f1961014081878603018188015261502f8584614ab4565b94508088015192505061016081878603018188015261504e8584614ab4565b908801516101808881019190915290970151929095019190915250929392505050565b60006101608d83528c60208401528b604084015260ff8b1660608401528960808401528860a08401528760c08401528660e0840152806101008401526150b981840187614ae0565b90508281036101208401526150ce8186614ae0565b90508281036101408401526150e38185614ae0565b9e9d5050505050505050505050505050565b60006001600160401b0382111561510e5761510e615274565b5060051b60200190565b6000821982111561512b5761512b61525e565b500190565b600063ffffffff80831681851680830382111561514f5761514f61525e565b01949350505050565b60008160001904831182151516156151725761517261525e565b500290565b60005b8381101561519257818101518382015260200161517a565b838111156151a1576000848401525b50505050565b6000816151b6576151b661525e565b506000190190565b600181811c908216806151d257607f821691505b602082108114156117e757634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b038111828210171561521857615218615274565b6040525050565b60006000198214156152335761523361525e565b5060010190565b600063ffffffff808316818114156152545761525461525e565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156115a157600481823e5160e01c90565b600060443d10156152b1576115a1565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156152e25750505050506115a1565b82850191508151818111156152fc575050505050506115a1565b843d8701016020828501011115615318575050505050506115a1565b615327602082860101876151f3565b509094505050505090565b6001600160e01b031981168114612a3057600080fdfe8305613dd3dbc3e0773e56336f52890c75fc1219c6ed3f363339b8ada04df289ede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5ff047c8eb56a4fb9b90290fc55ce546369985412ba2348c56342b7afbf87ec1a65e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76af8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf3434c4d383a3a5f69737375653a20697373756572206e6f7420612072656769732ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d860e97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12ca2646970667358221220f28b6d5f51028c16faa79ed349492fa603be14809b9dcff1ffa0abad7b6278f464736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103265760003560e01c806378e5c592116101b8578063d547741f11610104578063f242432a116100a2578063fbdf37ea1161007c578063fbdf37ea14610850578063fc0bbce314610865578063fcba794814610878578063fd0c4a9a1461088d57610326565b8063f242432a146107ef578063f73e09e014610802578063f851a4401461083857610326565b8063ddc3e6eb116100de578063ddc3e6eb1461077a578063e2e564f21461078d578063e985e9c5146107a0578063f000be98146107dc57610326565b8063d547741f14610724578063d75cfd5814610737578063dba851b01461076d57610326565b8063a0d975a711610171578063bdacb3031161014b578063bdacb30314610692578063c1e03728146106a5578063c4d66de8146106c5578063ce6ccfaf146106d857610326565b8063a0d975a714610664578063a217fddf14610677578063a22cb4651461067f57610326565b806378e5c592146105a35780637aab1b88146105b85780637f157c9b146105cb578063907b6652146105f357806391d148541461060857806392089c461461061b57610326565b806331aa4b201161027757806349b90557116102305780635ddb368f1161020a5780635ddb368f1461056057806369f7ef441461056857806376aed2e11461057b57806376ce47551461058e57610326565b806349b905571461051a5780634e1273f41461052d57806353dbe9821461054d57610326565b806331aa4b201461048d57806331cd4199146104a057806333781a0e146104b357806336568abe146104c657806344b22fdd146104d9578063496dd90b146104ec57610326565b8063156e29f6116102e4578063248a9ca3116102be578063248a9ca314610431578063293a7f2e146104545780632eb2c2d6146104675780632f2ff15d1461047a57610326565b8063156e29f6146103f457806318a50d7e146104075780631ef68ef71461041c57610326565b8062fdd58e1461032b57806301ffc9a714610351578063033fd91914610374578063095bcdb6146103895780630e89341c1461039c578063127d5ad0146103bc575b600080fd5b61033e6103393660046146ff565b6108a0565b6040519081526020015b60405180910390f35b61036461035f3660046149c1565b610939565b6040519015158152602001610348565b610387610382366004614424565b610966565b005b610387610397366004614728565b610a61565b6103af6103aa366004614933565b610af3565b6040516103489190614d30565b6103e26103ca366004614933565b600090815260cc602052604090206001015460ff1690565b60405160ff9091168152602001610348565b610387610402366004614728565b610b87565b61033e6000805160206153c983398151915281565b61033e60008051602061536983398151915281565b61033e61043f366004614933565b60009081526097602052604090206001015490565b610387610462366004614a11565b610c97565b6103876104753660046144f1565b610e1c565b61038761048836600461494b565b610eb3565b61038761049b36600461475a565b610eda565b6103646104ae36600461496d565b61106c565b6103646104c1366004614424565b6110ef565b6103876104d436600461494b565b611109565b6103876104e7366004614424565b611187565b6104ff6104fa3660046146ff565b611271565b60408051938452602084019290925290820152606001610348565b610364610528366004614424565b61132a565b61054061053b36600461484f565b611344565b6040516103489190614cef565b61038761055b366004614424565b6114a5565b61033e611593565b610364610576366004614424565b6115a4565b6103af610589366004614933565b61162d565b61033e60008051602061542983398151915281565b61033e6000805160206153a983398151915281565b61033e6105c6366004614470565b6117ed565b6105de6105d93660046146ff565b611862565b60408051928352602083019190915201610348565b61033e60008051602061538983398151915281565b61036461061636600461494b565b611904565b61064c610629366004614933565b600090815260cc602052604090206001015461010090046001600160a01b031690565b6040516001600160a01b039091168152602001610348565b61033e6106723660046146ff565b61192f565b61033e600081565b61038761068d3660046146d6565b6119ca565b6103876106a0366004614424565b6119d5565b6106b86106b3366004614933565b611a1e565b6040516103489190614f77565b6103876106d3366004614424565b611cef565b6106eb6106e6366004614424565b611eb4565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c001610348565b61038761073236600461494b565b611f68565b61033e61074536600461494b565b600091825260cd602090815260408084206001600160a01b0393909316845291905290205490565b60c9546103649060ff1681565b610387610788366004614919565b611f8e565b61038761079b36600461475a565b611fc8565b6103646107ae36600461443e565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6103876107ea3660046145f8565b612151565b6103876107fd366004614596565b6121f8565b61033e61081036600461494b565b600091825260ce602090815260408084206001600160a01b0393909316845291905290205490565b60c95461064c9061010090046001600160a01b031681565b61033e60008051602061534983398151915281565b610364610873366004614424565b61227f565b61033e60008051602061540983398151915281565b61038761089b366004614783565b6122d5565b60006001600160a01b0383166109115760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216637965db0b60e01b148061095e575061095e826122fa565b90505b919050565b336001600160a01b0382161461097e5761097e61231f565b60c95460ff1615610a1257610994600033611904565b610a125760405162461bcd60e51b815260206004820152604360248201527f434c4d383a3a7265676973746572496e647573747279286c696d69746564293a60448201527f206f6e6c792061646d696e2063616e20726567697374657220696e647573747260648201526269657360e81b608482015260a401610908565b610a2a600080516020615349833981519152826123b5565b6040516001600160a01b038216907f1230fb0cdc77da02d53e840f6f60d5e7f68646d7d1ccdd890860e05533b62f5390600090a250565b610a6a826123bf565b610ac55760405162461bcd60e51b815260206004820152602660248201527f434c4d383a3a7472616e736665723a20746f6b656e496420646f6573206e6f7460448201526508195e1a5cdd60d21b6064820152608401610908565b610aee33848484604051806040016040528060048152602001630307830360e41b8152506121f8565b505050565b606060678054610b02906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2e906151be565b8015610b7b5780601f10610b5057610100808354040283529160200191610b7b565b820191906000526020600020905b815481529060010190602001808311610b5e57829003601f168201915b50505050509050919050565b610b92600033611904565b610bae5760405162461bcd60e51b815260040161090890614d8b565b610bb7826123bf565b610c0e5760405162461bcd60e51b815260206004820152602260248201527f434c4d383a3a6d696e743a20746f6b656e496420646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610908565b60c95460ff1615610c7c5760405162461bcd60e51b815260206004820152603260248201527f434c4d383a3a6d696e743a2063616e6e6f74206d696e74206e657720746f6b656044820152716e7320696e206c696d69746564206d6f646560701b6064820152608401610908565b610aee838383604051806020016040528060008152506123d8565b3360008115610cc557610ca98261227f565b610cc55760405162461bcd60e51b815260040161090890614ecf565b6001600160a01b03811615610cf957610cdd8161227f565b610cf95760405162461bcd60e51b815260040161090890614dd4565b610d02846123bf565b610d5a5760405162461bcd60e51b8152602060048201526024808201527f434c4d383a3a7265746972653a20746f6b656e496420646f6573206e6f7420656044820152631e1a5cdd60e21b6064820152608401610908565b610d6433856108a0565b831115610dd05760405162461bcd60e51b815260206004820152603460248201527f434c4d383a3a7265746972653a206e6f7420656e6f75676820617661696c61626044820152736c652062616c616e636520746f2072657469726560601b6064820152608401610908565b610ddb3385856124ea565b604080518581526020810185905233917f8f1b5ebb586d3d169e4ed07db9cd10ce0dd30c7b656171310eae7517c0b53cf9910160405180910390a250505050565b6001600160a01b038516331480610e385750610e3885336107ae565b610e9f5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610908565b610eac8585858585612576565b5050505050565b600082815260976020526040902060010154610ed081335b612780565b610aee83836127e4565b610ee5600033611904565b610f015760405162461bcd60e51b815260040161090890614d8b565b610f0a8161286a565b610f6f5760405162461bcd60e51b815260206004820152603060248201527f434c4d383a3a72656769737465724465616c65723a20746f6b656e547970654960448201526f1908191bd95cc81b9bdd08195e1a5cdd60821b6064820152608401610908565b8060ff1660011415610f9857610f9360008051602061540983398151915283610eb3565b61101c565b8060ff1660021415610fbc57610f9360008051602061536983398151915283610eb3565b8060ff1660031415610fe057610f9360008051602061542983398151915283610eb3565b8060ff166004141561101c5761100460008051602061534983398151915283610eb3565b61101c60008051602061538983398151915283610eb3565b6110346000805160206153c983398151915283610eb3565b6040516001600160a01b038316907fa8377deee15954185683d55effd369508b4935978c8cb2bab790bf04c570181490600090a25050565b6000806110c6856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b0383166110dc828661288c565b6001600160a01b03161495945050505050565b600061095e6000805160206153a983398151915283611904565b6001600160a01b03811633146111795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610908565b61118382826128a8565b5050565b61118f61231f565b60c95460ff1615611222576111a5600033611904565b6112225760405162461bcd60e51b815260206004820152604260248201527f434c4d383a3a7265676973746572436f6e73756d6572286c696d69746564293a60448201527f206f6e6c792061646d696e2063616e20726567697374657220636f6e73756d65606482015261727360f01b608482015260a401610908565b61123a6000805160206153a983398151915282610eb3565b6040516001600160a01b038216907f69a0adee259d26fe61f4776f7bea7f3a9737c7321256821b985f988545efd31990600090a250565b604051637f157c9b60e01b81526001600160a01b03831660048201526024810182905260009081908190819081903090637f157c9b90604401604080518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f99190614a32565b600097885260ce60209081526040808a206001600160a01b039b909b168a5299905297909620549597945050505050565b600061095e60008051602061542983398151915283611904565b606081518351146113a95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610908565b600083516001600160401b038111156113d257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113fb578160200160208202803683370190505b50905060005b845181101561149d5761146285828151811061142d57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061145557634e487b7160e01b600052603260045260246000fd5b60200260200101516108a0565b82828151811061148257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114968161521f565b9050611401565b509392505050565b6114ad61231f565b60c95460ff1615611544576114c3600033611904565b6115445760405162461bcd60e51b815260206004820152604660248201527f434c4d383a3a756e7265676973746572436f6e73756d6572286c696d6974656460448201527f293a206f6e6c792061646d696e2063616e20756e726567697374657220636f6e60648201526573756d65727360d01b608482015260a401610908565b61155c6000805160206153a983398151915282611f68565b6040516001600160a01b038216907f03a38088da75ee2d80f6c753f55f8fd17602ae17d8bd0ef44d5e1f28ab5af11f90600090a250565b600061159e60cb5490565b90505b90565b60006115be60008051602061540983398151915283611904565b806115dc57506115dc60008051602061536983398151915283611904565b806115fa57506115fa60008051602061542983398151915283611904565b80611618575061161860008051602061538983398151915283611904565b1561162557506001610961565b506000919050565b6060611638826123bf565b6116975760405162461bcd60e51b815260206004820152602a60248201527f434c4d383a3a676574546f6b656e547970653a20746f6b656e496420646f6573604482015269081b9bdd08195e1a5cdd60b21b6064820152608401610908565b600082815260cc6020526040902060018082015460ff1614156116ef57505060408051808201909152601c81527f52656e657761626c6520456e65726779204365727469666963617465000000006020820152610961565b600181015460ff166002141561173a57505060408051808201909152601781527f436172626f6e20456d697373696f6e73204f66667365740000000000000000006020820152610961565b600181015460ff16600314156117795750506040805180820190915260118152704175646974656420456d697373696f6e7360781b6020820152610961565b600181015460ff16600414156117b557505060408051808201909152600e81526d21b0b93137b7102a3930b1b5b2b960911b6020820152610961565b5050604080518082019091526014815273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6020820152610961565b50919050565b6001600160a01b03808516600090815260cf60209081526040808320938716835292905290812054859085908590859061182e9063ffffffff166001615130565b604051602001611842959493929190614b7e565b604051602081830303815290604052805190602001209050949350505050565b600080600061187185856108a0565b60405163a0d975a760e01b81526001600160a01b038716600482015260248101869052909150600090309063a0d975a79060440160206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f591906149f9565b919350909150505b9250929050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061193a826123bf565b6119a25760405162461bcd60e51b815260206004820152603360248201527f434c4d383a3a676574546f6b656e52657469726564416d6f756e743a20746f6b604482015272195b925908191bd95cc81b9bdd08195e1a5cdd606a1b6064820152608401610908565b50600090815260cd602090815260408083206001600160a01b03949094168352929052205490565b61118333838361290f565b6119e0600033611904565b6119fc5760405162461bcd60e51b815260040161090890614d8b565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b611a9e604051806101a0016040528060008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001600081525090565b600082815260cc602090815260409182902082516101a08101845281548152600182015460ff8116938201939093526001600160a01b03610100938490048116948201949094526002820154909316606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e08401526007810180549192840191611b2e906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5a906151be565b8015611ba75780601f10611b7c57610100808354040283529160200191611ba7565b820191906000526020600020905b815481529060010190602001808311611b8a57829003601f168201915b50505050508152602001600882018054611bc0906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec906151be565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600982018054611c52906151be565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e906151be565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505050508152602001600a8201548152602001600b820154815250509050919050565b600054610100900460ff16611d0a5760005460ff1615611d0e565b303b155b611d715760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610908565b600054610100900460ff16158015611d93576000805461ffff19166101011790555b611dab604051806020016040528060008152506129f0565b611dd16000805160206153a98339815191526000805160206153c9833981519152612a33565b611ddc6000836123b5565b611df46000805160206153c9833981519152836123b5565b611e0c600080516020615409833981519152836123b5565b611e24600080516020615369833981519152836123b5565b611e3c600080516020615429833981519152836123b5565b611e54600080516020615389833981519152836123b5565b611e6c600080516020615349833981519152836123b5565b60c9805460ca80546001600160a01b03191690556001600160a81b0319166101006001600160a01b0385160260ff19161790558015611183576000805461ff00191690555050565b6000808080808080611ec68189611904565b90506000611ee26000805160206154098339815191528a611904565b90506000611efe6000805160206153698339815191528b611904565b90506000611f1a6000805160206154298339815191528c611904565b90506000611f366000805160206153498339815191528d611904565b90506000611f526000805160206153a98339815191528e611904565b959d949c50929a50909850965091945092505050565b600082815260976020526040902060010154611f848133610ecb565b610aee83836128a8565b611f99600033611904565b611fb55760405162461bcd60e51b815260040161090890614d8b565b60c9805460ff1916911515919091179055565b611fd3600033611904565b611fef5760405162461bcd60e51b815260040161090890614d8b565b611ff88161286a565b61205f5760405162461bcd60e51b815260206004820152603260248201527f434c4d383a3a756e72656769737465724465616c65723a20746f6b656e54797060448201527119525908191bd95cc81b9bdd08195e1a5cdd60721b6064820152608401610908565b8060ff16600114156120885761208360008051602061540983398151915283611f68565b6120f4565b8060ff16600214156120ac5761208360008051602061536983398151915283611f68565b8060ff16600314156120d05761208360008051602061542983398151915283611f68565b8060ff16600414156120f4576120f460008051602061538983398151915283611f68565b6120fd826115a4565b612119576121196000805160206153c983398151915283611f68565b6040516001600160a01b038316907f98552ded770f1d05a505572f3387c108dbc6b566ea3d49f83cff3d1f1c72a04290600090a25050565b60ca546001600160a01b03163314806121705750612170600033611904565b6121da5760405162461bcd60e51b815260206004820152603560248201527f434c4d383a3a69737375654f6e426568616c663a2063616c6c206d757374206360448201527437b6b290333937b6902220a79037b91030b236b4b760591b6064820152608401610908565b6121ec8a8a8a8a8a8a8a8a8a8a612a7e565b50505050505050505050565b6001600160a01b038516331480612214575061221485336107ae565b6122725760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610908565b610eac858585858561321f565b60006122996000805160206153c983398151915283611904565b806122b757506122b76000805160206153a983398151915283611904565b80611618575061161860008051602061534983398151915283611904565b6122dd61231f565b6122ef89338a8a8a8a8a8a8a8a612a7e565b505050505050505050565b60006001600160e01b03198216637965db0b60e01b148061095e575061095e82613340565b6123376000805160206153c983398151915233611904565b80612355575061235560008051602061534983398151915233611904565b6123b35760405162461bcd60e51b815260206004820152602960248201527f434c4d383a3a6f6e6c794465616c65723a206d73672e73656e646572206e6f746044820152681030903232b0b632b960b91b6064820152608401610908565b565b61118382826127e4565b6000816123cb60cb5490565b1061162557506001610961565b6001600160a01b0384166124385760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610908565b336124588160008761244988613390565b61245288613390565b876133e9565b60008481526065602090815260408083206001600160a01b03891684529091528120805485929061248a908490615118565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610eac816000878787876138d9565b6124f5838383613a44565b600082815260cc60205260409020600b01546125119082613bc1565b600083815260cc60209081526040808320600b019390935560cd81528282206001600160a01b03871683529052205461254a9082613bc1565b600092835260cd602090815260408085206001600160a01b039096168552949052929091209190915550565b81518351146125d85760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610908565b6001600160a01b0384166125fe5760405162461bcd60e51b815260040161090890614e40565b3361260d8187878787876133e9565b60005b845181101561271257600085828151811061263b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061266757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156126b85760405162461bcd60e51b815260040161090890614e85565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906126f7908490615118565b925050819055505050508061270b9061521f565b9050612610565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612762929190614d02565b60405180910390a4612778818787878787613bd4565b505050505050565b61278a8282611904565b611183576127a2816001600160a01b03166014613c9e565b6127ad836020613c9e565b6040516020016127be929190614bd7565b60408051601f198184030181529082905262461bcd60e51b825261090891600401614d30565b6127ee8282611904565b6111835760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128263390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000808260ff16118015611618575060048260ff161161162557506001610961565b600080600061289b8585613e7f565b9150915061149d81613eec565b6128b28282611904565b156111835760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031614156129835760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610908565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff16612a175760405162461bcd60e51b815260040161090890614f2c565b612a1f6140ef565b612a276140ef565b612a3081614116565b50565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b612a878861286a565b612adf5760405162461bcd60e51b8152602060048201526024808201527f434c4d383a3a5f69737375653a20746f6b656e54797065496420697320696e76604482015263185b1a5960e21b6064820152608401610908565b60c95460ff1615612d26578760ff1660011480612aff57508760ff166002145b15612c895760ca546001600160a01b03163314612b755760405162461bcd60e51b815260206004820152602e60248201527f434c4d383a3a5f6973737565286c696d69746564293a206d73672e73656e646560448201526d72206e6f742074696d656c6f636b60901b6064820152608401610908565b612b8060008b611904565b612bdc5760405162461bcd60e51b815260206004820152602760248201527f434c4d383a3a5f6973737565286c696d69746564293a20697373756565206e6f6044820152663a1030b236b4b760c91b6064820152608401610908565b612bf46000805160206154098339815191528a611904565b80612c125750612c126000805160206153698339815191528a611904565b612c845760405162461bcd60e51b815260206004820152603760248201527f434c4d383a3a5f6973737565286c696d69746564293a2070726f706f7365722060448201527f6e6f7420612072656769737465726564206465616c65720000000000000000006064820152608401610908565b612d21565b8760ff1660031415612d2157612cad6000805160206154298339815191528a611904565b612d21576040805162461bcd60e51b81526020600482015260248101919091527f434c4d383a3a5f6973737565286c696d69746564293a20697373756572206e6f60448201527f742061207265676973746572656420656d697373696f6e732061756469746f726064820152608401610908565b612e9b565b8760ff1660011415612d9d57612d4a6000805160206154098339815191528a611904565b612d215760405162461bcd60e51b815260206004820152603060248201526000805160206153e983398151915260448201526f3a32b932b2102922a1903232b0b632b960811b6064820152608401610908565b8760ff1660021415612e1757612dc16000805160206153698339815191528a611904565b612d215760405162461bcd60e51b815260206004820152603360248201526000805160206153e98339815191526044820152723a32b932b21037b33339b2ba103232b0b632b960691b6064820152608401610908565b8760ff1660031415612e9b57612e3b6000805160206154298339815191528a611904565b612e9b5760405162461bcd60e51b815260206004820152603760248201526000805160206153e983398151915260448201527f746572656420656d697373696f6e732061756469746f720000000000000000006064820152608401610908565b8760ff1660041415612f9857612ebf6000805160206153498339815191528a611904565b612f105760405162461bcd60e51b815260206004820152602e60248201526000805160206153e983398151915260448201526d746572656420696e64757374727960901b6064820152608401610908565b336001600160a01b038b1614612f985760405162461bcd60e51b815260206004820152604160248201527f434c4d383a3a5f69737375653a207265676973746572656420696e647573747260448201527f792063616e206f6e6c7920697373756520636172626f6e20746f20697473656c6064820152603360f91b608482015260a401610908565b612fa660cb80546001019055565b600060cc6000612fb560cb5490565b81526020019081526020016000209050612fce60cb5490565b8160000181905550888160010160006101000a81548160ff021916908360ff1602179055508a8160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550898160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555086816003018190555085816004018190555084816006018190555042816005018190555083816007019080519060200190613081929190614271565b5082516130979060088301906020860190614271565b5081516130ad9060098301906020850190614271565b50600a81018890556000600b8201556130df8b6130c960cb5490565b8a604051806020016040528060008152506123d8565b8860ff16600314156131065760028101548154613106916001600160a01b0316908a6124ea565b8060020160009054906101000a90046001600160a01b03166001600160a01b03168160010160019054906101000a90046001600160a01b03166001600160a01b03167f99cc3eeb446560c9a2d2483bc5160735ec0fb1851aea3bde32e7a56c30c11da68a60cd60008660000154815260200190815260200160002060008660020160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205485600001548660010160009054906101000a900460ff168760030154886004015489600501548a600601548b6007018c6008018d60090160405161320a9b9a99989796959493929190615071565b60405180910390a35050505050505050505050565b6001600160a01b0384166132455760405162461bcd60e51b815260040161090890614e40565b3361325581878761244988613390565b60008481526065602090815260408083206001600160a01b038a168452909152902054838110156132985760405162461bcd60e51b815260040161090890614e85565b60008581526065602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906132d7908490615118565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46133378288888888886138d9565b50505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061337157506001600160e01b031982166303a24d0760e21b145b8061095e57506301ffc9a760e01b6001600160e01b031983161461095e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106133d857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b84846001600160a01b0382161561341f576134038261227f565b61341f5760405162461bcd60e51b815260040161090890614ecf565b6001600160a01b03811615613453576134378161227f565b6134535760405162461bcd60e51b815260040161090890614dd4565b856001600160a01b0316876001600160a01b031614156134e65760405162461bcd60e51b815260206004820152604260248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a2073656e6460448201527f657220616e642072656365697665722063616e6e6f74206265207468652073616064820152616d6560f01b608482015260a401610908565b6000805b86518110156137d257600060cc600089848151811061351957634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020905060c960009054906101000a900460ff16156136e8576001600160a01b03891661355a57506137c0565b60018082015460ff1614806135765750600181015460ff166002145b156136285760ca546001600160a01b038c81169116148061359d575061359d60008c611904565b6136235760405162461bcd60e51b815260206004820152604b60248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e73666572286c696d697460448201527f6564293a206f6e6c792061646d696e20616e642044414f2063616e207472616e60648201526a7366657220746f6b656e7360a81b608482015260a401610908565b6136e8565b600181015460ff16600314156136e8576136506000805160206154298339815191528c611904565b6136e85760405162461bcd60e51b815260206004820152605860248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e73666572286c696d697460448201527f6564293a206f6e6c7920656d697373696f6e732061756469746f72732063616e60648201527f206973737565206175646974656420656d697373696f6e730000000000000000608482015260a401610908565b600181015460ff16600414801561370757506001600160a01b03891615155b801561371b57506001600160a01b038a1615155b156137be576000925061379887838151811061374757634e487b7160e01b600052603260045260246000fd5b602002602001015160ce60008460000154815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054613bc190919063ffffffff16565b8154600090815260ce602090815260408083206001600160a01b038f1684529091529020555b505b806137ca8161521f565b9150506134ea565b5080156122ef5760006137e7898989896117ed565b90506137f481868a61106c565b6138755760405162461bcd60e51b815260206004820152604660248201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a207265636560448201527f69766572277320617070726f76616c207369676e6174757265206973206e6f74606482015265081d985b1a5960d21b608482015260a401610908565b6001600160a01b03808a16600090815260cf60209081526040808320938c168352929052908120805463ffffffff16916138ae8361523a565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050505050505050505050565b6001600160a01b0384163b156127785760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061391d9089908990889088908890600401614caa565b602060405180830381600087803b15801561393757600080fd5b505af1925050508015613967575060408051601f3d908101601f19168201909252613964918101906149dd565b60015b613a145761397361528a565b806308c379a014156139ad57506139886152a1565b8061399357506139af565b8060405162461bcd60e51b81526004016109089190614d30565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610908565b6001600160e01b0319811663f23a6e6160e01b146133375760405162461bcd60e51b815260040161090890614d43565b6001600160a01b038316613aa65760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610908565b33613ad581856000613ab787613390565b613ac087613390565b604051806020016040528060008152506133e9565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015613b545760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610908565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000613bcd8284615118565b9392505050565b6001600160a01b0384163b156127785760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190613c189089908990889088908890600401614c4c565b602060405180830381600087803b158015613c3257600080fd5b505af1925050508015613c62575060408051601f3d908101601f19168201909252613c5f918101906149dd565b60015b613c6e5761397361528a565b6001600160e01b0319811663bc197c8160e01b146133375760405162461bcd60e51b815260040161090890614d43565b60606000613cad836002615158565b613cb8906002615118565b6001600160401b03811115613cdd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613d07576020820181803683370190505b509050600360fc1b81600081518110613d3057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613d6d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613d91846002615158565b613d9c906001615118565b90505b6001811115613e30576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613dde57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613e0257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613e29816151a7565b9050613d9f565b508315613bcd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610908565b600080825160411415613eb65760208301516040840151606085015160001a613eaa87828585614146565b945094505050506118fd565b825160401415613ee05760208301516040840151613ed5868383614233565b9350935050506118fd565b506000905060026118fd565b6000816004811115613f0e57634e487b7160e01b600052602160045260246000fd5b1415613f1957612a30565b6001816004811115613f3b57634e487b7160e01b600052602160045260246000fd5b1415613f895760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610908565b6002816004811115613fab57634e487b7160e01b600052602160045260246000fd5b1415613ff95760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610908565b600381600481111561401b57634e487b7160e01b600052602160045260246000fd5b14156140745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610908565b600481600481111561409657634e487b7160e01b600052602160045260246000fd5b1415612a305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610908565b600054610100900460ff166123b35760405162461bcd60e51b815260040161090890614f2c565b600054610100900460ff1661413d5760405162461bcd60e51b815260040161090890614f2c565b612a3081614262565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561417d575060009050600361422a565b8460ff16601b1415801561419557508460ff16601c14155b156141a6575060009050600461422a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156141fa573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166142235760006001925092505061422a565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161425487828885614146565b935093505050935093915050565b80516111839060679060208401905b82805461427d906151be565b90600052602060002090601f01602090048101928261429f57600085556142e5565b82601f106142b857805160ff19168380011785556142e5565b828001600101855582156142e5579182015b828111156142e55782518255916020019190600101906142ca565b506142f19291506142f5565b5090565b5b808211156142f157600081556001016142f6565b80356001600160a01b038116811461096157600080fd5b600082601f830112614331578081fd5b8135602061433e826150f5565b60405161434b82826151f3565b8381528281019150858301600585901b8701840188101561436a578586fd5b855b858110156143885781358452928401929084019060010161436c565b5090979650505050505050565b8035801515811461096157600080fd5b600082601f8301126143b5578081fd5b81356001600160401b038111156143ce576143ce615274565b6040516143e5601f8301601f1916602001826151f3565b8181528460208386010111156143f9578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461096157600080fd5b600060208284031215614435578081fd5b613bcd8261430a565b60008060408385031215614450578081fd5b6144598361430a565b91506144676020840161430a565b90509250929050565b60008060008060808587031215614485578182fd5b61448e8561430a565b935061449c6020860161430a565b925060408501356001600160401b03808211156144b7578384fd5b6144c388838901614321565b935060608701359150808211156144d8578283fd5b506144e587828801614321565b91505092959194509250565b600080600080600060a08688031215614508578081fd5b6145118661430a565b945061451f6020870161430a565b935060408601356001600160401b038082111561453a578283fd5b61454689838a01614321565b9450606088013591508082111561455b578283fd5b61456789838a01614321565b9350608088013591508082111561457c578283fd5b50614589888289016143a5565b9150509295509295909350565b600080600080600060a086880312156145ad578081fd5b6145b68661430a565b94506145c46020870161430a565b9350604086013592506060860135915060808601356001600160401b038111156145ec578182fd5b614589888289016143a5565b6000806000806000806000806000806101408b8d031215614617578485fd5b6146208b61430a565b995061462e60208c0161430a565b985061463c60408c01614413565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b01356001600160401b0380821115614673578485fd5b61467f8e838f016143a5565b94506101008d0135915080821115614695578384fd5b6146a18e838f016143a5565b93506101208d01359150808211156146b7578283fd5b506146c48d828e016143a5565b9150509295989b9194979a5092959850565b600080604083850312156146e8578182fd5b6146f18361430a565b915061446760208401614395565b60008060408385031215614711578182fd5b61471a8361430a565b946020939093013593505050565b60008060006060848603121561473c578081fd5b6147458461430a565b95602085013595506040909401359392505050565b6000806040838503121561476c578182fd5b6147758361430a565b915061446760208401614413565b60008060008060008060008060006101208a8c0312156147a1578283fd5b6147aa8a61430a565b98506147b860208b01614413565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a01356001600160401b03808211156147ef578485fd5b6147fb8d838e016143a5565b945060e08c0135915080821115614810578384fd5b61481c8d838e016143a5565b93506101008c0135915080821115614832578283fd5b5061483f8c828d016143a5565b9150509295985092959850929598565b60008060408385031215614861578182fd5b82356001600160401b0380821115614877578384fd5b818501915085601f83011261488a578384fd5b81356020614897826150f5565b6040516148a482826151f3565b8381528281019150858301600585901b870184018b10156148c3578889fd5b8896505b848710156148ec576148d88161430a565b8352600196909601959183019183016148c7565b5096505086013592505080821115614902578283fd5b5061490f85828601614321565b9150509250929050565b60006020828403121561492a578081fd5b613bcd82614395565b600060208284031215614944578081fd5b5035919050565b6000806040838503121561495d578182fd5b823591506144676020840161430a565b600080600060608486031215614981578081fd5b8335925060208401356001600160401b0381111561499d578182fd5b6149a9868287016143a5565b9250506149b86040850161430a565b90509250925092565b6000602082840312156149d2578081fd5b8135613bcd81615332565b6000602082840312156149ee578081fd5b8151613bcd81615332565b600060208284031215614a0a578081fd5b5051919050565b60008060408385031215614a23578182fd5b50508035926020909101359150565b60008060408385031215614a44578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015614a8457815187529582019590820190600101614a68565b509495945050505050565b80516000906020808401838315614a8457815187529582019590820190600101614a68565b60008151808452614acc816020860160208601615177565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680614afa57607f831692505b6020808410821415614b1a57634e487b7160e01b86526022600452602486fd5b83885260208801828015614b355760018114614b4657614b71565b60ff19871682528282019750614b71565b60008981526020902060005b87811015614b6b57815484820152908601908401614b52565b83019850505b5050505050505092915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b16601484015250614bb8614bb26028840187614a8f565b85614a8f565b60e09390931b6001600160e01b03191683525050600401949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614c0f816017850160208801615177565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614c40816028840160208801615177565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090614c7890830186614a55565b8281036060840152614c8a8186614a55565b90508281036080840152614c9e8185614ab4565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614ce490830184614ab4565b979650505050505050565b600060208252613bcd6020830184614a55565b600060408252614d156040830185614a55565b8281036020840152614d278185614a55565b95945050505050565b600060208252613bcd6020830184614ab4565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206e6f74206040820152683a34329030b236b4b760b91b606082015260800190565b60208082526046908201527f434c4d383a3a636f6e73756d65724f724465616c65723a20726563697069656e60408201527f74206d75737420626520636f6e73756d65722c206465616c6572206f7220696e60608201526564757374727960d01b608082015260a00190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526039908201527f434c4d383a3a636f6e73756d65724f724465616c65723a2073656e646572206e60408201527f6f74206120636f6e73756d6572206f722061206465616c657200000000000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208252825160208301526020830151614f98604084018260ff169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101a0610120818186015261500e6101c0860184614ab4565b9250808601519050601f1961014081878603018188015261502f8584614ab4565b94508088015192505061016081878603018188015261504e8584614ab4565b908801516101808881019190915290970151929095019190915250929392505050565b60006101608d83528c60208401528b604084015260ff8b1660608401528960808401528860a08401528760c08401528660e0840152806101008401526150b981840187614ae0565b90508281036101208401526150ce8186614ae0565b90508281036101408401526150e38185614ae0565b9e9d5050505050505050505050505050565b60006001600160401b0382111561510e5761510e615274565b5060051b60200190565b6000821982111561512b5761512b61525e565b500190565b600063ffffffff80831681851680830382111561514f5761514f61525e565b01949350505050565b60008160001904831182151516156151725761517261525e565b500290565b60005b8381101561519257818101518382015260200161517a565b838111156151a1576000848401525b50505050565b6000816151b6576151b661525e565b506000190190565b600181811c908216806151d257607f821691505b602082108114156117e757634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b038111828210171561521857615218615274565b6040525050565b60006000198214156152335761523361525e565b5060010190565b600063ffffffff808316818114156152545761525461525e565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156115a157600481823e5160e01c90565b600060443d10156152b1576115a1565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156152e25750505050506115a1565b82850191508151818111156152fc575050505050506115a1565b843d8701016020828501011115615318575050505050506115a1565b615327602082860101876151f3565b509094505050505090565b6001600160e01b031981168114612a3057600080fdfe8305613dd3dbc3e0773e56336f52890c75fc1219c6ed3f363339b8ada04df289ede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5ff047c8eb56a4fb9b90290fc55ce546369985412ba2348c56342b7afbf87ec1a65e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76af8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf3434c4d383a3a5f69737375653a20697373756572206e6f7420612072656769732ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d860e97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12ca2646970667358221220f28b6d5f51028c16faa79ed349492fa603be14809b9dcff1ffa0abad7b6278f464736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_consumerOrDealer(address)": {
        "details": "Returns `true` if hasRole of dealer, industry or consumer"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getIssuer(uint256)": {
        "details": "returns issuer of a given tokenId"
      },
      "getNumOfUniqueTokens()": {
        "details": "returns number of unique tokens"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoles(address)": {
        "details": "Helper function for returning tuple of bools of role membership",
        "params": {
          "account": "address to check roles"
        }
      },
      "getTokenDetails(uint256)": {
        "details": "returns the details of a given tokenId, omitting holders",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTokenRetiredAmount(address,uint256)": {
        "details": "returns the retired amount on a token",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTokenType(uint256)": {
        "details": "returns the token name for the given token as a string value",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTransferHash(address,address,uint256[],uint256[])": {
        "details": "Returns keccak256 hash of transaction request including next available nonce for transfer from -> to addresses"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isConsumerRegistered(address)": {
        "details": "returns true if Consumers's account is registered",
        "params": {
          "account": "address of the dealer"
        }
      },
      "isDealerRegistered(address)": {
        "details": "returns true if Dealer's account is registered",
        "params": {
          "account": "address of the dealer"
        }
      },
      "issue(address,uint8,uint256,uint256,uint256,uint256,string,string,string)": {
        "details": "External function to mint an amount of a token Only authorized dealer of associated token type can call this function",
        "params": {
          "quantity": "of the token to mint For ex: if one needs 100 full tokens, the caller should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)"
        }
      },
      "issueOnBehalf(address,address,uint8,uint256,uint256,uint256,uint256,string,string,string)": {
        "details": "Issue function for DAO (on limited mode) or admin to manually pass issuer Must be called from Timelock contract through a successful proposal or by admin if limited mode is set to false"
      },
      "mint(address,uint256,uint256)": {
        "details": "mints more of an existing token",
        "params": {
          "quantity": "amount to mint",
          "to": "reciepient of token",
          "tokenId": "token to mint more of"
        }
      },
      "registerConsumer(address)": {
        "details": "returns true if Consumer's account is registered for the given token",
        "params": {
          "account": "address of the consumer"
        }
      },
      "registerDealer(address,uint8)": {
        "details": "Only contract owner can register Dealers",
        "params": {
          "account": "address of the dealer to register"
        }
      },
      "registerIndustry(address)": {
        "details": "msg.sender can volunteer themselves as registered industry or other registered dealer can register Industry"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "retire(uint256,uint256)": {
        "details": "sets the token to the retire state to disable transfers, mints and burns",
        "params": {
          "tokenId": "token to set in pause state   Only contract owner can pause or resume tokens"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setLimitedMode(bool)": {
        "details": "turns off or on limited mode",
        "params": {
          "_limitedMode": "boolean value"
        }
      },
      "transfer(address,uint256,uint256)": {
        "details": "transfers the value to the 'to' account for tokenId",
        "params": {
          "to": "recipient address",
          "tokenId": "tokenId for the transfer",
          "value": "amount of transfer Transfer can start only when both parties are registered and the token is not paused Note: Token holders can arbitrarily call safeTransferFrom() without these checks The requires commented out below have been moved to _beforeTokenTransfer hook so that they are always applied to safeTransferFrom (or safeBatch...)      "
        }
      },
      "unregisterConsumer(address)": {
        "details": "Only contract owner can unregister Consumers TO-DO clarify the above - function allows any Dealer to unregister consumers. Why would we need to unregister consumers?",
        "params": {
          "account": "address to be unregistered"
        }
      },
      "unregisterDealer(address,uint8)": {
        "details": "Only contract owner can unregister Dealers",
        "params": {
          "account": "address to be unregistered"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "verifySignature(bytes32,bytes,address)": {
        "details": "Returns `true` if transfer has been approved by to address reconstruct transferHash and check that it matches the signature"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 419,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3094,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3807,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 512,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 518,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 520,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1605,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6629,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "limitedMode",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 6631,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "admin",
        "offset": 1,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 6633,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "timelock",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 6698,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_numOfUniqueTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)3101_storage"
      },
      {
        "astId": 6703,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_tokenDetails",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_struct(CarbonTokenDetails)6695_storage)"
      },
      {
        "astId": 6709,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_retiredBalances",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6715,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_transferredBalances",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6721,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "carbonTransferNonce",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint32))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint32)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(CarbonTokenDetails)6695_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NetEmissionsTokenNetwork.CarbonTokenDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonTokenDetails)6695_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CarbonTokenDetails)6695_storage": {
        "encoding": "inplace",
        "label": "struct NetEmissionsTokenNetwork.CarbonTokenDetails",
        "members": [
          {
            "astId": 6670,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6672,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "tokenTypeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 6674,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuer",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6676,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuee",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6678,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "fromDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6680,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "thruDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6682,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "dateCreated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6684,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "automaticRetireDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6686,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "metadata",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 6688,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "manifest",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 6690,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "description",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 6692,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "totalIssued",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6694,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "totalRetired",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Counter)3101_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3100,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}