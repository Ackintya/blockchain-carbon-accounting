{
  "address": "0x1710CF0e075774EaeeC082159cC3D427c813125C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredTracker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        }
      ],
      "name": "TrackeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tracker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "inAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "outAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "trackerIds",
          "type": "uint256[]"
        }
      ],
      "name": "TrackerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VerifiedTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        }
      ],
      "name": "VerifierApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        }
      ],
      "name": "VerifierRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_TRACKER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256[257]",
          "name": "usedTrackerIds",
          "type": "uint256[257]"
        }
      ],
      "name": "_carbonIntensity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_trackerData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalEmissions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAudited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dateCreated",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTracked",
          "type": "uint256"
        }
      ],
      "name": "_verifyTotalTracked",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approve",
          "type": "bool"
        }
      ],
      "name": "approveVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        }
      ],
      "name": "audit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auditedTrackerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "carbonIntensity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        }
      ],
      "name": "changeTrackee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfUniqueTrackers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceTrackerId",
          "type": "uint256"
        }
      ],
      "name": "getTokenAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceTrackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceTrackerId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        }
      ],
      "name": "getTrackerDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "trackerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trackee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalEmissions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAudited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fromDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thruDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateCreated",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct CarbonTracker.CarbonTrackerDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        }
      ],
      "name": "getTrackerIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_net",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offsetTrackerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tracker",
          "type": "address"
        }
      ],
      "name": "registerTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        }
      ],
      "name": "removeAudit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trackee",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "inAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "outAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "trackerIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "track",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "inAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "outAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "trackerIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "trackUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x005ab02400634e78179118a82d06a208bbf0a216a3a5fd02ffc6a03677517622",
  "receipt": {
    "to": null,
    "from": "0x69c1Cb2C2fC06D17a1454864F7b206cf9599Bd14",
    "contractAddress": "0x1710CF0e075774EaeeC082159cC3D427c813125C",
    "transactionIndex": 1,
    "gasUsed": "4638040",
    "logsBloom": "0x
    "blockHash": "0x01d7dca050b35eb9c14f4b9727b36d857c89222f01cc74de121467a04b87c08c",
    "transactionHash": "0x005ab02400634e78179118a82d06a208bbf0a216a3a5fd02ffc6a03677517622",
    "logs": [],
    "blockNumber": 17770693,
    "cumulativeGasUsed": "4769346",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fc9e1c8020119dc64ffe4724b62437be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"}],\"name\":\"TrackeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"inAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"outAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"trackerIds\",\"type\":\"uint256[]\"}],\"name\":\"TrackerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VerifiedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"}],\"name\":\"VerifierApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"}],\"name\":\"VerifierRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_TRACKER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256[257]\",\"name\":\"usedTrackerIds\",\"type\":\"uint256[257]\"}],\"name\":\"_carbonIntensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_trackerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEmissions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAudited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTracked\",\"type\":\"uint256\"}],\"name\":\"_verifyTotalTracked\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"approveVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"audit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auditedTrackerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"carbonIntensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"}],\"name\":\"changeTrackee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfUniqueTrackers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceTrackerId\",\"type\":\"uint256\"}],\"name\":\"getTokenAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceTrackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceTrackerId\",\"type\":\"uint256\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"getTrackerDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEmissions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAudited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct CarbonTracker.CarbonTrackerDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"getTrackerIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_net\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offsetTrackerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"name\":\"registerTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"removeAudit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trackee\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"trackerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"track\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"trackerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"trackUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_carbonIntensity(uint256,uint8,uint256[257])\":{\"details\":\"measure the carbon intensity of a tracker NFT.       This is a recursive function that cycle through all previous trackerIds\",\"params\":{\"tokenTypeId\":\"measure total carbonIntensity of tracker token for tokenTypeId outputs (2. offset credits, audited emission certificates, carbon tracker tokens)\",\"trackerId\":\"to measure\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"approveVerifier(address,bool)\":{\"details\":\"approve verifier for trackee as msg.sender\",\"params\":{\"approve\":\"(true) or remove (false)\",\"verifier\":\"to be approved or removed\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"changeTrackee(uint256,address)\":{\"details\":\"change trackee of trackerId\",\"params\":{\"trackerId\":\"- id of token tp be changed\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getNumOfUniqueTrackers()\":{\"details\":\"returns number of unique trackers\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrackerDetails(uint256)\":{\"details\":\"returns the details of a given tokenId\",\"params\":{\"trackerId\":\"token to check\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"registerTracker(address)\":{\"details\":\"msg.sender can volunteer themselves as registered tracker or admin\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"track(address,uint256[],uint256[],uint256[],uint256[],uint256,uint256,string,string)\":{\"details\":\"create a tracker Token for trackee. Note _track will check that msg.sender is either the trackee, or is an approved auditor of the trackee (see isVerifierApproved[][] mapping)\",\"params\":{\"inAmounts\":\"- array of incoming token id amounts (direct/indirect/offsets) matching each carbon token\",\"outAmounts\":\"- array of outgoing token id amounts (direct/indirect emissions) matching each carbon token\",\"tokenIds\":\"- array of ids of tracked carbon tokens (direct/indirect/offsets)\",\"trackee\":\"- target adress to be tracked\",\"trackerIds\":\"- array of trackerIds matching each tokenID for tracing embodied emissions \"}},\"trackUpdate(uint256,uint256[],uint256[],uint256[],uint256[],uint256,uint256,string,string)\":{\"details\":\"update a tracker Token \",\"params\":{\"trackerId\":\"of the token see tracker() function for description of other inputs*\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"carbonIntensity(uint256,uint8)\":{\"notice\":\"These are public view functions Warning: should never be called within functions that update the network to avoid excessive gas fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance/CarbonTracker.sol\":\"CarbonTracker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc8a2776bd48e62498418d7eede80bde0f00c6b5d67286abf49499d7f7b65b95c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x1762ac67d230279d7fb183567ce22bbe202054ce08f94224d8794f9d19546d51\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/Governance/CarbonTracker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../NetEmissionsTokenNetwork.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\ncontract CarbonTracker is Initializable, ERC721Upgradeable, AccessControlUpgradeable {\\n\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    NetEmissionsTokenNetwork net;\\n\\n    // Registered Tracker\\n    bytes32 public constant REGISTERED_TRACKER =\\n        keccak256(\\\"REGISTERED_TRACKER\\\");\\n    /**\\n     * @dev tracker struct for incoming/ outgoing carbon tokens of the tracker\\n     * tokenIds - array of ids of carbon tokens (direct/indirect/offsets)\\n     * idIndex - mapping tokenId to its index in array. 1st index is 1, 0 reserved for unindexed\\n     * inAmount - mapping tokenId to incoming (burnt) amount\\n     * outAmount - mapping tokenId to outgoing amounts\\n    **/\\n    struct CarbonTokens{\\n        uint256[] tokenIds;\\n        mapping(uint => uint) idIndex; \\n        mapping(uint => uint) inAmount;\\n        mapping(uint => uint) outAmount;\\n    }\\n    /**\\n     * @dev tracker details\\n     * trackee - address of the account the tracking will apply to\\n     * auditor -\\n     * totalEmissions - total amount of carbon in\\n     * totalAudited - total outgoing audited emission certificates\\n     * totalOffset - total outgoing offset credits\\n     *    \\n    **/\\n    struct CarbonTrackerDetails {\\n        uint trackerId;\\n        address trackee;    \\n        address auditor;    \\n        uint256 totalEmissions;\\n        uint256 totalAudited;\\n        uint256 totalOffset;\\n        uint256 fromDate;\\n        uint256 thruDate;\\n        uint256 dateCreated;\\n        string metadata;\\n        string description;\\n    }\\n    /** \\n     * @dev tracker mappings\\n     * trackerIds - arrays of tracker ids\\n     * trackerIndex - mapping sourceTrackerId to index in array. 1st index is 1, 0 reserved for unindexed.\\n     * carbonTokens -  mapping sourceTrackerId (0 for none) to current CarbonTokens input/outputs. \\n     * totalOut - mapping tokenId to total Carbon output amounts tracked\\n     * totalTracked - mapping tokenId for aggregate carbon (token type 4) tracked to other tracker ids\\n    */\\n    struct CarbonTrackerMappings {\\n        uint256[] trackerIds;\\n        mapping(uint256 => uint256) trackerIndex;\\n        mapping(uint256 => CarbonTokens) carbonTokens;\\n        mapping(uint256 => uint256) totalOut;\\n        mapping(uint256 => uint256) totalTracked;\\n    }\\n\\n    mapping(uint => CarbonTrackerDetails) public _trackerData;\\n    mapping(uint => CarbonTrackerMappings) internal _trackerMappings;\\n    CountersUpgradeable.Counter private _numOfUniqueTrackers;\\n\\n    // retired balances of tokenId tracked to address trackee\\n    mapping(uint => mapping(address => uint)) private _retiredBalances; \\n    // transferredBalances balances of tokenId tracked to address trackee\\n    mapping(uint => mapping(address => uint)) private _transferredBalances; \\n    // map audited emission token to a trackerId \\n    mapping(uint => uint) public auditedTrackerId;\\n    // map offset credit token to a trackerId \\n    mapping(uint => uint) public offsetTrackerId;\\n\\n    // map verifier to trackee\\n    mapping(address => mapping (address => bool)) isVerifierApproved;\\n\\n    event RegisteredTracker(address indexed account);\\n    event TrackerUpdated(\\n        uint256 indexed trackerId,\\n        address indexed tracker,\\n        uint256[] tokenIds,\\n        uint256[] inAmounts,\\n        uint256[] outAmounts,\\n        uint256[] trackerIds);\\n    event TrackeeChanged(uint indexed trackerId, address indexed trackee);\\n    event VerifierApproved(address indexed auditor,address indexed trackee);\\n    event VerifierRemoved(address indexed auditor,address indexed trackee);\\n    event VerifiedTransfer(uint indexed tokenId,address indexed trackee,uint amount );\\n\\n    function initialize(address _net, address _admin) public initializer {\\n        net = NetEmissionsTokenNetwork(_net);\\n        __ERC721_init('NET Carbon Tracker', \\\"NETT\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(REGISTERED_TRACKER, _admin);\\n    }  \\n    modifier notAudited(uint trackerId){\\n        require(_trackerData[trackerId].auditor==address(0),\\n            \\\"CLM8::notAudited: trackerId is already audited\\\"\\n        );\\n        _;\\n    }\\n    modifier isAuditor(uint trackerId){\\n        _isAuditor(trackerId);\\n        _;\\n    }\\n    function _isAuditor(uint trackerId) view internal{\\n        require(isVerifierApproved[msg.sender][_trackerData[trackerId].trackee],\\n            \\\"CLM8::isAuditor: auditor is not approved by the trackee\\\");\\n    }\\n    modifier trackerTokenkExists(uint256 tokenId){\\n        require(_numOfUniqueTrackers.current() >= tokenId,\\n            \\\"CLM8::trackerTokenkExists: tracker token ID does not exist\\\");\\n        _;\\n    }\\n    modifier registeredTracker(address trackee){\\n        require(hasRole(REGISTERED_TRACKER, trackee),\\n            \\\"CLM8::registeredTracker: the address is not registered\\\");\\n        _;\\n    }\\n    modifier onlyAdmin() {         \\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::onlyAdmin: msg.sender is not an admin\\\");\\n        _;\\n    }\\n    /**\\n     * @dev require msg.sender has admin role\\n     */\\n    modifier selfOrAdmin(address _address){\\n        require( _address==msg.sender || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::selfOrAdmin: msg.sender does not own this address or is not an admin\\\");               \\n        _;\\n    }\\n\\n    function _verifyTotalTracked(uint256 outAmount, uint256 totalTracked) public pure {\\n        require(outAmount >= totalTracked,\\n            \\\"CLM8::_verifyTotalTracked: total amount tracked exceeds output of tokenId from trackerId\\\"\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual \\n        override(ERC721Upgradeable,AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    /**\\n     * @dev create a tracker Token for trackee. Note _track will check that msg.sender is either the trackee, or is an approved auditor of the trackee (see isVerifierApproved[][] mapping)\\n     * @param trackee - target adress to be tracked\\n     * @param tokenIds - array of ids of tracked carbon tokens (direct/indirect/offsets)\\n     * @param inAmounts - array of incoming token id amounts (direct/indirect/offsets) matching each carbon token\\n     * @param outAmounts - array of outgoing token id amounts (direct/indirect emissions) matching each carbon token\\n     * @param trackerIds - array of trackerIds matching each tokenID for tracing embodied emissions \\n     */\\n    function track(\\n        address trackee,\\n        uint256[] memory tokenIds,\\n        uint256[] memory inAmounts,\\n        uint256[] memory outAmounts,\\n        uint256[] memory trackerIds,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        string memory metadata,\\n        string memory description\\n        ) public {\\n        // increment trackerId\\n        _numOfUniqueTrackers.increment();\\n        uint256 trackerId = _numOfUniqueTrackers.current();\\n\\n        // create token details\\n        CarbonTrackerDetails storage trackerData = _trackerData[trackerId];\\n        trackerData.trackerId = trackerId;\\n        trackerData.trackee = trackee;\\n        trackerData.dateCreated = block.timestamp;\\n\\n        _track(trackerData,tokenIds,inAmounts,outAmounts,trackerIds);\\n        _trackSetMetadata(trackerData,fromDate,thruDate,metadata,description);\\n        super._mint(msg.sender,trackerId);\\n    }\\n    /**\\n     * @dev update a tracker Token \\n     * @param trackerId of the token\\n     * see tracker() function for description of other inputs\\n    **/ \\n    function trackUpdate(\\n        uint trackerId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory inAmounts,\\n        uint256[] memory outAmounts,\\n        uint256[] memory trackerIds,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        string memory metadata,\\n        string memory description) public \\n        notAudited(trackerId) trackerTokenkExists(trackerId) {\\n        CarbonTrackerDetails storage trackerData = _trackerData[trackerId];\\n        _track(trackerData,tokenIds,inAmounts,outAmounts,trackerIds);\\n        _trackSetMetadata(trackerData,fromDate,thruDate,metadata,description);\\n    }\\n    function _trackSetMetadata(\\n        CarbonTrackerDetails storage trackerData,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        string memory metadata,\\n        string memory description) internal {\\n        if(fromDate>0){trackerData.fromDate = fromDate;}\\n        if(thruDate>0){trackerData.thruDate = thruDate;}\\n        if(bytes(metadata).length>0){trackerData.metadata = metadata;}\\n        if(bytes(description).length>0){trackerData.description = description;}\\n    }\\n    /**\\n     * @dev internal track operations used by track() and trackUpdate()\\n     * see trackerUpdate() for description of other inputs\\n    **/ \\n    function _track(\\n        CarbonTrackerDetails storage trackerData,\\n        uint256[] memory tokenIds,\\n        uint256[] memory inAmounts,\\n        uint256[] memory outAmounts,\\n        uint256[] memory trackerIds) internal {\\n        require(inAmounts.length == tokenIds.length, \\n            \\\"CLM8::_track: inAmounts and tokenIds are not the same length\\\"); \\n        require(outAmounts.length == tokenIds.length, \\n            \\\"CLM8::_track: outAmounts and tokenIds are not the same length\\\");\\n        require(trackerIds.length == tokenIds.length, \\n            \\\"CLM8::_track: trackerIds and tokenIds are not the same length\\\");\\n        // create token details\\n        CarbonTrackerMappings storage trackerMappings = _trackerMappings[trackerData.trackerId];\\n\\n        uint256 sourceTrackerId = trackerIds[0];\\n        CarbonTokens storage carbonTokens = trackerMappings.carbonTokens[sourceTrackerId];\\n\\n        require(\\n            ( msg.sender == trackerData.trackee          \\n              //&& hasRole(REGISTERED_TRACKER, trackerData.trackee)\\n            ) ||\\n            (   net.isAuditor(msg.sender) &&\\n                isVerifierApproved[msg.sender][trackerData.trackee]),\\n            \\\"CLM8::_track: msg.sender is not the registered trackee or an approved auditor\\\"\\n        );\\n        uint8 tokenTypeId;\\n        for (uint i = 0; i < tokenIds.length; i++) { \\n            // TO-DO write test to confirm this error.\\n            require(trackerData.trackerId != sourceTrackerId, \\n                \\\"CLM8::_track: trackerData.trackerId and sourceTrackerId can not be the same\\\"); \\n            tokenTypeId = net.getTokenTypeId(tokenIds[i]);\\n            if(i>0){\\n                 // get the data for the next tracker id if different\\n                if(trackerIds[i]!=trackerIds[i-1]){\\n                    sourceTrackerId = trackerIds[i];\\n                    carbonTokens = trackerMappings.carbonTokens[sourceTrackerId];\\n                }   \\n            }\\n            // verify retired emissions and set total emissions\\n            trackerData.totalEmissions = _verifyRetired(tokenIds[i], \\n                trackerData.trackee, trackerData.totalEmissions,\\n                tokenTypeId, carbonTokens.inAmount[tokenIds[i]], inAmounts[i]);\\n            if(tokenTypeId==4){\\n                // asign trackerIds only for tokenTypeId==4             \\n                if(sourceTrackerId>0){ \\n                    _updateTrackerSource(carbonTokens,\\n                        sourceTrackerId,tokenIds[i],inAmounts[i],outAmounts[i]);\\n                }\\n                trackerMappings.totalOut[tokenIds[i]] = _verifyTransferred(\\n                    trackerMappings.totalOut[tokenIds[i]], trackerData.trackee, \\n                    tokenIds[i], carbonTokens.outAmount[tokenIds[i]],outAmounts[i]); \\n\\n                _verifyTotalTracked(trackerMappings.totalOut[tokenIds[i]],\\n                    trackerMappings.totalTracked[tokenIds[i]]); \\n                // TO-DO how to prevent/resolve inconsistencies if attempting to\\n                // reduce tokenId totalOut after totalTracker has been increased?\\n            }else{\\n                // the following operations are for handing audited emissions and offset outputs\\n                if(sourceTrackerId>0){\\n                    // if user supplies a non-zero trackerId to this tokenId override\\n                    sourceTrackerId = 0;\\n                    // TO-DO: introduce a revert error (or event) to inform the user?\\n                    // sourceTrackerIds can only be assigned to tokenTypeId=4\\n                    // outgoing audited emission tokens are mapped using auditedTrackerIds \\n                    // outoging offset tokens are mapped using offsetTrackerId\\n                }\\n                if(tokenTypeId==3){\\n                    if(isVerifierApproved[msg.sender][trackerData.trackee]){\\n                        //_isAuditor(trackerData.trackerId);\\n                        // only auditor can assign audited emissions as outgoing carbon token\\n                        // TO-DO use trackerId and associated tx hahses as inputs for the Fabric\\n                        // emissions auditing channel\\n                        // In addition to issuing a retired audited emisison token to issuee\\n                        // the audited emission are tied to a the trackerId (asigned to auditor) as outgoing emssions\\n                        // TO-DO If the issuee is an industry that has volunteered to be tracked by the auditor\\n                        // a new trackerId could be issued with the audited emissions as an input\\n    \\n                        if(carbonTokens.outAmount[tokenIds[i]]>0){\\n                            trackerData.totalAudited = trackerData.totalAudited\\n                                .sub(carbonTokens.outAmount[tokenIds[i]]);\\n                        }\\n                        if(outAmounts[i]>0){\\n                            trackerData.totalAudited = \\n                                trackerData.totalAudited.add(outAmounts[i]);\\n                            auditedTrackerId[tokenIds[i]]=trackerData.trackerId;        \\n                        }else{\\n                            // if removing the outAmount delete the tracker mapping.\\n                            delete auditedTrackerId[tokenIds[i]];\\n                        }\\n                    }else{\\n                        // override outAmount to equal value already set by auditor\\n                        // TO-DO: introduce a revert error (or event) to inform the user?\\n                        outAmounts[i]=carbonTokens.outAmount[tokenIds[i]];\\n                    }\\n                }else if(tokenTypeId==2){\\n                    //To Do, set tracking data for offset credits\\n                }\\n            }   \\n            _updateTokenAmounts(carbonTokens,tokenIds[i],inAmounts[i],outAmounts[i]);\\n\\n            if(i==tokenIds.length-1 || sourceTrackerId!=trackerIds[i+1]){\\n                // before moving to the next tracker Id update the trackerIds array\\n                _updateTrackerId(sourceTrackerId, trackerMappings, \\n                    carbonTokens.tokenIds.length);\\n            }\\n        }\\n        require(trackerData.totalEmissions>=trackerData.totalAudited,\\n            \\\"CLM8::_track: total audited emission out is greater than total emissions tracked\\\");  \\n        emit TrackerUpdated(trackerData.trackerId,msg.sender,\\n            tokenIds,inAmounts,outAmounts,trackerIds);\\n    } \\n    /**\\n     * @dev verify and set data for carbon tokenId (tokenTypeId=4) linked to another trackerId\\n     * TO-DO can the owner of sourceTrackerId authorize who is tracking to it?\\n     * Note the tracker must have received and burnt/retired (_verifyRetired) \\n     * the same amount of carbon tokens. Is this enought to authorize who can reference sourceTrackerId \\n     * @param carbonTokens of active trackerId\\n     * @param sourceTrackerId to update\\n     * @param tokenId being tracked\\n     * @param inAmount of tokenId\\n     * @param outAmount of tokenId\\n    **/ \\n    function _updateTrackerSource(CarbonTokens storage carbonTokens, \\n        uint256 sourceTrackerId, uint256 tokenId, \\n        uint256 inAmount, uint256 outAmount) internal {\\n        // correct for previous amount assigned to the tokenId\\n        CarbonTrackerMappings storage sourceTracker = _trackerMappings[sourceTrackerId];\\n        if(carbonTokens.inAmount[tokenId]!=inAmount){\\n            if(carbonTokens.inAmount[tokenId]>0){\\n                sourceTracker.totalTracked[tokenId] = sourceTracker.totalTracked[tokenId]\\n                    .sub(carbonTokens.inAmount[tokenId]);\\n            }\\n            if(inAmount>0){\\n                sourceTracker.totalTracked[tokenId] = \\n                    sourceTracker.totalTracked[tokenId].add(inAmount);\\n            }\\n        }\\n        if(carbonTokens.outAmount[tokenId]!=outAmount){\\n            if(carbonTokens.outAmount[tokenId]>0){\\n                sourceTracker.totalTracked[tokenId] = sourceTracker.totalTracked[tokenId]\\n                   .sub(carbonTokens.outAmount[tokenId]);\\n                }\\n            if(outAmount>0){\\n                sourceTracker.totalTracked[tokenId] = \\n                    sourceTracker.totalTracked[tokenId].add(outAmount);\\n            }\\n        }\\n        _verifyTotalTracked(sourceTracker.totalOut[tokenId],\\n            sourceTracker.totalTracked[tokenId]);\\n    }\\n    /**\\n     * @dev update the token data within the Tacker\\n     * @param _tokenData to be updated \\n     * @param tokenId to be added/removed/modified in _tokenData\\n     * @param inAmount - amount of input tokenId\\n     * @param outAmount - amount of output tokenId\\n    **/\\n    function _updateTokenAmounts(CarbonTokens storage _tokenData, \\n        uint tokenId,uint inAmount,uint outAmount) internal {\\n        uint index = _tokenData.idIndex[tokenId];\\n        if(inAmount>0 || outAmount>0){\\n            // if the final amount is not zero check if the tokenId should be\\n            // added to the tokenIds array and update idAmount\\n            if(index==0){\\n                _tokenData.tokenIds.push(tokenId);\\n                _tokenData.idIndex[tokenId]=_tokenData.tokenIds.length;\\n            }\\n            _tokenData.inAmount[tokenId] = inAmount;\\n            _tokenData.outAmount[tokenId] = outAmount;  \\n        }else{\\n            // remove tokenId and associated data from tracker\\n            if (_tokenData.tokenIds.length > 1) {\\n                _tokenData.tokenIds[index-1] = \\n                    _tokenData.tokenIds[_tokenData.tokenIds.length-1];\\n                _tokenData.idIndex[_tokenData.tokenIds[index-1]]=index;\\n            }\\n            // index of tokenId should be deleted;\\n            delete _tokenData.idIndex[tokenId];\\n            delete _tokenData.inAmount[tokenId];\\n            delete _tokenData.outAmount[tokenId];\\n            //delete _tokenData.idAudit[tokenId]\\n            delete _tokenData.tokenIds[_tokenData.tokenIds.length-1];\\n        }\\n    }\\n    /**\\n     * @dev update the token data within the Tacker\\n     * @param trackerMappings to be modified with trackerId\\n     * @param tokenIdsLength number of tokenIds mapped to a trackerId\\n    **/\\n    function _updateTrackerId(uint256 trackerId,\\n        CarbonTrackerMappings storage trackerMappings, uint256 tokenIdsLength) internal  {\\n        uint index = trackerMappings.trackerIndex[trackerId];\\n        if(tokenIdsLength>0){\\n            // if there are tracked tokenIds    \\n            if(trackerId>0 && index==0){\\n                // if the trackerId is not indexed (default is 0) \\n                trackerMappings.trackerIds.push(trackerId);\\n                trackerMappings.trackerIndex[trackerId]\\n                    =trackerMappings.trackerIds.length;\\n            }\\n        }else{\\n            if(trackerId>0 && index>0){\\n                // if there are no tracked tokens (removed from tracker)\\n                // remove any non-zero trackerId from array, update indexing\\n                if (trackerMappings.trackerIds.length > 1) {\\n                    trackerMappings.trackerIds[index-1] = \\n                        trackerMappings.trackerIds[trackerMappings.trackerIds.length-1];\\n                    trackerMappings.trackerIndex[trackerMappings.trackerIds[index-1]]=index;\\n                }\\n                delete trackerMappings.trackerIndex[trackerId];\\n                delete trackerMappings.trackerIds[trackerMappings.trackerIds.length-1];\\n            }\\n            // and finally delete carbonToken data if \\n            delete trackerMappings.carbonTokens[trackerId];\\n        }\\n    }\\n    /**\\n     * @dev verify the amount of tokenId tracked as retired \\n     * @param trackee for the tokenId \\n     * @param tokenTypeId of the token being retired\\n     * @param amountOld previous amount retired\\n     * @param amountNew current amount to be retired\\n     * @param total amount of emission retired for this token Id. Also the @returns\\n    **/\\n    function _verifyRetired(uint tokenId, address trackee, uint total, \\n        uint8 tokenTypeId, uint amountOld, uint amountNew) internal returns(uint) {\\n        if(amountOld!=amountNew){\\n            //adjust existing _retiredBalances\\n            _retiredBalances[tokenId][trackee]\\n                 =_retiredBalances[tokenId][trackee].sub(amountOld);\\n            if(tokenTypeId>2){\\n                total = total.sub(amountOld);\\n            }else if(tokenTypeId==2){\\n                total = total.add(amountOld);\\n            }// REC does not change the total emissions\\n        }\\n        if(amountNew>0){\\n            _retiredBalances[tokenId][trackee]=\\n                _retiredBalances[tokenId][trackee].add(amountNew);\\n            if(tokenTypeId>2){ //add in emission\\n                total = total.add(amountNew);\\n            }else if(tokenTypeId==2){ //subtract out offset\\n                total = total.sub(amountNew);\\n                // TO-DO: custom error message?\\n            }// else REC does not change the total emissions\\n            require(\\n                net.getRetiredBalances(tokenId,trackee) >= _retiredBalances[tokenId][trackee], \\n                \\\"CLM8::_verifyRetired: the retired balance exceeds what has been reported in NET\\\"\\n            );\\n        }\\n        return total;\\n    }\\n    /**\\n     * @dev verify amount of tokenId listed as transferred (output)\\n     * @param totalOut tracked\\n     * @param tokenId being transfered\\n     * @param trackee transferring tokenId\\n     * @param amountOld previous balance listed transferred\\n     * @param amountNew current amount to listed as transferred\\n    **/\\n    function _verifyTransferred(uint totalOut, address trackee, uint tokenId, \\n        uint amountOld, uint amountNew) internal returns (uint256) {\\n        if(amountOld!=amountNew && amountOld>0){\\n            //adjust existing _transferredBalances for tokenTypeId 4\\n            _transferredBalances[tokenId][trackee]\\n                =_transferredBalances[tokenId][trackee].sub(amountOld);\\n            totalOut = totalOut.sub(amountOld); \\n        }\\n        if(amountNew>0){\\n            _transferredBalances[tokenId][trackee]\\n                =_transferredBalances[tokenId][trackee].add(amountNew);\\n            totalOut = totalOut.add(amountNew); \\n            require(\\n                net.getTransferredBalances(tokenId,trackee) >= _transferredBalances[tokenId][trackee], \\n                \\\"CLM8::_verifyTransferred: the transferred balance exceeds what has been reported in NET\\\"\\n            );\\n            emit VerifiedTransfer(tokenId,trackee,amountNew);\\n        }\\n        return totalOut;\\n    }\\n\\n    function audit(uint trackerId) \\n        public notAudited(trackerId) isAuditor(trackerId){\\n        _trackerData[trackerId].auditor=msg.sender;   \\n    }\\n\\n    function removeAudit(uint trackerId) public isAuditor(trackerId){\\n        delete _trackerData[trackerId].auditor;\\n    }\\n    /**\\n     * @dev msg.sender can volunteer themselves as registered tracker or admin\\n     */\\n    function registerTracker(address tracker) selfOrAdmin(tracker) external\\n    {\\n        _setupRole(REGISTERED_TRACKER, tracker);\\n        emit RegisteredTracker(tracker);\\n    }\\n    /**\\n     * @dev change trackee of trackerId\\n     * @param trackerId - id of token tp be changed\\n     */\\n    function changeTrackee(uint trackerId, address trackee) external \\n        onlyAdmin registeredTracker(trackee) trackerTokenkExists(trackerId){\\n        CarbonTrackerDetails storage trackerData = _trackerData[trackerId];\\n        trackerData.trackee = trackee;\\n        emit TrackeeChanged(trackerId,trackee);\\n    }    \\n    /**\\n     * @dev approve verifier for trackee as msg.sender\\n     * @param verifier to be approved or removed\\n     * @param approve (true) or remove (false)\\n     */\\n    function approveVerifier(address verifier,bool approve) \\n        external {\\n        require(\\n            net.isAuditor(verifier) || !approve,\\n            \\\"CLM8::approveVerifier: address is not a registered emissions auditor\\\"\\n        );\\n        require(verifier!=msg.sender,\\n            \\\"CLM8::approveVerifier: auditor cannot be msg.sender\\\"\\n        );\\n        isVerifierApproved[verifier][msg.sender]=approve;\\n        if(approve){\\n            emit VerifierApproved(verifier,msg.sender);\\n        }else{\\n            emit VerifierRemoved(verifier,msg.sender);\\n        }\\n    }\\n    uint private constant MAX_NESTED_TRACKERS = 257; // \\n    /**\\n     * These are public view functions\\n     * Warning: should never be called within functions that update the network to avoid excessive gas fees\\n    */\\n    // This struct stores the trackerIds used to calculate carbon intensity metircs\\n    // used to stop any circular referencing.\\n    // struct UsedTrackers {mapping(uint=>bool) trackerId;}\\n    function carbonIntensity(uint trackerId, uint8 tokenTypeId)\\n        public view returns (uint) {\\n        //UsedTrackers calldata trackerIds;\\n        uint[MAX_NESTED_TRACKERS] memory trackerIds;\\n        //UsedTrackers storage usedTrackerIds;\\n        return _carbonIntensity(trackerId,tokenTypeId,trackerIds);\\n    } \\n    /**\\n     * @dev measure the carbon intensity of a tracker NFT. \\n     *      This is a recursive function that cycle through all previous trackerIds\\n     * @param trackerId to measure\\n     * @param tokenTypeId measure total carbonIntensity of tracker token for tokenTypeId outputs (2. offset credits, audited emission certificates, carbon tracker tokens)\\n    */\\n    function _carbonIntensity(uint trackerId, uint8 tokenTypeId, uint[MAX_NESTED_TRACKERS] memory usedTrackerIds) \\n        public view returns (uint) {\\n        //uint decimals = 1000000; // decimals used to calculate the final intensity metric (i.e., divide integer by this amount)\\n        \\n        if(trackerId==0){if(tokenTypeId==3){return 1000000;}else{return 0;}}\\n        // the carbon intensity of:\\n        //      - untracked audited emission certificate inputs = 1 (scaled by 1000000)\\n        //      - untracked burnt carbon offsets/tracker token inputs = 0\\n        CarbonTrackerDetails storage trackerData = _trackerData[trackerId];\\n        CarbonTrackerMappings storage trackerMappings = _trackerMappings[trackerId];\\n        \\n        uint total;//= trackerData.totalEmissions;\\n        uint outEmbedded; // embedded emissions associated with all outgoing CarbonTracker token amounts\\n        uint denominator; // of the carbon intensity metric\\n        uint offsets;\\n        //uint inAmount;\\n        //uint outAmount;\\n        uint ci;\\n        uint8 _tokenTypeId; \\n        // start by calculating carbon intensity for tokenIds mapped to the \\n        // default trackerId 0 (no trackerId assigned).\\n        trackerId = 0; \\n        CarbonTokens storage carbonTokens = trackerMappings.carbonTokens[trackerId];\\n        for(uint i = 0; i <= trackerMappings.trackerIds.length; i++){\\n            // Will only calculate embedded emisisons upto MAX_NESTED_TRACKERS\\n            // Dont loop over tokens tracked back to previous tokenId (will cause recursive loop) \\n            if(usedTrackerIds[usedTrackerIds.length-1]!=MAX_NESTED_TRACKERS \\n                || contains(usedTrackerIds,trackerMappings.trackerIds[i])\\n                ){\\n                // trackerId and carbonTokens updated at the end of loop\\n                for (uint j = 0; j < carbonTokens.tokenIds.length; j++) {\\n                    /*if(trackerId>0){\\n                        //There is no need to verifyTotalTracked. This is done in \\n                        //this is currenlty handled in _track() function afer\\n                        _verifyTotalTracked(\\n                            _trackerData[trackerId].carbonTokens.outAmount[tokenId],\\n                            _trackerData[trackerId].totalTracked[tokenId]);\\n                    } */\\n                    _tokenTypeId = net.getTokenTypeId(carbonTokens.tokenIds[j]);\\n                    //inAmount = carbonTokens.inAmount[carbonTokens.tokenIds[j]]\\n                    //    .mul(1000000);\\n                    //outAmount = carbonTokens.outAmount[carbonTokens.tokenIds[j]]\\n                    //    .mul(1000000);\\n                    if(_tokenTypeId==4){\\n                        ci = _carbonIntensity(trackerId,_tokenTypeId,usedTrackerIds);\\n                        total = total.add(carbonTokens.inAmount[carbonTokens.tokenIds[j]]\\n                            .mul(1000000));\\n                        outEmbedded=outEmbedded.add(carbonTokens.outAmount[carbonTokens.tokenIds[j]]\\n                            .mul(1000000).mul(ci).div(1000000));\\n                        denominator = denominator.add(\\n                            carbonTokens.outAmount[carbonTokens.tokenIds[j]]);\\n                    }else if(_tokenTypeId==3){\\n                        if(carbonTokens.outAmount[carbonTokens.tokenIds[j]]==0){\\n                            ci = _carbonIntensity(\\n                                auditedTrackerId[carbonTokens.tokenIds[j]],\\n                                _tokenTypeId,\\n                                usedTrackerIds);\\n                        }else{\\n                            // audited emissions out will always point back to the the tracker id\\n                            // set ci to 1, otherwise will enter recursive loop.\\n                            ci = 1000000;\\n                        }\\n                    }else if(_tokenTypeId==2){\\n                        // TO-DO setup how we handle offset tokens\\n                        ci = _carbonIntensity(\\n                            offsetTrackerId[carbonTokens.tokenIds[j]],\\n                            _tokenTypeId,\\n                            usedTrackerIds);\\n                        total = total.sub(carbonTokens.inAmount[carbonTokens.tokenIds[j]]\\n                            .mul(1000000));\\n                        offsets = offsets.add(carbonTokens.outAmount[carbonTokens.tokenIds[j]]);\\n                    }\\n                    total = total.add(carbonTokens.inAmount[carbonTokens.tokenIds[j]]\\n                        .mul(1000000).mul(ci).div(1000000));              \\n                }\\n            }\\n            if(i<trackerMappings.trackerIds.length){\\n                trackerId = trackerMappings.trackerIds[i];\\n                //usedTrackerIds.push(trackerId);\\n                usedTrackerIds[usedTrackerIds.length-1] = usedTrackerIds[usedTrackerIds.length-1].add(1);\\n                usedTrackerIds[usedTrackerIds[usedTrackerIds.length-1]]=trackerId;\\n                carbonTokens = trackerMappings.carbonTokens[trackerId];\\n            }\\n        }\\n        if(tokenTypeId==2 && offsets>0){\\n            return(total.div(offsets));\\n        }\\n        if(denominator==0){\\n            if(tokenTypeId==3 && trackerData.totalAudited>0){\\n                return total.div(trackerData.totalAudited);\\n            }\\n            // if deonminator ==0 there can be no tracked typeID==4 \\n        }else{\\n            if(tokenTypeId==3){\\n                return total.div(trackerData.totalEmissions);\\n            }else if(tokenTypeId==4 && trackerData.totalEmissions>0){\\n                total = total.add(outEmbedded).sub(\\n                    trackerData.totalAudited.mul(total.div(trackerData.totalEmissions))\\n                );\\n            }\\n        // subtract out the total embodied emission tied to outgoing \\n        // audited emission certificates\\n        // TO-DO: GAMING OPPORTUNITY\\n        // auditor could be paid to issue fake emission certificats on tracker\\n        // to reduce the reportec carbon intensity rating of outgoing carbon tracker tokens\\n            return(total.div(denominator));\\n        } \\n        return(0);  \\n    }\\n    function contains(uint[MAX_NESTED_TRACKERS] memory usedTrackerIds, uint trackerId) internal pure returns(bool){\\n        for (uint i = 0; i < usedTrackerIds.length-1; i++) {\\n            // the last array element is the last index stored\\n            if(usedTrackerIds[i]==trackerId){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev returns number of unique trackers\\n     */\\n    function getNumOfUniqueTrackers() public view returns (uint256) {\\n        return _numOfUniqueTrackers.current();\\n    }\\n    /**\\n     * @dev returns the details of a given tokenId\\n     * @param trackerId token to check\\n     */\\n    function getTrackerDetails(uint256 trackerId)\\n        external\\n        view\\n        returns (\\n            CarbonTrackerDetails memory)\\n    {\\n        return (_trackerData[trackerId]);\\n    }\\n    function getTrackerIds(uint trackerId) public view returns(uint[] memory) {\\n        return (_trackerMappings[trackerId].trackerIds);\\n    }\\n    function getTokenIds(uint trackerId, uint sourceTrackerId) \\n        public view returns(uint[] memory, uint) {\\n        return ( _trackerMappings[trackerId].carbonTokens[sourceTrackerId].tokenIds,\\n                 _trackerMappings[trackerId].trackerIndex[sourceTrackerId]);\\n    }\\n    function getTokenIdOut(uint trackerId, uint tokenId) \\n        public view returns(uint, uint) {\\n        return ( _trackerMappings[trackerId].totalOut[tokenId],\\n                 _trackerMappings[trackerId].totalTracked[tokenId]);\\n    }\\n    function getTokenIdAmounts(uint trackerId, uint sourceTrackerId, uint tokenId) \\n        public view returns(uint, uint){\\n            CarbonTokens storage carbonTokens = \\n                _trackerMappings[trackerId].carbonTokens[sourceTrackerId];\\n            return( carbonTokens.inAmount[tokenId],\\n                    carbonTokens.outAmount[tokenId]);\\n        }\\n    function getTokenAmounts(uint trackerId, uint sourceTrackerId) \\n        public view returns(uint[] memory,uint[] memory, uint[] memory) {\\n        CarbonTrackerMappings storage trackerMappings = _trackerMappings[trackerId];\\n        CarbonTokens storage carbonTokens;\\n        carbonTokens = trackerMappings.carbonTokens[sourceTrackerId];\\n        uint[] memory tokenIds = carbonTokens.tokenIds;\\n        uint[] memory inAmounts = new uint[](tokenIds.length);\\n        uint[] memory outAmounts = new uint[](tokenIds.length);\\n        for (uint j = 0; j < tokenIds.length; j++) {\\n            inAmounts[j]=carbonTokens.inAmount[tokenIds[j]];\\n            outAmounts[j]=carbonTokens.outAmount[tokenIds[j]];\\n        }\\n        return (tokenIds,inAmounts,outAmounts);\\n    }\\n}\",\"keccak256\":\"0x818951f645a359288e20db0a8570278118409b67b426680b30bd08773646da82\",\"license\":\"Apache-2.0\"},\"contracts/NetEmissionsTokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\ncontract NetEmissionsTokenNetwork is Initializable, ERC1155Upgradeable, AccessControlUpgradeable {\\n\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using ECDSAUpgradeable for bytes32;\\n    using ECDSAUpgradeable for address;\\n\\n    bool public limitedMode;  // disables some features like arbitrary token transfers and issuing without proposals\\n    address public admin;     // address that has permission to register dealers, transfer in limitedMode, etc.\\n    address private timelock; // DAO contract that executes proposals to issue tokens after a successful vote\\n\\n    // Generic dealer role for registering/unregistering consumers\\n    bytes32 public constant REGISTERED_DEALER =\\n        keccak256(\\\"REGISTERED_DEALER\\\");\\n    // Token type specific roles\\n    bytes32 public constant REGISTERED_REC_DEALER =\\n        keccak256(\\\"REGISTERED_REC_DEALER\\\");\\n    bytes32 public constant REGISTERED_OFFSET_DEALER =\\n        keccak256(\\\"REGISTERED_OFFSET_DEALER\\\");\\n    bytes32 public constant REGISTERED_EMISSIONS_AUDITOR =\\n        keccak256(\\\"REGISTERED_EMISSIONS_AUDITOR\\\");\\n    // Consumer role\\n    bytes32 public constant REGISTERED_CONSUMER =\\n        keccak256(\\\"REGISTERED_CONSUMER\\\");\\n    // Industry role (voluntary/nominate)\\n    bytes32 public constant REGISTERED_INDUSTRY =\\n        keccak256(\\\"REGISTERED_INDUSTRY\\\");\\n    // Registered Industry Dealer (admin assignment)\\n    bytes32 public constant REGISTERED_INDUSTRY_DEALER =\\n        keccak256(\\\"REGISTERED_INDUSTRY_DEALER\\\");\\n\\n    /**\\n     * @dev Structure of all tokens issued in this contract\\n     * tokenId - Auto-increments whenever new tokens are issued\\n     * tokenTypeId - Corresponds to the three token types:\\n     *   1 => Renewable Energy Certificate\\n     *   2 => Carbon Emissions Offset\\n     *   3 => Audited Emissions\\n     *   4 => Carbon Tracker tokens (traded, burnt or stored fuel/feed stock)\\n     *   TO-DO define carbon tracker storage transactions (i.e. captured CO2 management) \\n     * issuer - Address of dealer issuing this token\\n     * issuee - Address of original issued recipient this token\\n     * fromDate - Unix timestamp\\n     * thruDate - Unix timestamp\\n     * dateCreated - Unix timestamp\\n     * automaticRetireDate - Unix timestamp\\n     */\\n    struct CarbonTokenDetails {\\n        uint256 tokenId;\\n        uint8 tokenTypeId;\\n        address issuer;\\n        address issuee;\\n        uint256 fromDate;\\n        uint256 thruDate;\\n        uint256 dateCreated;\\n        uint256 automaticRetireDate;\\n        string metadata;\\n        string manifest;\\n        string description;\\n        uint256 totalIssued;\\n        uint256 totalRetired;\\n    }\\n\\n\\n    // Counts number of unique token IDs (auto-incrementing)\\n    CountersUpgradeable.Counter private _numOfUniqueTokens;\\n\\n    // Token metadata and retired balances\\n    mapping(uint256 => CarbonTokenDetails) private _tokenDetails;\\n    mapping(uint256 => mapping(address => uint256)) private _retiredBalances;\\n    mapping(uint256 => mapping(address => uint256)) private _transferredBalances;\\n\\n    // Nonce for tokeTypeId 4 transfer from => to account\\n    mapping(address => mapping(address => uint32)) private carbonTransferNonce;\\n\\n    // Events\\n    event TokenCreated(\\n        uint256 availableBalance,\\n        uint256 retiredBalance,\\n        uint256 tokenId,\\n        uint8 tokenTypeId,\\n        address indexed issuer,\\n        address indexed issuee,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 dateCreated,\\n        uint256 automaticRetireDate,\\n        string metadata,\\n        string manifest,\\n        string description\\n    );\\n    event TokenRetired(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event RegisteredConsumer(address indexed account);\\n    event UnregisteredConsumer(address indexed account);\\n    event RegisteredDealer(address indexed account);\\n    event UnregisteredDealer(address indexed account);\\n    event RegisteredIndustry(address indexed account);\\n    event UnregisteredIndustry(address indexed account);\\n\\n    // Replaces constructor in OpenZeppelin Upgrades\\n    function initialize(address _admin) public initializer {\\n\\n        __ERC1155_init(\\\"\\\");\\n\\n        // Allow dealers to register consumers\\n        _setRoleAdmin(REGISTERED_CONSUMER, REGISTERED_DEALER);\\n\\n        // Set-up admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(REGISTERED_DEALER, _admin);\\n        _setupRole(REGISTERED_REC_DEALER, _admin);\\n        _setupRole(REGISTERED_OFFSET_DEALER, _admin);\\n        _setupRole(REGISTERED_EMISSIONS_AUDITOR, _admin);\\n        _setupRole(REGISTERED_INDUSTRY_DEALER, _admin);\\n        _setupRole(REGISTERED_INDUSTRY, _admin);\\n        admin = _admin;\\n\\n        // initialize\\n        timelock = address(0);\\n\\n        limitedMode = false;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::onlyAdmin: msg.sender not the admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier consumerOrDealer(address from,address to) {\\n        if(from!=address(0)){\\n            // if not minting require sender to be consumerOrDealer \\n            require(_consumerOrDealer(from),\\n                \\\"CLM8::consumerOrDealer: sender not a consumer or a dealer\\\");\\n        }\\n        if(to!=address(0)){\\n            // if not burning require receiver is consumerOrDealer \\n            require(_consumerOrDealer(to),\\n                \\\"CLM8::consumerOrDealer: recipient must be consumer, dealer or industry\\\"); \\n        }\\n        _;\\n    }\\n\\n    modifier onlyDealer() {\\n        _onlyDealer();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if hasRole of dealer\\n     */\\n    function _onlyDealer() internal view {\\n        /*\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, msg.sender);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, msg.sender);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender);\\n        bool isInDealer = hasRole(REGISTERED_INDUSTRY_DEALER, msg.sender);\\n        */\\n        require(\\n            //hasRole(REGISTERED_REC_DEALER, msg.sender) ||\\n            //hasRole(REGISTERED_OFFSET_DEALER, msg.sender) ||\\n            //hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender) ||\\n            //hasRole(REGISTERED_INDUSTRY_DEALER, msg.sender) ||\\n            // the below will achieve the same as the above\\n            hasRole(REGISTERED_DEALER,msg.sender) || \\n            // REGISTERED_INDSUTRY are considered dealers of carbon tokens\\n            // but have not be assigned REGISTERED_DEALER role by admin\\n            hasRole(REGISTERED_INDUSTRY,msg.sender),\\n            \\\"CLM8::onlyDealer: msg.sender not a dealer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns `true` if hasRole of dealer, industry or consumer\\n     */\\n    function _consumerOrDealer(address entity) public view returns (bool) {\\n        // check for one role and return if true if true\\n        // before checking the next to minimize gas\\n        if(hasRole(REGISTERED_DEALER, entity) ||\\n           hasRole(REGISTERED_CONSUMER, entity) ||\\n           hasRole(REGISTERED_INDUSTRY, entity) \\n        ) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if transfer has been approved by to address\\n     * reconstruct transferHash and check that it matches the signature\\n     */\\n    function verifySignature(\\n        bytes32 msgHash,\\n        bytes memory signature,\\n        address signer\\n    ) public pure returns (bool){   \\n        bytes32 ethSignedMessageHash = msgHash.toEthSignedMessageHash();\\n        return ethSignedMessageHash.recover(signature)==signer;\\n    }\\n    /**\\n     * @dev Returns keccak256 hash of transaction request\\n     * including next available nonce for transfer from -> to addresses\\n     */\\n    function getTransferHash(\\n        address _from, \\n        address _to, \\n        uint256[] memory _ids, \\n        uint256[] memory _amounts\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_from, _to, _ids, _amounts, carbonTransferNonce[_from][_to]+1));\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenId exists\\n     */\\n    function tokenExists(uint256 tokenId) private view returns (bool) {\\n        if (_numOfUniqueTokens.current() >= tokenId) return true;\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenTypeId is valid\\n     */\\n    function tokenTypeIdIsValid(uint8 tokenTypeId) pure private returns (bool) {\\n        if ((tokenTypeId > 0) && (tokenTypeId <= 4)) {\\n            return true;\\n        }\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns number of unique tokens\\n     */\\n    function getNumOfUniqueTokens() public view returns (uint256) {\\n        return _numOfUniqueTokens.current();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual \\n        override(ERC1155Upgradeable,AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev hook to prevent transfers from non-admin account if limitedMode is on\\n     * @param data signature of getTransferHash() for transfer of carbon token type (id=4)\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override\\n        consumerOrDealer(from,to)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        \\n        // TO-DO this could be set as a modifier ...\\n        require((from != to), \\\"CLM8::_beforeTokenTransfer: sender and receiver cannot be the same\\\");\\n        bool approveCarbon; // bool if we need to approve the transfer of carbon tokens\\n        for (uint i = 0; i < ids.length; i++) {\\n\\n            CarbonTokenDetails storage token = _tokenDetails[ids[i]];\\n            // disable most transfers if limitedMode is on\\n            if (limitedMode) {\\n\\n                // allow retiring/burning one's tokens\\n                if (to == address(0)) {\\n                    continue;\\n                }\\n\\n                // for tokenType 1 and 2, only the timelock and DAO can transfer/issue\\n                // for tokenType 3, only emissions auditors can transfer/issue\\n                // (and they are automatically retired right after)\\n                if (token.tokenTypeId == 1 || token.tokenTypeId == 2 ) {\\n                    require(\\n                        operator == timelock || hasRole(DEFAULT_ADMIN_ROLE, operator),\\n                        \\\"CLM8::_beforeTokenTransfer(limited): only admin and DAO can transfer tokens\\\"\\n                    );\\n                } else if (token.tokenTypeId == 3) {\\n                    require(\\n                        hasRole(REGISTERED_EMISSIONS_AUDITOR, operator),\\n                        \\\"CLM8::_beforeTokenTransfer(limited): only emissions auditors can issue audited emissions\\\"\\n                    );\\n                }\\n            }\\n            // for tokenType 4, any authorized operator can\\n            // issue (from == address(0)) or\\n            // burn/retire (to == address(0))\\n            // otherwise require receiver (to address) to have approved (signed) the transferHash\\n            if(token.tokenTypeId == 4 && to != address(0) && from != address(0)) {\\n                approveCarbon = false;//true;\\n                // TO-DO: drop internal approval of carbon transfers?\\n                // voluntary carbon tracker token can be sent to anyone to use in the C-NFT\\n                // they can be sent without approval inviting the receiver to track them to their NFT\\n                // accumulate total transferred balances (not minted or burnt)\\n                _transferredBalances[token.tokenId][from] =\\n                    _transferredBalances[token.tokenId][from].add(amounts[i]);\\n            }\\n\\n        }\\n        if(approveCarbon){\\n            bytes32 messageHash = getTransferHash(from,to,ids,amounts);\\n            require(\\n                verifySignature(messageHash, data, to),\\n                \\\"CLM8::_beforeTokenTransfer: receiver's approval signature is not valid\\\"\\n            );\\n            //increment the nonce once transaction has been confirmed\\n            carbonTransferNonce[from][to]++;\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev External function to mint an amount of a token\\n     * Only authorized dealer of associated token type can call this function\\n     * @param quantity of the token to mint For ex: if one needs 100 full tokens, the caller\\n     * should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\\n     */\\n    function issue(\\n        address issuee,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 automaticRetireDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public onlyDealer {\\n        return _issue(\\n            issuee,\\n            msg.sender,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            automaticRetireDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    /**\\n     * @dev Issue function for DAO (on limited mode) or admin to manually pass issuer\\n     * Must be called from Timelock contract through a successful proposal\\n     * or by admin if limited mode is set to false\\n     */\\n    function issueOnBehalf(\\n        address issuee,\\n        address issuer,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 automaticRetireDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public {\\n\\n        require(\\n            (msg.sender == timelock) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::issueOnBehalf: call must come from DAO or admin\\\"\\n        );\\n\\n        return _issue(\\n            issuee,\\n            issuer,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            automaticRetireDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    function _issue(\\n        address _issuee,\\n        address _issuer,\\n        uint8 _tokenTypeId,\\n        uint256 _quantity,\\n        uint256 _fromDate,\\n        uint256 _thruDate,\\n        uint256 _automaticRetireDate,\\n        string memory _metadata,\\n        string memory _manifest,\\n        string memory _description\\n    ) internal {\\n\\n        require(\\n            tokenTypeIdIsValid(_tokenTypeId),\\n            \\\"CLM8::_issue: tokenTypeId is invalid\\\"\\n        );\\n\\n        if (limitedMode) {\\n            if (_tokenTypeId == 1 || _tokenTypeId == 2 ) {\\n                require(\\n                    msg.sender == timelock,\\n                    \\\"CLM8::_issue(limited): msg.sender not timelock\\\"\\n                );\\n                require(\\n                    hasRole(DEFAULT_ADMIN_ROLE, _issuee),\\n                    \\\"CLM8::_issue(limited): issuee not admin\\\"\\n                );\\n                require(\\n                    hasRole(REGISTERED_REC_DEALER, _issuer) || hasRole(REGISTERED_OFFSET_DEALER, _issuer),\\n                    \\\"CLM8::_issue(limited): proposer not a registered dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 3) {\\n                require(\\n                    hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuer),\\n                    \\\"CLM8::_issue(limited): issuer not a registered emissions auditor\\\"\\n                );\\n            }\\n        } else {\\n            if (_tokenTypeId == 1) {\\n                require(\\n                    hasRole(REGISTERED_REC_DEALER, _issuer),\\n                    \\\"CLM8::_issue: issuer not a registered REC dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 2) {\\n                require(\\n                    hasRole(REGISTERED_OFFSET_DEALER, _issuer),\\n                    \\\"CLM8::_issue: issuer not a registered offset dealer\\\"\\n                );\\n            } else if (_tokenTypeId == 3) {\\n                require(\\n                    hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuer),\\n                    \\\"CLM8::_issue: issuer not a registered emissions auditor\\\"\\n                );\\n            }\\n        }\\n        // TO-DO: Define limited mode for tokenTypeId 4?\\n        if (_tokenTypeId == 4) {\\n            require(\\n                hasRole(REGISTERED_INDUSTRY, _issuer),\\n                \\\"CLM8::_issue: issuer not a registered industry\\\"\\n            );\\n            require(\\n                msg.sender == _issuee,\\n                \\\"CLM8::_issue: registered industry can only issue carbon to itself\\\"\\n            );\\n        } \\n\\n        // increment token identifier\\n        _numOfUniqueTokens.increment();\\n\\n        // create token details\\n        CarbonTokenDetails storage tokenInfo = _tokenDetails[_numOfUniqueTokens.current()];\\n\\n        tokenInfo.tokenId = _numOfUniqueTokens.current();\\n        tokenInfo.tokenTypeId = _tokenTypeId;\\n        tokenInfo.issuee = _issuee;\\n        tokenInfo.issuer = _issuer;\\n        tokenInfo.fromDate = _fromDate;\\n        tokenInfo.thruDate = _thruDate;\\n        tokenInfo.automaticRetireDate = _automaticRetireDate;\\n        tokenInfo.dateCreated = block.timestamp;\\n        tokenInfo.metadata = _metadata;\\n        tokenInfo.manifest = _manifest;\\n        tokenInfo.description = _description;\\n        tokenInfo.totalIssued = _quantity;\\n        tokenInfo.totalRetired = uint256(0);\\n\\n        super._mint(_issuee, _numOfUniqueTokens.current(), _quantity, \\\"\\\");\\n\\n        // retire audited emissions on mint\\n        if (_tokenTypeId == 3) {\\n            _retire(tokenInfo.issuee, tokenInfo.tokenId, _quantity);\\n        }\\n\\n        // emit event with all token details and balances\\n        emit TokenCreated(\\n            _quantity,\\n            _retiredBalances[tokenInfo.tokenId][tokenInfo.issuee],\\n            tokenInfo.tokenId,\\n            tokenInfo.tokenTypeId,\\n            tokenInfo.issuer,\\n            tokenInfo.issuee,\\n            tokenInfo.fromDate,\\n            tokenInfo.thruDate,\\n            tokenInfo.dateCreated,\\n            tokenInfo.automaticRetireDate,\\n            tokenInfo.metadata,\\n            tokenInfo.manifest,\\n            tokenInfo.description\\n        );\\n    }\\n\\n    /**\\n     * @dev mints more of an existing token\\n     * @param to reciepient of token\\n     * @param tokenId token to mint more of\\n     * @param quantity amount to mint\\n     */\\n     // To DO - this will increase _balances of to account\\n     // but will not update the totalIssued ?\\n    function mint(address to, uint256 tokenId, uint256 quantity)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::mint: tokenId does not exist\\\");\\n        require(!limitedMode, \\\"CLM8::mint: cannot mint new tokens in limited mode\\\");\\n        super._mint(to, tokenId, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev returns the token name for the given token as a string value\\n     * @param tokenId token to check\\n     */\\n    function getTokenType(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenType: tokenId does not exist\\\");\\n        CarbonTokenDetails storage token = _tokenDetails[tokenId];\\n\\n        if (token.tokenTypeId == 1) {\\n            return \\\"Renewable Energy Certificate\\\";\\n        } else if (token.tokenTypeId == 2) {\\n            return \\\"Carbon Emissions Offset\\\";\\n        } else if (token.tokenTypeId == 3) {\\n            return \\\"Audited Emissions\\\";\\n        } else if (token.tokenTypeId == 4) {\\n            return \\\"Carbon Tracker\\\";\\n        } else {\\n            return \\\"Token does not exist\\\";\\n        }\\n    }\\n    function getTokenTypeId(uint tokenId) external view returns(uint8){\\n        return _tokenDetails[tokenId].tokenTypeId;\\n    }\\n    function getRetiredBalances(uint tokenId, address account) \\n        external view returns(uint){\\n        return _retiredBalances[tokenId][account];\\n    }\\n    function getTransferredBalances(uint tokenId, address account) \\n        external view returns(uint){\\n        return _transferredBalances[tokenId][account];\\n    }\\n\\n    /**\\n     * @dev returns the retired amount on a token\\n     * @param tokenId token to check\\n     */\\n    function getTokenRetiredAmount(address account, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenRetiredAmount: tokenId does not exist\\\");\\n        uint256 amount = _retiredBalances[tokenId][account];\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev sets the token to the retire state to disable transfers, mints and burns\\n     * @param tokenId token to set in pause state\\n     *   Only contract owner can pause or resume tokens\\n     */\\n    function retire(\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external consumerOrDealer(msg.sender,address(0)) {\\n        require(tokenExists(tokenId), \\\"CLM8::retire: tokenId does not exist\\\");\\n        // TO-DO do we need this require statement? super._burn sub() will require this ...\\n        require( (amount <= super.balanceOf(msg.sender, tokenId)), \\\"CLM8::retire: not enough available balance to retire\\\" );\\n\\n        _retire(msg.sender, tokenId, amount);\\n        emit TokenRetired(\\n            msg.sender,\\n            tokenId,\\n            amount\\n        );\\n    }\\n\\n    function _retire(\\n        address _address,\\n        uint256 tokenId,\\n        uint256 _quantity\\n    ) internal {\\n        super._burn(_address, tokenId, _quantity);\\n        _tokenDetails[tokenId].totalRetired = _tokenDetails[tokenId].totalRetired.add(_quantity);\\n        _retiredBalances[tokenId][_address] = _retiredBalances[tokenId][_address].add(_quantity);\\n    }\\n\\n\\n    /**\\n     * @dev returns true if Dealer's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isDealerRegistered(address account) public view returns (bool) {\\n        if (hasRole(REGISTERED_REC_DEALER, account) ||\\n            hasRole(REGISTERED_OFFSET_DEALER, account) ||\\n            hasRole(REGISTERED_EMISSIONS_AUDITOR, account) ||\\n            hasRole(REGISTERED_INDUSTRY_DEALER, account) \\n        ) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isConsumerRegistered(address account) public view returns (bool) {\\n        return hasRole(REGISTERED_CONSUMER, account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's or Dealer's account is registered\\n     * @param account address of the consumer/dealer\\n     */\\n    function isRegisteredDealerOrConsumer(address account) private view returns (bool) {\\n        return (isDealerRegistered(account) || isConsumerRegistered(account));\\n    }\\n\\n    /**\\n     * @dev Helper function for returning tuple of bools of role membership\\n     * @param account address to check roles\\n     */\\n    function getRoles(address account) external view returns (bool, bool, bool, bool, bool, bool) {\\n        bool isAdmin = hasRole(DEFAULT_ADMIN_ROLE, account);\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, account);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, account);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        bool isIndustry = hasRole(REGISTERED_INDUSTRY, account);\\n        bool isConsumer = hasRole(REGISTERED_CONSUMER, account);\\n        return (isAdmin, isRecDealer, isCeoDealer, isAeDealer, isIndustry, isConsumer);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can register Dealers\\n     * @param account address of the dealer to register\\n     */\\n    function registerDealer(address account, uint8 tokenTypeId)\\n        public\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::registerDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            grantRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            grantRole(REGISTERED_OFFSET_DEALER, account);\\n        } else if (tokenTypeId == 3){\\n            grantRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        } else if (tokenTypeId == 4) {\\n            grantRole(REGISTERED_INDUSTRY, account);\\n            grantRole(REGISTERED_INDUSTRY_DEALER, account);\\n        }\\n        // Also grant generic dealer role for registering/unregistering dealer\\n        grantRole(REGISTERED_DEALER, account);\\n        emit RegisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev msg.sender can volunteer themselves as registered industry\\n     * or other registered dealer can register Industry\\n     */\\n    function registerIndustry(address account) external\\n    {\\n        if(msg.sender != account){\\n            // only dealer can register industry\\n            _onlyDealer();\\n        }\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::registerIndustry(limited): only admin can register industries\\\");\\n        }\\n        _setupRole(REGISTERED_INDUSTRY, account);\\n        emit RegisteredIndustry(account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumer's account is registered for the given token\\n     * @param account address of the consumer\\n     */\\n    function registerConsumer(address account) external onlyDealer {\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::registerConsumer(limited): only admin can register consumers\\\");\\n        }\\n        grantRole(REGISTERED_CONSUMER, account);\\n        emit RegisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Dealers\\n     * @param account address to be unregistered\\n     */\\n    function unregisterDealer(address account, uint8 tokenTypeId)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::unregisterDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            super.revokeRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            super.revokeRole(REGISTERED_OFFSET_DEALER, account);\\n        } else if (tokenTypeId == 3) {\\n            super.revokeRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        } else if (tokenTypeId == 4) {\\n            super.revokeRole(REGISTERED_INDUSTRY_DEALER, account);\\n        }\\n        // If no longer a dealer of any token type, remove generic dealer role\\n        if (!isDealerRegistered(account)) {\\n            revokeRole(REGISTERED_DEALER, account);\\n        }\\n\\n        emit UnregisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Consumers\\n     * TO-DO clarify the above - function allows any Dealer to unregister consumers.\\n     * Why would we need to unregister consumers?\\n     * @param account address to be unregistered\\n     */\\n    function unregisterConsumer(address account) external onlyDealer {\\n        if (limitedMode) {\\n            require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"CLM8::unregisterConsumer(limited): only admin can unregister consumers\\\");\\n        }\\n        super.revokeRole(REGISTERED_CONSUMER, account);\\n        emit UnregisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev transfers the value to the 'to' account for tokenId\\n     * @param to recipient address\\n     * @param tokenId tokenId for the transfer\\n     * @param value amount of transfer\\n     * Transfer can start only when both parties are registered and the token is not paused\\n     * Note: Token holders can arbitrarily call safeTransferFrom() without these checks\\n     * The requires commented out below have been moved to _beforeTokenTransfer hook\\n     * so that they are always applied to safeTransferFrom (or safeBatch...)      \\n     */\\n    function transfer(\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        require(tokenExists(tokenId), \\\"CLM8::transfer: tokenId does not exist\\\");\\n\\n        /*\\n        require((msg.sender != to), \\\"CLM8::transfer: sender and receiver cannot be the same\\\");\\n        receiver must be Consumer or Dealer or Industry\\n        require(\\n            hasRole(REGISTERED_CONSUMER, to) || \\n            hasRole(REGISTERED_DEALER, to) || \\n            hasRole(REGISTERED_INDUSTRY, to),\\n            \\\"CLM8::transfer: Recipient must be consumer, industry, or dealer\\\"\\n        ); */\\n        super.safeTransferFrom(msg.sender, to, tokenId, value, '0x00');\\n    }\\n\\n    function setTimelock(\\n        address _timelock\\n    ) external onlyAdmin {\\n        timelock = _timelock;\\n    }\\n\\n    function getAvailableAndRetired(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 available = super.balanceOf(account, tokenId);\\n        uint256 retired = this.getTokenRetiredAmount(account, tokenId);\\n        return (available, retired);\\n    }\\n    function getAvailableRetiredAndTransferred(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        uint256 available;\\n        uint256 retired;\\n        (available,retired) = this.getAvailableAndRetired(account, tokenId);\\n        uint256 transferred = _transferredBalances[tokenId][account];\\n        return (available, retired, transferred);\\n    }\\n\\n    /**\\n     * @dev returns issuer of a given tokenId\\n     */\\n    function getIssuer(uint256 tokenId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _tokenDetails[tokenId].issuer;\\n    }\\n\\n    /**\\n     * @dev returns the details of a given tokenId, omitting holders\\n     * @param tokenId token to check\\n     */\\n    function getTokenDetails(uint256 tokenId)\\n        external\\n        view\\n        returns (CarbonTokenDetails memory)\\n    {\\n        return _tokenDetails[tokenId];\\n    }\\n\\n    /**\\n     * @dev turns off or on limited mode\\n     * @param _limitedMode boolean value\\n     */\\n    function setLimitedMode(bool _limitedMode)\\n        external\\n        onlyAdmin\\n    {\\n        limitedMode = _limitedMode;\\n    }\\n\\n    function isAuditor(address auditor) view external returns (bool) {\\n        return hasRole(REGISTERED_EMISSIONS_AUDITOR, auditor);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x175746f0388ca50254dad5f80c5bf4f11abb71213f04c0eaf3ff232987d1f292\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506152f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80639042a3c711610146578063b88d4fde116100c3578063d547741f11610087578063d547741f146105b9578063d82de424146105cc578063d97ac445146105ed578063db600be514610600578063e985e9c514610646578063ecc3356a1461068257610253565b8063b88d4fde14610502578063b9531f2114610515578063c87b56dd14610535578063cb6a1f1214610548578063cf96cf4f1461056857610253565b8063a22cb4651161010a578063a22cb46514610487578063a7d6619d1461049a578063b173e570146104ad578063b18912a6146104c0578063b418f063146104e257610253565b80639042a3c71461043e57806391d1485414610451578063920b72781461046457806395d89b4114610477578063a217fddf1461047f57610253565b806334d03715116101d45780636352211e116101985780636352211e146103db57806370a08231146103ee5780637c7768d61461040157806381d5f7f6146104095780638a59a9351461041e57610253565b806334d037151461037c57806336568abe1461038f57806342842e0e146103a2578063485cc955146103b55780635e7231c3146103c857610253565b806323018c901161021b57806323018c90146102e857806323b872dd146102fb578063248a9ca31461030e578063292876db1461033f5780632f2ff15d1461036957610253565b806301ffc9a71461025857806306fdde0314610280578063081812fc14610295578063095ea7b3146102c05780631856f262146102d5575b600080fd5b61026b6102663660046149ef565b610695565b60405190151581526020015b60405180910390f35b6102886106c2565b6040516102779190614e01565b6102a86102a33660046149b5565b610754565b6040516001600160a01b039091168152602001610277565b6102d36102ce366004614970565b6107ee565b005b6102d36102e3366004614726565b610904565b6102d36102f6366004614a3f565b6109f7565b6102d3610309366004614772565b610a90565b61033161031c3660046149b5565b60009081526097602052604090206001015490565b604051908152602001610277565b61035261034d3660046149b5565b610ac1565b6040516102779b9a9998979695949392919061506a565b6102d36103773660046149cd565b610c38565b6102d361038a366004614826565b610c5f565b6102d361039d3660046149cd565b610ce0565b6102d36103b0366004614772565b610d5e565b6102d36103c3366004614740565b610d79565b6102d36103d6366004614ade565b610ebe565b6102a86103e93660046149b5565b610f5a565b6103316103fc366004614726565b610fd1565b610331611058565b61033160008051602061529f83398151915281565b61043161042c3660046149b5565b611068565b6040516102779190614fad565b61033161044c366004614b4e565b61128d565b61026b61045f3660046149cd565b611951565b610331610472366004614b2a565b61197e565b61028861199b565b610331600081565b6102d361049536600461493a565b6119aa565b6102d36104a836600461493a565b6119b5565b6102d36104bb3660046149b5565b611bdd565b6104d36104ce366004614ade565b611c46565b60405161027793929190614d4e565b6103316104f03660046149b5565b60cf6020526000908152604090205481565b6102d36105103660046147ad565b611e61565b6105286105233660046149b5565b611e99565b6040516102779190614d3b565b6102886105433660046149b5565b611efb565b6103316105563660046149b5565b60d06020526000908152604090205481565b6105a4610576366004614ade565b600091825260cb60209081526040808420928452600383018252808420546004909301909152909120549091565b60408051928352602083019190915201610277565b6102d36105c73660046149cd565b611fe2565b6105df6105da366004614ade565b612008565b604051610277929190614ddf565b6102d36105fb3660046149cd565b61208d565b6105a461060e366004614aff565b600092835260cb6020908152604080852093855260029384018252808520928552928201815282842054600390920190529120549091565b61026b610654366004614740565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6102d36106903660046149b5565b612205565b60006001600160e01b03198216637965db0b60e01b14806106ba57506106ba82612231565b90505b919050565b6060606580546106d1906151bf565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd906151bf565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b03166107d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006107f982610f5a565b9050806001600160a01b0316836001600160a01b031614156108675760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107c9565b336001600160a01b038216148061088357506108838133610654565b6108f55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107c9565b6108ff8383612256565b505050565b806001600160a01b0381163314806109225750610922600033611951565b6109a75760405162461bcd60e51b815260206004820152604a60248201527f434c4d383a3a73656c664f7241646d696e3a206d73672e73656e64657220646f60448201527f6573206e6f74206f776e20746869732061646472657373206f72206973206e6f6064820152693a1030b71030b236b4b760b11b608482015260a4016107c9565b6109bf60008051602061529f833981519152836122c4565b6040516001600160a01b038316907fef8ce2b8e324ee947b09d9cf7f74e5589078af3a3e3f5266e9752c8284e4cd8790600090a25050565b600089815260ca602052604090206002015489906001600160a01b031615610a315760405162461bcd60e51b81526004016107c990614f5f565b8980610a3c60cc5490565b1015610a5a5760405162461bcd60e51b81526004016107c990614e66565b60008b815260ca60205260409020610a75818c8c8c8c6122ce565b610a828188888888612ee6565b505050505050505050505050565b610a9a3382612f45565b610ab65760405162461bcd60e51b81526004016107c990614ec3565b6108ff838383613038565b60ca60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a018054999a6001600160a01b03998a169a9990981698969795969495939492939192610b27906151bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906151bf565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b50505050509080600a018054610bb5906151bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610be1906151bf565b8015610c2e5780601f10610c0357610100808354040283529160200191610c2e565b820191906000526020600020905b815481529060010190602001808311610c1157829003601f168201915b505050505090508b565b600082815260976020526040902060010154610c5581335b6131d8565b6108ff838361323c565b610c6d60cc80546001019055565b6000610c7860cc5490565b600081815260ca602052604090208181556001810180546001600160a01b0319166001600160a01b038e16179055426008820155909150610cbc818b8b8b8b6122ce565b610cc98187878787612ee6565b610cd333836132c2565b5050505050505050505050565b6001600160a01b0381163314610d505760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107c9565b610d5a8282613404565b5050565b6108ff83838360405180602001604052806000815250611e61565b600054610100900460ff16610d945760005460ff1615610d98565b303b155b610dfb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107c9565b600054610100900460ff16158015610e1d576000805461ffff19166101011790555b60c980546001600160a01b0319166001600160a01b03851617905560408051808201825260128152712722aa1021b0b93137b7102a3930b1b5b2b960711b602080830191909152825180840190935260048352631391551560e21b90830152610e859161346b565b610e906000836122c4565b610ea860008051602061529f833981519152836122c4565b80156108ff576000805461ff0019169055505050565b80821015610d5a5760405162461bcd60e51b815260206004820152605860248201527f434c4d383a3a5f766572696679546f74616c547261636b65643a20746f74616c60448201527f20616d6f756e7420747261636b65642065786365656473206f7574707574206f60648201527f6620746f6b656e49642066726f6d20747261636b657249640000000000000000608482015260a4016107c9565b6000818152606760205260408120546001600160a01b0316806106ba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107c9565b60006001600160a01b03821661103c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107c9565b506001600160a01b031660009081526068602052604090205490565b600061106360cc5490565b905090565b6110d76040518061016001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b600082815260ca60209081526040918290208251610160810184528154815260018201546001600160a01b03908116938201939093526002820154909216928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260098201805491929161012084019190611172906151bf565b80601f016020809104026020016040519081016040528092919081815260200182805461119e906151bf565b80156111eb5780601f106111c0576101008083540402835291602001916111eb565b820191906000526020600020905b8154815290600101906020018083116111ce57829003601f168201915b50505050508152602001600a82018054611204906151bf565b80601f0160208091040260200160405190810160405280929190818152602001828054611230906151bf565b801561127d5780601f106112525761010080835404028352916020019161127d565b820191906000526020600020905b81548152906001019060200180831161126057829003601f168201915b5050505050815250509050919050565b6000836112b2578260ff16600314156112aa5750620f424061194a565b50600061194a565b600093845260ca6020908152604080862060cb835281872087805260028101909352908620909190869081908190819081908190815b88548111611856576101018c6112ff600183615165565b610101811061131e57634e487b7160e01b600052603260045260246000fd5b602002015114158061136257506113628c8a600001838154811061135257634e487b7160e01b600052603260045260246000fd5b90600052602060002001546134ac565b156117265760005b82548110156117245760c95483546001600160a01b039091169063127d5ad0908590849081106113aa57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016113d391815260200190565b60206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190614bd8565b93508360ff16600414156115515761143c8f858f61128d565b94506114a0611499620f424085600201600087600001868154811061147157634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000205461351790919063ffffffff16565b8a90613523565b98506114f36114ec620f42406114e6886114e0620f42408960030160008b6000018a8154811061147157634e487b7160e01b600052603260045260246000fd5b90613517565b9061352f565b8990613523565b975061154a83600301600085600001848154811061152157634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020548861352390919063ffffffff16565b96506116d2565b8360ff16600314156116065782600301600084600001838154811061158657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054600014156115fa576115f360cf60008560000184815481106115d257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054858f61128d565b9450611601565b620f424094505b6116d2565b8360ff16600214156116d25761163c60d060008560000184815481106115d257634e487b7160e01b600052603260045260246000fd5b9450611678611671620f424085600201600087600001868154811061147157634e487b7160e01b600052603260045260246000fd5b8a9061353b565b98506116cf8360030160008560000184815481106116a657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020548761352390919063ffffffff16565b95505b611710611499620f42406114e6886114e0620f42408960020160008b6000018a8154811061147157634e487b7160e01b600052603260045260246000fd5b98508061171c816151fa565b91505061136a565b505b88548110156118445788600001818154811061175257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549d5061179e60018d60016101016117749190615165565b610101811061179357634e487b7160e01b600052603260045260246000fd5b602002015190613523565b8c6117ac6001610101615165565b61010181106117cb57634e487b7160e01b600052603260045260246000fd5b60200201528d8c806117e06001610101615165565b61010181106117ff57634e487b7160e01b600052603260045260246000fd5b6020020151610101811061182357634e487b7160e01b600052603260045260246000fd5b6020020181815250508860020160008f815260200190815260200160002091505b8061184e816151fa565b9150506112e8565b508b60ff16600214801561186a5750600084115b1561188957611879878561352f565b995050505050505050505061194a565b846118bf578b60ff1660031480156118a5575060008960040154115b156118ba57600489015461187990889061352f565b61193c565b8b60ff16600314156118db57600389015461187990889061352f565b8b60ff1660041480156118f2575060008960030154115b156119325761192f61191f6119148b600301548a61352f90919063ffffffff16565b60048c015490613517565b6119298989613523565b9061353b565b96505b611879878661352f565b600099505050505050505050505b9392505050565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000611988614542565b61199384848361128d565b949350505050565b6060606680546106d1906151bf565b610d5a338383613547565b60c9546040516349b9055760e01b81526001600160a01b038481166004830152909116906349b905579060240160206040518083038186803b1580156119fa57600080fd5b505afa158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190614999565b80611a3b575080155b611abb5760405162461bcd60e51b8152602060048201526044602482018190527f434c4d383a3a617070726f766556657269666965723a20616464726573732069908201527f73206e6f742061207265676973746572656420656d697373696f6e732061756460648201526334ba37b960e11b608482015260a4016107c9565b6001600160a01b038216331415611b305760405162461bcd60e51b815260206004820152603360248201527f434c4d383a3a617070726f766556657269666965723a2061756469746f72206360448201527230b73737ba1031329036b9b39739b2b73232b960691b60648201526084016107c9565b6001600160a01b038216600090815260d1602090815260408083203384529091529020805460ff19168215801591909117909155611ba35760405133906001600160a01b038416907ff31635902a304a612155085cc8916b9ab86fc115155b10b33980f6cb8165c54e90600090a3610d5a565b60405133906001600160a01b038416907f490861baee43b8ebd28f134f99c0aa7848888c4bde402256ad4cf455d147aed690600090a35050565b600081815260ca602052604090206002015481906001600160a01b031615611c175760405162461bcd60e51b81526004016107c990614f5f565b81611c2181613616565b5050600090815260ca6020526040902060020180546001600160a01b03191633179055565b600082815260cb6020908152604080832084845260028101835281842080548351818602810186019094528084526060958695869591928491830182828015611cae57602002820191906000526020600020905b815481526020019060010190808311611c9a575b505050505090506000815167ffffffffffffffff811115611cdf57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d08578160200160208202803683370190505b5090506000825167ffffffffffffffff811115611d3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d5e578160200160208202803683370190505b50905060005b8351811015611e5057846002016000858381518110611d9357634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054838281518110611dca57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050846003016000858381518110611dfc57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054828281518110611e3357634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611e48816151fa565b915050611d64565b509196509450925050509250925092565b611e6b3383612f45565b611e875760405162461bcd60e51b81526004016107c990614ec3565b611e93848484846136bf565b50505050565b600081815260cb6020908152604091829020805483518184028101840190945280845260609392830182828015611eef57602002820191906000526020600020905b815481526020019060010190808311611edb575b50505050509050919050565b6000818152606760205260409020546060906001600160a01b0316611f7a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107c9565b6000611f9160408051602081019091526000815290565b90506000815111611fb1576040518060200160405280600081525061194a565b80611fbb846136f2565b604051602001611fcc929190614c5a565b6040516020818303038152906040529392505050565b600082815260976020526040902060010154611ffe8133610c50565b6108ff8383613404565b600082815260cb6020908152604080832084845260028101835281842060019091018352818420548154835181860281018601909452808452606095949293919284919083018282801561207b57602002820191906000526020600020905b815481526020019060010190808311612067575b50505050509150915091509250929050565b612098600033611951565b6120f85760405162461bcd60e51b815260206004820152602b60248201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206973206e60448201526a37ba1030b71030b236b4b760a91b60648201526084016107c9565b8061211160008051602061529f83398151915282611951565b61217c5760405162461bcd60e51b815260206004820152603660248201527f434c4d383a3a72656769737465726564547261636b65723a20746865206164646044820152751c995cdcc81a5cc81b9bdd081c9959da5cdd195c995960521b60648201526084016107c9565b828061218760cc5490565b10156121a55760405162461bcd60e51b81526004016107c990614e66565b600084815260ca60205260408082206001810180546001600160a01b0319166001600160a01b0388169081179091559151909287917f7bc1a852706b575e4f4bc2b8b22d45d7afcfbe29abc4cc0b6cc540aced9f6e7a9190a35050505050565b8061220f81613616565b50600090815260ca6020526040902060020180546001600160a01b0319169055565b60006001600160e01b03198216637965db0b60e01b14806106ba57506106ba8261380d565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061228b82610f5a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610d5a828261323c565b83518351146123455760405162461bcd60e51b815260206004820152603c60248201527f434c4d383a3a5f747261636b3a20696e416d6f756e747320616e6420746f6b6560448201527f6e49647320617265206e6f74207468652073616d65206c656e6774680000000060648201526084016107c9565b83518251146123bc5760405162461bcd60e51b815260206004820152603d60248201527f434c4d383a3a5f747261636b3a206f7574416d6f756e747320616e6420746f6b60448201527f656e49647320617265206e6f74207468652073616d65206c656e67746800000060648201526084016107c9565b83518151146124335760405162461bcd60e51b815260206004820152603d60248201527f434c4d383a3a5f747261636b3a20747261636b657249647320616e6420746f6b60448201527f656e49647320617265206e6f74207468652073616d65206c656e67746800000060648201526084016107c9565b8454600090815260cb6020526040812082519091908390829061246657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008181526002850190925260409091206001890154919250906001600160a01b031633148061254b575060c9546040516349b9055760e01b81523360048201526001600160a01b03909116906349b905579060240160206040518083038186803b1580156124e057600080fd5b505afa1580156124f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125189190614999565b801561254b575033600090815260d16020908152604080832060018c01546001600160a01b0316845290915290205460ff165b6125d35760405162461bcd60e51b815260206004820152604d60248201527f434c4d383a3a5f747261636b3a206d73672e73656e646572206973206e6f742060448201527f746865207265676973746572656420747261636b6565206f7220616e2061707060648201526c3937bb32b21030bab234ba37b960991b608482015260a4016107c9565b6000805b8851811015612e0057895484141561266b5760405162461bcd60e51b815260206004820152604b60248201527f434c4d383a3a5f747261636b3a20747261636b6572446174612e747261636b6560448201527f72496420616e6420736f75726365547261636b657249642063616e206e6f742060648201526a6265207468652073616d6560a81b608482015260a4016107c9565b60c95489516001600160a01b039091169063127d5ad0908b90849081106126a257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016126c891815260200190565b60206040518083038186803b1580156126e057600080fd5b505afa1580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127189190614bd8565b915080156127c1578561272c600183615165565b8151811061274a57634e487b7160e01b600052603260045260246000fd5b602002602001015186828151811061277257634e487b7160e01b600052603260045260246000fd5b6020026020010151146127c15785818151811061279f57634e487b7160e01b600052603260045260246000fd5b6020026020010151935084600201600085815260200190815260200160002092505b6128748982815181106127e457634e487b7160e01b600052603260045260246000fd5b60200260200101518b60010160009054906101000a90046001600160a01b03168c60030154858760020160008f888151811061283057634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548d878151811061286757634e487b7160e01b600052603260045260246000fd5b602002602001015161385d565b60038b0155600460ff83161415612abe57831561290d5761290d83858b84815181106128b057634e487b7160e01b600052603260045260246000fd5b60200260200101518b85815181106128d857634e487b7160e01b600052603260045260246000fd5b60200260200101518b868151811061290057634e487b7160e01b600052603260045260246000fd5b6020026020010151613ab2565b6129f78560030160008b848151811061293657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548b60010160009054906101000a90046001600160a01b03168b848151811061298557634e487b7160e01b600052603260045260246000fd5b60200260200101518660030160008e87815181106129b357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548b86815181106129ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151613c1d565b8560030160008b8481518110612a1d57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550612ab98560030160008b8481518110612a6057634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548660040160008c8581518110612a9d57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054610ebe565b612d0d565b8315612ac957600093505b8160ff1660031415612d0d5733600090815260d16020908152604080832060018e01546001600160a01b0316845290915290205460ff1615612ca35760008360030160008b8481518110612b2d57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020541115612ba357612b9d8360030160008b8481518110612b7357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548b6004015461353b90919063ffffffff16565b60048b01555b6000878281518110612bc557634e487b7160e01b600052603260045260246000fd5b60200260200101511115612c5f57612c11878281518110612bf657634e487b7160e01b600052603260045260246000fd5b60200260200101518b6004015461352390919063ffffffff16565b60048b01558954895160cf906000908c9085908110612c4057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550612c9e565b60cf60008a8381518110612c8357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600090555b612ab9565b8260030160008a8381518110612cc957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054878281518110612d0057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b612d8e838a8381518110612d3157634e487b7160e01b600052603260045260246000fd5b60200260200101518a8481518110612d5957634e487b7160e01b600052603260045260246000fd5b60200260200101518a8581518110612d8157634e487b7160e01b600052603260045260246000fd5b6020026020010151613e7e565b60018951612d9c9190615165565b811480612dda575085612db082600161511a565b81518110612dce57634e487b7160e01b600052603260045260246000fd5b60200260200101518414155b15612dee578254612dee9085908790614036565b80612df8816151fa565b9150506125d7565b50886004015489600301541015612e985760405162461bcd60e51b815260206004820152605060248201527f434c4d383a3a5f747261636b3a20746f74616c206175646974656420656d697360448201527f73696f6e206f75742069732067726561746572207468616e20746f74616c206560648201526f1b5a5cdcda5bdb9cc81d1c9858dad95960821b608482015260a4016107c9565b88546040513391907ff4167ae79939c396db7d073fdcf741e90f00a19e0d6f2c61d62c9c1be0fdfb3e90612ed3908c908c908c908c90614d87565b60405180910390a3505050505050505050565b8315612ef457600685018490555b8215612f0257600785018390555b815115612f20578151612f1e9060098701906020850190614562565b505b805115612f3e578051612f3c90600a8701906020840190614562565b505b5050505050565b6000818152606760205260408120546001600160a01b0316612fbe5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107c9565b6000612fc983610f5a565b9050806001600160a01b0316846001600160a01b031614806130045750836001600160a01b0316612ff984610754565b6001600160a01b0316145b8061199357506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16611993565b826001600160a01b031661304b82610f5a565b6001600160a01b0316146130b35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107c9565b6001600160a01b0382166131155760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107c9565b613120600082612256565b6001600160a01b0383166000908152606860205260408120805460019290613149908490615165565b90915550506001600160a01b038216600090815260686020526040812080546001929061317790849061511a565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6131e28282611951565b610d5a576131fa816001600160a01b031660146141dc565b6132058360206141dc565b604051602001613216929190614c89565b60408051601f198184030181529082905262461bcd60e51b82526107c991600401614e01565b6132468282611951565b610d5a5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561327e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b0382166133185760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107c9565b6000818152606760205260409020546001600160a01b03161561337d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107c9565b6001600160a01b03821660009081526068602052604081208054600192906133a690849061511a565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61340e8282611951565b15610d5a5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166134925760405162461bcd60e51b81526004016107c990614f14565b61349a6143be565b6134a26143be565b610d5a82826143e7565b6000805b6134bd6001610101615165565b81101561350d5782848261010181106134e657634e487b7160e01b600052603260045260246000fd5b602002015114156134fb576001915050611978565b80613505816151fa565b9150506134b0565b5060009392505050565b600061194a8284615146565b600061194a828461511a565b600061194a8284615132565b600061194a8284615165565b816001600160a01b0316836001600160a01b031614156135a95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107c9565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b33600090815260d16020908152604080832084845260ca8352818420600101546001600160a01b0316845290915290205460ff166136bc5760405162461bcd60e51b815260206004820152603760248201527f434c4d383a3a697341756469746f723a2061756469746f72206973206e6f742060448201527f617070726f7665642062792074686520747261636b656500000000000000000060648201526084016107c9565b50565b6136ca848484613038565b6136d684848484614435565b611e935760405162461bcd60e51b81526004016107c990614e14565b60608161371757506040805180820190915260018152600360fc1b60208201526106bd565b8160005b8115613741578061372b816151fa565b915061373a9050600a83615132565b915061371b565b60008167ffffffffffffffff81111561376a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613794576020820181803683370190505b5090505b8415611993576137a9600183615165565b91506137b6600a86615215565b6137c190603061511a565b60f81b8183815181106137e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613806600a86615132565b9450613798565b60006001600160e01b031982166380ac58cd60e01b148061383e57506001600160e01b03198216635b5e139f60e01b145b806106ba57506301ffc9a760e01b6001600160e01b03198316146106ba565b60008183146138ec57600087815260cd602090815260408083206001600160a01b038a168452909152902054613893908461353b565b600088815260cd602090815260408083206001600160a01b038b168452909152902055600260ff851611156138d3576138cc858461353b565b94506138ec565b8360ff16600214156138ec576138e98584613523565b94505b8115613aa757600087815260cd602090815260408083206001600160a01b038a16845290915290205461391f9083613523565b600088815260cd602090815260408083206001600160a01b038b168452909152902055600260ff8516111561395f576139588583613523565b9450613978565b8360ff166002141561397857613975858361353b565b94505b600087815260cd602090815260408083206001600160a01b038a811680865291909352928190205460c9549151631aeb9fab60e31b8152600481018c905260248101949094529291169063d75cfd589060440160206040518083038186803b1580156139e357600080fd5b505afa1580156139f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1b9190614a27565b1015613aa75760405162461bcd60e51b815260206004820152604f60248201527f434c4d383a3a5f766572696679526574697265643a207468652072657469726560448201527f642062616c616e63652065786365656473207768617420686173206265656e2060648201526e1c995c1bdc9d1959081a5b88139155608a1b608482015260a4016107c9565b509295945050505050565b600084815260cb6020908152604080832086845260028901909252909120548314613b5a57600084815260028701602052604090205415613b275760008481526002870160209081526040808320546004850190925290912054613b159161353b565b60008581526004830160205260409020555b8215613b5a576000848152600482016020526040902054613b489084613523565b60008581526004830160205260409020555b60008481526003870160205260409020548214613bf457600084815260038701602052604090205415613bc15760008481526003870160209081526040808320546004850190925290912054613baf9161353b565b60008581526004830160205260409020555b8115613bf4576000848152600482016020526040902054613be29083613523565b60008581526004830160205260409020555b60008481526003820160209081526040808320546004850190925290912054612f3c9190610ebe565b6000818314158015613c2f5750600083115b15613c9157600084815260ce602090815260408083206001600160a01b0389168452909152902054613c61908461353b565b600085815260ce602090815260408083206001600160a01b038a168452909152902055613c8e868461353b565b95505b8115613e7457600084815260ce602090815260408083206001600160a01b0389168452909152902054613cc49083613523565b600085815260ce602090815260408083206001600160a01b038a168452909152902055613cf18683613523565b600085815260ce602090815260408083206001600160a01b038a811680865291909352928190205460c95491516307b9f04f60e51b8152600481018a90526024810194909452939950169063f73e09e09060440160206040518083038186803b158015613d5d57600080fd5b505afa158015613d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d959190614a27565b1015613e2f5760405162461bcd60e51b815260206004820152605760248201527f434c4d383a3a5f7665726966795472616e736665727265643a2074686520747260448201527f616e736665727265642062616c616e636520657863656564732077686174206860648201527f6173206265656e207265706f7274656420696e204e4554000000000000000000608482015260a4016107c9565b846001600160a01b0316847f30bae3d5019f14a46c7a32a6791d0279bef1da7b54f09ddae4a27f8868c79d6c84604051613e6b91815260200190565b60405180910390a35b5093949350505050565b600083815260018501602052604090205482151580613e9d5750600082115b15613ef95780613ed2578454600181810187556000878152602080822090930187905587548782529188019092526040909120555b60008481526002860160209081526040808320869055600388019091529020829055612f3e565b845460011015613fc95784548590613f1390600190615165565b81548110613f3157634e487b7160e01b600052603260045260246000fd5b60009182526020909120015485613f49600184615165565b81548110613f6757634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055508085600101600087600001600185613f8d9190615165565b81548110613fab57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020819055505b6000848152600180870160209081526040808420849055600289018252808420849055600389019091528220919091558554869161400691615165565b8154811061402457634e487b7160e01b600052603260045260246000fd5b60009182526020822001555050505050565b600083815260018301602052604090205481156140905760008411801561405b575080155b1561408b578254600181810185556000858152602080822090930187905585548782529186019092526040909120555b611e93565b6000841180156140a05750600081115b156141c15782546001101561417557825483906140bf90600190615165565b815481106140dd57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154836140f5600184615165565b8154811061411357634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555080836001016000856000016001856141399190615165565b8154811061415757634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020819055505b6000848152600180850160205260408220919091558354849161419791615165565b815481106141b557634e487b7160e01b600052603260045260246000fd5b60009182526020822001555b6000848152600284016020526040812090612f3c82826145e6565b606060006141eb836002615146565b6141f690600261511a565b67ffffffffffffffff81111561421c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614246576020820181803683370190505b509050600360fc1b8160008151811061426f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106142ac57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006142d0846002615146565b6142db90600161511a565b90505b600181111561436f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061431d57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061434157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93614368816151a8565b90506142de565b50831561194a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107c9565b600054610100900460ff166143e55760405162461bcd60e51b81526004016107c990614f14565b565b600054610100900460ff1661440e5760405162461bcd60e51b81526004016107c990614f14565b8151614421906065906020850190614562565b5080516108ff906066906020840190614562565b60006001600160a01b0384163b1561453757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614479903390899088908890600401614cfe565b602060405180830381600087803b15801561449357600080fd5b505af19250505080156144c3575060408051601f3d908101601f191682019092526144c091810190614a0b565b60015b61451d573d8080156144f1576040519150601f19603f3d011682016040523d82523d6000602084013e6144f6565b606091505b5080516145155760405162461bcd60e51b81526004016107c990614e14565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611993565b506001949350505050565b604051806120200160405280610101906020820280368337509192915050565b82805461456e906151bf565b90600052602060002090601f01602090048101928261459057600085556145d6565b82601f106145a957805160ff19168380011785556145d6565b828001600101855582156145d6579182015b828111156145d65782518255916020019190600101906145bb565b506145e2929150614600565b5090565b50805460008255906000526020600020908101906136bc91905b5b808211156145e25760008155600101614601565b600067ffffffffffffffff83111561462f5761462f615255565b614642601f8401601f19166020016150e9565b905082815283838301111561465657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146106bd57600080fd5b600082601f830112614694578081fd5b8135602067ffffffffffffffff8211156146b0576146b0615255565b8160051b6146bf8282016150e9565b8381528281019086840183880185018910156146d9578687fd5b8693505b858410156146fb5780358352600193909301929184019184016146dd565b50979650505050505050565b600082601f830112614717578081fd5b61194a83833560208501614615565b600060208284031215614737578081fd5b61194a8261466d565b60008060408385031215614752578081fd5b61475b8361466d565b91506147696020840161466d565b90509250929050565b600080600060608486031215614786578081fd5b61478f8461466d565b925061479d6020850161466d565b9150604084013590509250925092565b600080600080608085870312156147c2578081fd5b6147cb8561466d565b93506147d96020860161466d565b925060408501359150606085013567ffffffffffffffff8111156147fb578182fd5b8501601f8101871361480b578182fd5b61481a87823560208401614615565b91505092959194509250565b60008060008060008060008060006101208a8c031215614844578485fd5b61484d8a61466d565b985060208a013567ffffffffffffffff80821115614869578687fd5b6148758d838e01614684565b995060408c013591508082111561488a578687fd5b6148968d838e01614684565b985060608c01359150808211156148ab578687fd5b6148b78d838e01614684565b975060808c01359150808211156148cc578687fd5b6148d88d838e01614684565b965060a08c0135955060c08c0135945060e08c01359150808211156148fb578384fd5b6149078d838e01614707565b93506101008c013591508082111561491d578283fd5b5061492a8c828d01614707565b9150509295985092959850929598565b6000806040838503121561494c578182fd5b6149558361466d565b915060208301356149658161526b565b809150509250929050565b60008060408385031215614982578182fd5b61498b8361466d565b946020939093013593505050565b6000602082840312156149aa578081fd5b815161194a8161526b565b6000602082840312156149c6578081fd5b5035919050565b600080604083850312156149df578182fd5b823591506147696020840161466d565b600060208284031215614a00578081fd5b813561194a81615279565b600060208284031215614a1c578081fd5b815161194a81615279565b600060208284031215614a38578081fd5b5051919050565b60008060008060008060008060006101208a8c031215614a5d578283fd5b8935985060208a013567ffffffffffffffff80821115614a7b578485fd5b614a878d838e01614684565b995060408c0135915080821115614a9c578485fd5b614aa88d838e01614684565b985060608c0135915080821115614abd578485fd5b614ac98d838e01614684565b975060808c01359150808211156148cc578485fd5b60008060408385031215614af0578182fd5b50508035926020909101359150565b600080600060608486031215614b13578081fd5b505081359360208301359350604090920135919050565b60008060408385031215614b3c578182fd5b8235915060208301356149658161528f565b6000806000612060808587031215614b64578182fd5b84359350602080860135614b778161528f565b9350605f86018713614b87578283fd5b614b926120206150e9565b806040880189858a011115614ba5578586fd5b8594505b610101851015614bc9578035835260019490940193918301918301614ba9565b50809450505050509250925092565b600060208284031215614be9578081fd5b815161194a8161528f565b6000815180845260208085019450808401835b83811015614c2357815187529582019590820190600101614c07565b509495945050505050565b60008151808452614c4681602086016020860161517c565b601f01601f19169290920160200192915050565b60008351614c6c81846020880161517c565b835190830190614c8081836020880161517c565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614cc181601785016020880161517c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614cf281602884016020880161517c565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614d3190830184614c2e565b9695505050505050565b60006020825261194a6020830184614bf4565b600060608252614d616060830186614bf4565b8281036020840152614d738186614bf4565b90508281036040840152614d318185614bf4565b600060808252614d9a6080830187614bf4565b8281036020840152614dac8187614bf4565b90508281036040840152614dc08186614bf4565b90508281036060840152614dd48185614bf4565b979650505050505050565b600060408252614df26040830185614bf4565b90508260208301529392505050565b60006020825261194a6020830184614c2e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252603a908201527f434c4d383a3a747261636b6572546f6b656e6b4578697374733a20747261636b60408201527f657220746f6b656e20494420646f6573206e6f74206578697374000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602e908201527f434c4d383a3a6e6f74417564697465643a20747261636b65724964206973206160408201526d1b1c9958591e48185d591a5d195960921b606082015260800190565b600060208252825160208301526020830151614fd460408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e0830151610100818185015280850151915050610120818185015280850151915050610160610140818186015261504e610180860184614c2e565b90860151858203601f190183870152909250614d318382614c2e565b60006101608d835260018060a01b03808e166020850152808d166040850152508a60608401528960808401528860a08401528760c08401528660e084015285610100840152806101208401526150c281840186614c2e565b90508281036101408401526150d78185614c2e565b9e9d5050505050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561511257615112615255565b604052919050565b6000821982111561512d5761512d615229565b500190565b6000826151415761514161523f565b500490565b600081600019048311821515161561516057615160615229565b500290565b60008282101561517757615177615229565b500390565b60005b8381101561519757818101518382015260200161517f565b83811115611e935750506000910152565b6000816151b7576151b7615229565b506000190190565b600181811c908216806151d357607f821691505b602082108114156151f457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561520e5761520e615229565b5060010190565b6000826152245761522461523f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146136bc57600080fd5b6001600160e01b0319811681146136bc57600080fd5b60ff811681146136bc57600080fdfe4f9730948b73761de8f37a0aea1760c5eef658d37d8c456767b81e17c01f30eda2646970667358221220131e16c40f38d78e54bca62488d493bd74d7f849bd0acf6af9d94f8f1c6f474c64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80639042a3c711610146578063b88d4fde116100c3578063d547741f11610087578063d547741f146105b9578063d82de424146105cc578063d97ac445146105ed578063db600be514610600578063e985e9c514610646578063ecc3356a1461068257610253565b8063b88d4fde14610502578063b9531f2114610515578063c87b56dd14610535578063cb6a1f1214610548578063cf96cf4f1461056857610253565b8063a22cb4651161010a578063a22cb46514610487578063a7d6619d1461049a578063b173e570146104ad578063b18912a6146104c0578063b418f063146104e257610253565b80639042a3c71461043e57806391d1485414610451578063920b72781461046457806395d89b4114610477578063a217fddf1461047f57610253565b806334d03715116101d45780636352211e116101985780636352211e146103db57806370a08231146103ee5780637c7768d61461040157806381d5f7f6146104095780638a59a9351461041e57610253565b806334d037151461037c57806336568abe1461038f57806342842e0e146103a2578063485cc955146103b55780635e7231c3146103c857610253565b806323018c901161021b57806323018c90146102e857806323b872dd146102fb578063248a9ca31461030e578063292876db1461033f5780632f2ff15d1461036957610253565b806301ffc9a71461025857806306fdde0314610280578063081812fc14610295578063095ea7b3146102c05780631856f262146102d5575b600080fd5b61026b6102663660046149ef565b610695565b60405190151581526020015b60405180910390f35b6102886106c2565b6040516102779190614e01565b6102a86102a33660046149b5565b610754565b6040516001600160a01b039091168152602001610277565b6102d36102ce366004614970565b6107ee565b005b6102d36102e3366004614726565b610904565b6102d36102f6366004614a3f565b6109f7565b6102d3610309366004614772565b610a90565b61033161031c3660046149b5565b60009081526097602052604090206001015490565b604051908152602001610277565b61035261034d3660046149b5565b610ac1565b6040516102779b9a9998979695949392919061506a565b6102d36103773660046149cd565b610c38565b6102d361038a366004614826565b610c5f565b6102d361039d3660046149cd565b610ce0565b6102d36103b0366004614772565b610d5e565b6102d36103c3366004614740565b610d79565b6102d36103d6366004614ade565b610ebe565b6102a86103e93660046149b5565b610f5a565b6103316103fc366004614726565b610fd1565b610331611058565b61033160008051602061529f83398151915281565b61043161042c3660046149b5565b611068565b6040516102779190614fad565b61033161044c366004614b4e565b61128d565b61026b61045f3660046149cd565b611951565b610331610472366004614b2a565b61197e565b61028861199b565b610331600081565b6102d361049536600461493a565b6119aa565b6102d36104a836600461493a565b6119b5565b6102d36104bb3660046149b5565b611bdd565b6104d36104ce366004614ade565b611c46565b60405161027793929190614d4e565b6103316104f03660046149b5565b60cf6020526000908152604090205481565b6102d36105103660046147ad565b611e61565b6105286105233660046149b5565b611e99565b6040516102779190614d3b565b6102886105433660046149b5565b611efb565b6103316105563660046149b5565b60d06020526000908152604090205481565b6105a4610576366004614ade565b600091825260cb60209081526040808420928452600383018252808420546004909301909152909120549091565b60408051928352602083019190915201610277565b6102d36105c73660046149cd565b611fe2565b6105df6105da366004614ade565b612008565b604051610277929190614ddf565b6102d36105fb3660046149cd565b61208d565b6105a461060e366004614aff565b600092835260cb6020908152604080852093855260029384018252808520928552928201815282842054600390920190529120549091565b61026b610654366004614740565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6102d36106903660046149b5565b612205565b60006001600160e01b03198216637965db0b60e01b14806106ba57506106ba82612231565b90505b919050565b6060606580546106d1906151bf565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd906151bf565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b03166107d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006107f982610f5a565b9050806001600160a01b0316836001600160a01b031614156108675760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107c9565b336001600160a01b038216148061088357506108838133610654565b6108f55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107c9565b6108ff8383612256565b505050565b806001600160a01b0381163314806109225750610922600033611951565b6109a75760405162461bcd60e51b815260206004820152604a60248201527f434c4d383a3a73656c664f7241646d696e3a206d73672e73656e64657220646f60448201527f6573206e6f74206f776e20746869732061646472657373206f72206973206e6f6064820152693a1030b71030b236b4b760b11b608482015260a4016107c9565b6109bf60008051602061529f833981519152836122c4565b6040516001600160a01b038316907fef8ce2b8e324ee947b09d9cf7f74e5589078af3a3e3f5266e9752c8284e4cd8790600090a25050565b600089815260ca602052604090206002015489906001600160a01b031615610a315760405162461bcd60e51b81526004016107c990614f5f565b8980610a3c60cc5490565b1015610a5a5760405162461bcd60e51b81526004016107c990614e66565b60008b815260ca60205260409020610a75818c8c8c8c6122ce565b610a828188888888612ee6565b505050505050505050505050565b610a9a3382612f45565b610ab65760405162461bcd60e51b81526004016107c990614ec3565b6108ff838383613038565b60ca60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a018054999a6001600160a01b03998a169a9990981698969795969495939492939192610b27906151bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906151bf565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b50505050509080600a018054610bb5906151bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610be1906151bf565b8015610c2e5780601f10610c0357610100808354040283529160200191610c2e565b820191906000526020600020905b815481529060010190602001808311610c1157829003601f168201915b505050505090508b565b600082815260976020526040902060010154610c5581335b6131d8565b6108ff838361323c565b610c6d60cc80546001019055565b6000610c7860cc5490565b600081815260ca602052604090208181556001810180546001600160a01b0319166001600160a01b038e16179055426008820155909150610cbc818b8b8b8b6122ce565b610cc98187878787612ee6565b610cd333836132c2565b5050505050505050505050565b6001600160a01b0381163314610d505760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107c9565b610d5a8282613404565b5050565b6108ff83838360405180602001604052806000815250611e61565b600054610100900460ff16610d945760005460ff1615610d98565b303b155b610dfb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107c9565b600054610100900460ff16158015610e1d576000805461ffff19166101011790555b60c980546001600160a01b0319166001600160a01b03851617905560408051808201825260128152712722aa1021b0b93137b7102a3930b1b5b2b960711b602080830191909152825180840190935260048352631391551560e21b90830152610e859161346b565b610e906000836122c4565b610ea860008051602061529f833981519152836122c4565b80156108ff576000805461ff0019169055505050565b80821015610d5a5760405162461bcd60e51b815260206004820152605860248201527f434c4d383a3a5f766572696679546f74616c547261636b65643a20746f74616c60448201527f20616d6f756e7420747261636b65642065786365656473206f7574707574206f60648201527f6620746f6b656e49642066726f6d20747261636b657249640000000000000000608482015260a4016107c9565b6000818152606760205260408120546001600160a01b0316806106ba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107c9565b60006001600160a01b03821661103c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107c9565b506001600160a01b031660009081526068602052604090205490565b600061106360cc5490565b905090565b6110d76040518061016001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b600082815260ca60209081526040918290208251610160810184528154815260018201546001600160a01b03908116938201939093526002820154909216928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260098201805491929161012084019190611172906151bf565b80601f016020809104026020016040519081016040528092919081815260200182805461119e906151bf565b80156111eb5780601f106111c0576101008083540402835291602001916111eb565b820191906000526020600020905b8154815290600101906020018083116111ce57829003601f168201915b50505050508152602001600a82018054611204906151bf565b80601f0160208091040260200160405190810160405280929190818152602001828054611230906151bf565b801561127d5780601f106112525761010080835404028352916020019161127d565b820191906000526020600020905b81548152906001019060200180831161126057829003601f168201915b5050505050815250509050919050565b6000836112b2578260ff16600314156112aa5750620f424061194a565b50600061194a565b600093845260ca6020908152604080862060cb835281872087805260028101909352908620909190869081908190819081908190815b88548111611856576101018c6112ff600183615165565b610101811061131e57634e487b7160e01b600052603260045260246000fd5b602002015114158061136257506113628c8a600001838154811061135257634e487b7160e01b600052603260045260246000fd5b90600052602060002001546134ac565b156117265760005b82548110156117245760c95483546001600160a01b039091169063127d5ad0908590849081106113aa57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016113d391815260200190565b60206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190614bd8565b93508360ff16600414156115515761143c8f858f61128d565b94506114a0611499620f424085600201600087600001868154811061147157634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000205461351790919063ffffffff16565b8a90613523565b98506114f36114ec620f42406114e6886114e0620f42408960030160008b6000018a8154811061147157634e487b7160e01b600052603260045260246000fd5b90613517565b9061352f565b8990613523565b975061154a83600301600085600001848154811061152157634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020548861352390919063ffffffff16565b96506116d2565b8360ff16600314156116065782600301600084600001838154811061158657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054600014156115fa576115f360cf60008560000184815481106115d257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054858f61128d565b9450611601565b620f424094505b6116d2565b8360ff16600214156116d25761163c60d060008560000184815481106115d257634e487b7160e01b600052603260045260246000fd5b9450611678611671620f424085600201600087600001868154811061147157634e487b7160e01b600052603260045260246000fd5b8a9061353b565b98506116cf8360030160008560000184815481106116a657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020548761352390919063ffffffff16565b95505b611710611499620f42406114e6886114e0620f42408960020160008b6000018a8154811061147157634e487b7160e01b600052603260045260246000fd5b98508061171c816151fa565b91505061136a565b505b88548110156118445788600001818154811061175257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549d5061179e60018d60016101016117749190615165565b610101811061179357634e487b7160e01b600052603260045260246000fd5b602002015190613523565b8c6117ac6001610101615165565b61010181106117cb57634e487b7160e01b600052603260045260246000fd5b60200201528d8c806117e06001610101615165565b61010181106117ff57634e487b7160e01b600052603260045260246000fd5b6020020151610101811061182357634e487b7160e01b600052603260045260246000fd5b6020020181815250508860020160008f815260200190815260200160002091505b8061184e816151fa565b9150506112e8565b508b60ff16600214801561186a5750600084115b1561188957611879878561352f565b995050505050505050505061194a565b846118bf578b60ff1660031480156118a5575060008960040154115b156118ba57600489015461187990889061352f565b61193c565b8b60ff16600314156118db57600389015461187990889061352f565b8b60ff1660041480156118f2575060008960030154115b156119325761192f61191f6119148b600301548a61352f90919063ffffffff16565b60048c015490613517565b6119298989613523565b9061353b565b96505b611879878661352f565b600099505050505050505050505b9392505050565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000611988614542565b61199384848361128d565b949350505050565b6060606680546106d1906151bf565b610d5a338383613547565b60c9546040516349b9055760e01b81526001600160a01b038481166004830152909116906349b905579060240160206040518083038186803b1580156119fa57600080fd5b505afa158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190614999565b80611a3b575080155b611abb5760405162461bcd60e51b8152602060048201526044602482018190527f434c4d383a3a617070726f766556657269666965723a20616464726573732069908201527f73206e6f742061207265676973746572656420656d697373696f6e732061756460648201526334ba37b960e11b608482015260a4016107c9565b6001600160a01b038216331415611b305760405162461bcd60e51b815260206004820152603360248201527f434c4d383a3a617070726f766556657269666965723a2061756469746f72206360448201527230b73737ba1031329036b9b39739b2b73232b960691b60648201526084016107c9565b6001600160a01b038216600090815260d1602090815260408083203384529091529020805460ff19168215801591909117909155611ba35760405133906001600160a01b038416907ff31635902a304a612155085cc8916b9ab86fc115155b10b33980f6cb8165c54e90600090a3610d5a565b60405133906001600160a01b038416907f490861baee43b8ebd28f134f99c0aa7848888c4bde402256ad4cf455d147aed690600090a35050565b600081815260ca602052604090206002015481906001600160a01b031615611c175760405162461bcd60e51b81526004016107c990614f5f565b81611c2181613616565b5050600090815260ca6020526040902060020180546001600160a01b03191633179055565b600082815260cb6020908152604080832084845260028101835281842080548351818602810186019094528084526060958695869591928491830182828015611cae57602002820191906000526020600020905b815481526020019060010190808311611c9a575b505050505090506000815167ffffffffffffffff811115611cdf57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d08578160200160208202803683370190505b5090506000825167ffffffffffffffff811115611d3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d5e578160200160208202803683370190505b50905060005b8351811015611e5057846002016000858381518110611d9357634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054838281518110611dca57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050846003016000858381518110611dfc57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054828281518110611e3357634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611e48816151fa565b915050611d64565b509196509450925050509250925092565b611e6b3383612f45565b611e875760405162461bcd60e51b81526004016107c990614ec3565b611e93848484846136bf565b50505050565b600081815260cb6020908152604091829020805483518184028101840190945280845260609392830182828015611eef57602002820191906000526020600020905b815481526020019060010190808311611edb575b50505050509050919050565b6000818152606760205260409020546060906001600160a01b0316611f7a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107c9565b6000611f9160408051602081019091526000815290565b90506000815111611fb1576040518060200160405280600081525061194a565b80611fbb846136f2565b604051602001611fcc929190614c5a565b6040516020818303038152906040529392505050565b600082815260976020526040902060010154611ffe8133610c50565b6108ff8383613404565b600082815260cb6020908152604080832084845260028101835281842060019091018352818420548154835181860281018601909452808452606095949293919284919083018282801561207b57602002820191906000526020600020905b815481526020019060010190808311612067575b50505050509150915091509250929050565b612098600033611951565b6120f85760405162461bcd60e51b815260206004820152602b60248201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206973206e60448201526a37ba1030b71030b236b4b760a91b60648201526084016107c9565b8061211160008051602061529f83398151915282611951565b61217c5760405162461bcd60e51b815260206004820152603660248201527f434c4d383a3a72656769737465726564547261636b65723a20746865206164646044820152751c995cdcc81a5cc81b9bdd081c9959da5cdd195c995960521b60648201526084016107c9565b828061218760cc5490565b10156121a55760405162461bcd60e51b81526004016107c990614e66565b600084815260ca60205260408082206001810180546001600160a01b0319166001600160a01b0388169081179091559151909287917f7bc1a852706b575e4f4bc2b8b22d45d7afcfbe29abc4cc0b6cc540aced9f6e7a9190a35050505050565b8061220f81613616565b50600090815260ca6020526040902060020180546001600160a01b0319169055565b60006001600160e01b03198216637965db0b60e01b14806106ba57506106ba8261380d565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061228b82610f5a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610d5a828261323c565b83518351146123455760405162461bcd60e51b815260206004820152603c60248201527f434c4d383a3a5f747261636b3a20696e416d6f756e747320616e6420746f6b6560448201527f6e49647320617265206e6f74207468652073616d65206c656e6774680000000060648201526084016107c9565b83518251146123bc5760405162461bcd60e51b815260206004820152603d60248201527f434c4d383a3a5f747261636b3a206f7574416d6f756e747320616e6420746f6b60448201527f656e49647320617265206e6f74207468652073616d65206c656e67746800000060648201526084016107c9565b83518151146124335760405162461bcd60e51b815260206004820152603d60248201527f434c4d383a3a5f747261636b3a20747261636b657249647320616e6420746f6b60448201527f656e49647320617265206e6f74207468652073616d65206c656e67746800000060648201526084016107c9565b8454600090815260cb6020526040812082519091908390829061246657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008181526002850190925260409091206001890154919250906001600160a01b031633148061254b575060c9546040516349b9055760e01b81523360048201526001600160a01b03909116906349b905579060240160206040518083038186803b1580156124e057600080fd5b505afa1580156124f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125189190614999565b801561254b575033600090815260d16020908152604080832060018c01546001600160a01b0316845290915290205460ff165b6125d35760405162461bcd60e51b815260206004820152604d60248201527f434c4d383a3a5f747261636b3a206d73672e73656e646572206973206e6f742060448201527f746865207265676973746572656420747261636b6565206f7220616e2061707060648201526c3937bb32b21030bab234ba37b960991b608482015260a4016107c9565b6000805b8851811015612e0057895484141561266b5760405162461bcd60e51b815260206004820152604b60248201527f434c4d383a3a5f747261636b3a20747261636b6572446174612e747261636b6560448201527f72496420616e6420736f75726365547261636b657249642063616e206e6f742060648201526a6265207468652073616d6560a81b608482015260a4016107c9565b60c95489516001600160a01b039091169063127d5ad0908b90849081106126a257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016126c891815260200190565b60206040518083038186803b1580156126e057600080fd5b505afa1580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127189190614bd8565b915080156127c1578561272c600183615165565b8151811061274a57634e487b7160e01b600052603260045260246000fd5b602002602001015186828151811061277257634e487b7160e01b600052603260045260246000fd5b6020026020010151146127c15785818151811061279f57634e487b7160e01b600052603260045260246000fd5b6020026020010151935084600201600085815260200190815260200160002092505b6128748982815181106127e457634e487b7160e01b600052603260045260246000fd5b60200260200101518b60010160009054906101000a90046001600160a01b03168c60030154858760020160008f888151811061283057634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548d878151811061286757634e487b7160e01b600052603260045260246000fd5b602002602001015161385d565b60038b0155600460ff83161415612abe57831561290d5761290d83858b84815181106128b057634e487b7160e01b600052603260045260246000fd5b60200260200101518b85815181106128d857634e487b7160e01b600052603260045260246000fd5b60200260200101518b868151811061290057634e487b7160e01b600052603260045260246000fd5b6020026020010151613ab2565b6129f78560030160008b848151811061293657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548b60010160009054906101000a90046001600160a01b03168b848151811061298557634e487b7160e01b600052603260045260246000fd5b60200260200101518660030160008e87815181106129b357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548b86815181106129ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151613c1d565b8560030160008b8481518110612a1d57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550612ab98560030160008b8481518110612a6057634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548660040160008c8581518110612a9d57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054610ebe565b612d0d565b8315612ac957600093505b8160ff1660031415612d0d5733600090815260d16020908152604080832060018e01546001600160a01b0316845290915290205460ff1615612ca35760008360030160008b8481518110612b2d57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020541115612ba357612b9d8360030160008b8481518110612b7357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548b6004015461353b90919063ffffffff16565b60048b01555b6000878281518110612bc557634e487b7160e01b600052603260045260246000fd5b60200260200101511115612c5f57612c11878281518110612bf657634e487b7160e01b600052603260045260246000fd5b60200260200101518b6004015461352390919063ffffffff16565b60048b01558954895160cf906000908c9085908110612c4057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550612c9e565b60cf60008a8381518110612c8357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600090555b612ab9565b8260030160008a8381518110612cc957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054878281518110612d0057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b612d8e838a8381518110612d3157634e487b7160e01b600052603260045260246000fd5b60200260200101518a8481518110612d5957634e487b7160e01b600052603260045260246000fd5b60200260200101518a8581518110612d8157634e487b7160e01b600052603260045260246000fd5b6020026020010151613e7e565b60018951612d9c9190615165565b811480612dda575085612db082600161511a565b81518110612dce57634e487b7160e01b600052603260045260246000fd5b60200260200101518414155b15612dee578254612dee9085908790614036565b80612df8816151fa565b9150506125d7565b50886004015489600301541015612e985760405162461bcd60e51b815260206004820152605060248201527f434c4d383a3a5f747261636b3a20746f74616c206175646974656420656d697360448201527f73696f6e206f75742069732067726561746572207468616e20746f74616c206560648201526f1b5a5cdcda5bdb9cc81d1c9858dad95960821b608482015260a4016107c9565b88546040513391907ff4167ae79939c396db7d073fdcf741e90f00a19e0d6f2c61d62c9c1be0fdfb3e90612ed3908c908c908c908c90614d87565b60405180910390a3505050505050505050565b8315612ef457600685018490555b8215612f0257600785018390555b815115612f20578151612f1e9060098701906020850190614562565b505b805115612f3e578051612f3c90600a8701906020840190614562565b505b5050505050565b6000818152606760205260408120546001600160a01b0316612fbe5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107c9565b6000612fc983610f5a565b9050806001600160a01b0316846001600160a01b031614806130045750836001600160a01b0316612ff984610754565b6001600160a01b0316145b8061199357506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16611993565b826001600160a01b031661304b82610f5a565b6001600160a01b0316146130b35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107c9565b6001600160a01b0382166131155760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107c9565b613120600082612256565b6001600160a01b0383166000908152606860205260408120805460019290613149908490615165565b90915550506001600160a01b038216600090815260686020526040812080546001929061317790849061511a565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6131e28282611951565b610d5a576131fa816001600160a01b031660146141dc565b6132058360206141dc565b604051602001613216929190614c89565b60408051601f198184030181529082905262461bcd60e51b82526107c991600401614e01565b6132468282611951565b610d5a5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561327e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b0382166133185760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107c9565b6000818152606760205260409020546001600160a01b03161561337d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107c9565b6001600160a01b03821660009081526068602052604081208054600192906133a690849061511a565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61340e8282611951565b15610d5a5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166134925760405162461bcd60e51b81526004016107c990614f14565b61349a6143be565b6134a26143be565b610d5a82826143e7565b6000805b6134bd6001610101615165565b81101561350d5782848261010181106134e657634e487b7160e01b600052603260045260246000fd5b602002015114156134fb576001915050611978565b80613505816151fa565b9150506134b0565b5060009392505050565b600061194a8284615146565b600061194a828461511a565b600061194a8284615132565b600061194a8284615165565b816001600160a01b0316836001600160a01b031614156135a95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107c9565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b33600090815260d16020908152604080832084845260ca8352818420600101546001600160a01b0316845290915290205460ff166136bc5760405162461bcd60e51b815260206004820152603760248201527f434c4d383a3a697341756469746f723a2061756469746f72206973206e6f742060448201527f617070726f7665642062792074686520747261636b656500000000000000000060648201526084016107c9565b50565b6136ca848484613038565b6136d684848484614435565b611e935760405162461bcd60e51b81526004016107c990614e14565b60608161371757506040805180820190915260018152600360fc1b60208201526106bd565b8160005b8115613741578061372b816151fa565b915061373a9050600a83615132565b915061371b565b60008167ffffffffffffffff81111561376a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613794576020820181803683370190505b5090505b8415611993576137a9600183615165565b91506137b6600a86615215565b6137c190603061511a565b60f81b8183815181106137e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613806600a86615132565b9450613798565b60006001600160e01b031982166380ac58cd60e01b148061383e57506001600160e01b03198216635b5e139f60e01b145b806106ba57506301ffc9a760e01b6001600160e01b03198316146106ba565b60008183146138ec57600087815260cd602090815260408083206001600160a01b038a168452909152902054613893908461353b565b600088815260cd602090815260408083206001600160a01b038b168452909152902055600260ff851611156138d3576138cc858461353b565b94506138ec565b8360ff16600214156138ec576138e98584613523565b94505b8115613aa757600087815260cd602090815260408083206001600160a01b038a16845290915290205461391f9083613523565b600088815260cd602090815260408083206001600160a01b038b168452909152902055600260ff8516111561395f576139588583613523565b9450613978565b8360ff166002141561397857613975858361353b565b94505b600087815260cd602090815260408083206001600160a01b038a811680865291909352928190205460c9549151631aeb9fab60e31b8152600481018c905260248101949094529291169063d75cfd589060440160206040518083038186803b1580156139e357600080fd5b505afa1580156139f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1b9190614a27565b1015613aa75760405162461bcd60e51b815260206004820152604f60248201527f434c4d383a3a5f766572696679526574697265643a207468652072657469726560448201527f642062616c616e63652065786365656473207768617420686173206265656e2060648201526e1c995c1bdc9d1959081a5b88139155608a1b608482015260a4016107c9565b509295945050505050565b600084815260cb6020908152604080832086845260028901909252909120548314613b5a57600084815260028701602052604090205415613b275760008481526002870160209081526040808320546004850190925290912054613b159161353b565b60008581526004830160205260409020555b8215613b5a576000848152600482016020526040902054613b489084613523565b60008581526004830160205260409020555b60008481526003870160205260409020548214613bf457600084815260038701602052604090205415613bc15760008481526003870160209081526040808320546004850190925290912054613baf9161353b565b60008581526004830160205260409020555b8115613bf4576000848152600482016020526040902054613be29083613523565b60008581526004830160205260409020555b60008481526003820160209081526040808320546004850190925290912054612f3c9190610ebe565b6000818314158015613c2f5750600083115b15613c9157600084815260ce602090815260408083206001600160a01b0389168452909152902054613c61908461353b565b600085815260ce602090815260408083206001600160a01b038a168452909152902055613c8e868461353b565b95505b8115613e7457600084815260ce602090815260408083206001600160a01b0389168452909152902054613cc49083613523565b600085815260ce602090815260408083206001600160a01b038a168452909152902055613cf18683613523565b600085815260ce602090815260408083206001600160a01b038a811680865291909352928190205460c95491516307b9f04f60e51b8152600481018a90526024810194909452939950169063f73e09e09060440160206040518083038186803b158015613d5d57600080fd5b505afa158015613d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d959190614a27565b1015613e2f5760405162461bcd60e51b815260206004820152605760248201527f434c4d383a3a5f7665726966795472616e736665727265643a2074686520747260448201527f616e736665727265642062616c616e636520657863656564732077686174206860648201527f6173206265656e207265706f7274656420696e204e4554000000000000000000608482015260a4016107c9565b846001600160a01b0316847f30bae3d5019f14a46c7a32a6791d0279bef1da7b54f09ddae4a27f8868c79d6c84604051613e6b91815260200190565b60405180910390a35b5093949350505050565b600083815260018501602052604090205482151580613e9d5750600082115b15613ef95780613ed2578454600181810187556000878152602080822090930187905587548782529188019092526040909120555b60008481526002860160209081526040808320869055600388019091529020829055612f3e565b845460011015613fc95784548590613f1390600190615165565b81548110613f3157634e487b7160e01b600052603260045260246000fd5b60009182526020909120015485613f49600184615165565b81548110613f6757634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055508085600101600087600001600185613f8d9190615165565b81548110613fab57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020819055505b6000848152600180870160209081526040808420849055600289018252808420849055600389019091528220919091558554869161400691615165565b8154811061402457634e487b7160e01b600052603260045260246000fd5b60009182526020822001555050505050565b600083815260018301602052604090205481156140905760008411801561405b575080155b1561408b578254600181810185556000858152602080822090930187905585548782529186019092526040909120555b611e93565b6000841180156140a05750600081115b156141c15782546001101561417557825483906140bf90600190615165565b815481106140dd57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154836140f5600184615165565b8154811061411357634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555080836001016000856000016001856141399190615165565b8154811061415757634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020819055505b6000848152600180850160205260408220919091558354849161419791615165565b815481106141b557634e487b7160e01b600052603260045260246000fd5b60009182526020822001555b6000848152600284016020526040812090612f3c82826145e6565b606060006141eb836002615146565b6141f690600261511a565b67ffffffffffffffff81111561421c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614246576020820181803683370190505b509050600360fc1b8160008151811061426f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106142ac57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006142d0846002615146565b6142db90600161511a565b90505b600181111561436f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061431d57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061434157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93614368816151a8565b90506142de565b50831561194a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107c9565b600054610100900460ff166143e55760405162461bcd60e51b81526004016107c990614f14565b565b600054610100900460ff1661440e5760405162461bcd60e51b81526004016107c990614f14565b8151614421906065906020850190614562565b5080516108ff906066906020840190614562565b60006001600160a01b0384163b1561453757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614479903390899088908890600401614cfe565b602060405180830381600087803b15801561449357600080fd5b505af19250505080156144c3575060408051601f3d908101601f191682019092526144c091810190614a0b565b60015b61451d573d8080156144f1576040519150601f19603f3d011682016040523d82523d6000602084013e6144f6565b606091505b5080516145155760405162461bcd60e51b81526004016107c990614e14565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611993565b506001949350505050565b604051806120200160405280610101906020820280368337509192915050565b82805461456e906151bf565b90600052602060002090601f01602090048101928261459057600085556145d6565b82601f106145a957805160ff19168380011785556145d6565b828001600101855582156145d6579182015b828111156145d65782518255916020019190600101906145bb565b506145e2929150614600565b5090565b50805460008255906000526020600020908101906136bc91905b5b808211156145e25760008155600101614601565b600067ffffffffffffffff83111561462f5761462f615255565b614642601f8401601f19166020016150e9565b905082815283838301111561465657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146106bd57600080fd5b600082601f830112614694578081fd5b8135602067ffffffffffffffff8211156146b0576146b0615255565b8160051b6146bf8282016150e9565b8381528281019086840183880185018910156146d9578687fd5b8693505b858410156146fb5780358352600193909301929184019184016146dd565b50979650505050505050565b600082601f830112614717578081fd5b61194a83833560208501614615565b600060208284031215614737578081fd5b61194a8261466d565b60008060408385031215614752578081fd5b61475b8361466d565b91506147696020840161466d565b90509250929050565b600080600060608486031215614786578081fd5b61478f8461466d565b925061479d6020850161466d565b9150604084013590509250925092565b600080600080608085870312156147c2578081fd5b6147cb8561466d565b93506147d96020860161466d565b925060408501359150606085013567ffffffffffffffff8111156147fb578182fd5b8501601f8101871361480b578182fd5b61481a87823560208401614615565b91505092959194509250565b60008060008060008060008060006101208a8c031215614844578485fd5b61484d8a61466d565b985060208a013567ffffffffffffffff80821115614869578687fd5b6148758d838e01614684565b995060408c013591508082111561488a578687fd5b6148968d838e01614684565b985060608c01359150808211156148ab578687fd5b6148b78d838e01614684565b975060808c01359150808211156148cc578687fd5b6148d88d838e01614684565b965060a08c0135955060c08c0135945060e08c01359150808211156148fb578384fd5b6149078d838e01614707565b93506101008c013591508082111561491d578283fd5b5061492a8c828d01614707565b9150509295985092959850929598565b6000806040838503121561494c578182fd5b6149558361466d565b915060208301356149658161526b565b809150509250929050565b60008060408385031215614982578182fd5b61498b8361466d565b946020939093013593505050565b6000602082840312156149aa578081fd5b815161194a8161526b565b6000602082840312156149c6578081fd5b5035919050565b600080604083850312156149df578182fd5b823591506147696020840161466d565b600060208284031215614a00578081fd5b813561194a81615279565b600060208284031215614a1c578081fd5b815161194a81615279565b600060208284031215614a38578081fd5b5051919050565b60008060008060008060008060006101208a8c031215614a5d578283fd5b8935985060208a013567ffffffffffffffff80821115614a7b578485fd5b614a878d838e01614684565b995060408c0135915080821115614a9c578485fd5b614aa88d838e01614684565b985060608c0135915080821115614abd578485fd5b614ac98d838e01614684565b975060808c01359150808211156148cc578485fd5b60008060408385031215614af0578182fd5b50508035926020909101359150565b600080600060608486031215614b13578081fd5b505081359360208301359350604090920135919050565b60008060408385031215614b3c578182fd5b8235915060208301356149658161528f565b6000806000612060808587031215614b64578182fd5b84359350602080860135614b778161528f565b9350605f86018713614b87578283fd5b614b926120206150e9565b806040880189858a011115614ba5578586fd5b8594505b610101851015614bc9578035835260019490940193918301918301614ba9565b50809450505050509250925092565b600060208284031215614be9578081fd5b815161194a8161528f565b6000815180845260208085019450808401835b83811015614c2357815187529582019590820190600101614c07565b509495945050505050565b60008151808452614c4681602086016020860161517c565b601f01601f19169290920160200192915050565b60008351614c6c81846020880161517c565b835190830190614c8081836020880161517c565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614cc181601785016020880161517c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614cf281602884016020880161517c565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614d3190830184614c2e565b9695505050505050565b60006020825261194a6020830184614bf4565b600060608252614d616060830186614bf4565b8281036020840152614d738186614bf4565b90508281036040840152614d318185614bf4565b600060808252614d9a6080830187614bf4565b8281036020840152614dac8187614bf4565b90508281036040840152614dc08186614bf4565b90508281036060840152614dd48185614bf4565b979650505050505050565b600060408252614df26040830185614bf4565b90508260208301529392505050565b60006020825261194a6020830184614c2e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252603a908201527f434c4d383a3a747261636b6572546f6b656e6b4578697374733a20747261636b60408201527f657220746f6b656e20494420646f6573206e6f74206578697374000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602e908201527f434c4d383a3a6e6f74417564697465643a20747261636b65724964206973206160408201526d1b1c9958591e48185d591a5d195960921b606082015260800190565b600060208252825160208301526020830151614fd460408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e0830151610100818185015280850151915050610120818185015280850151915050610160610140818186015261504e610180860184614c2e565b90860151858203601f190183870152909250614d318382614c2e565b60006101608d835260018060a01b03808e166020850152808d166040850152508a60608401528960808401528860a08401528760c08401528660e084015285610100840152806101208401526150c281840186614c2e565b90508281036101408401526150d78185614c2e565b9e9d5050505050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561511257615112615255565b604052919050565b6000821982111561512d5761512d615229565b500190565b6000826151415761514161523f565b500490565b600081600019048311821515161561516057615160615229565b500290565b60008282101561517757615177615229565b500390565b60005b8381101561519757818101518382015260200161517f565b83811115611e935750506000910152565b6000816151b7576151b7615229565b506000190190565b600181811c908216806151d357607f821691505b602082108114156151f457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561520e5761520e615229565b5060010190565b6000826152245761522461523f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146136bc57600080fd5b6001600160e01b0319811681146136bc57600080fd5b60ff811681146136bc57600080fdfe4f9730948b73761de8f37a0aea1760c5eef658d37d8c456767b81e17c01f30eda2646970667358221220131e16c40f38d78e54bca62488d493bd74d7f849bd0acf6af9d94f8f1c6f474c64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_carbonIntensity(uint256,uint8,uint256[257])": {
        "details": "measure the carbon intensity of a tracker NFT.       This is a recursive function that cycle through all previous trackerIds",
        "params": {
          "tokenTypeId": "measure total carbonIntensity of tracker token for tokenTypeId outputs (2. offset credits, audited emission certificates, carbon tracker tokens)",
          "trackerId": "to measure"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "approveVerifier(address,bool)": {
        "details": "approve verifier for trackee as msg.sender",
        "params": {
          "approve": "(true) or remove (false)",
          "verifier": "to be approved or removed"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "changeTrackee(uint256,address)": {
        "details": "change trackee of trackerId",
        "params": {
          "trackerId": "- id of token tp be changed"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getNumOfUniqueTrackers()": {
        "details": "returns number of unique trackers"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrackerDetails(uint256)": {
        "details": "returns the details of a given tokenId",
        "params": {
          "trackerId": "token to check"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "registerTracker(address)": {
        "details": "msg.sender can volunteer themselves as registered tracker or admin"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "track(address,uint256[],uint256[],uint256[],uint256[],uint256,uint256,string,string)": {
        "details": "create a tracker Token for trackee. Note _track will check that msg.sender is either the trackee, or is an approved auditor of the trackee (see isVerifierApproved[][] mapping)",
        "params": {
          "inAmounts": "- array of incoming token id amounts (direct/indirect/offsets) matching each carbon token",
          "outAmounts": "- array of outgoing token id amounts (direct/indirect emissions) matching each carbon token",
          "tokenIds": "- array of ids of tracked carbon tokens (direct/indirect/offsets)",
          "trackee": "- target adress to be tracked",
          "trackerIds": "- array of trackerIds matching each tokenID for tracing embodied emissions "
        }
      },
      "trackUpdate(uint256,uint256[],uint256[],uint256[],uint256[],uint256,uint256,string,string)": {
        "details": "update a tracker Token ",
        "params": {
          "trackerId": "of the token see tracker() function for description of other inputs*"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "carbonIntensity(uint256,uint8)": {
        "notice": "These are public view functions Warning: should never be called within functions that update the network to avoid excessive gas fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 419,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3094,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3807,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1813,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1815,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1819,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1823,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1827,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1833,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2644,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4157,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "net",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(NetEmissionsTokenNetwork)8492"
      },
      {
        "astId": 4227,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_trackerData",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(CarbonTrackerDetails)4201_storage)"
      },
      {
        "astId": 4232,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_trackerMappings",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(CarbonTrackerMappings)4222_storage)"
      },
      {
        "astId": 4235,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_numOfUniqueTrackers",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(Counter)3101_storage"
      },
      {
        "astId": 4241,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_retiredBalances",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4247,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "_transferredBalances",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4251,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "auditedTrackerId",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4255,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "offsetTrackerId",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4261,
        "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
        "label": "isVerifierApproved",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(NetEmissionsTokenNetwork)8492": {
        "encoding": "inplace",
        "label": "contract NetEmissionsTokenNetwork",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(CarbonTokens)4178_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CarbonTracker.CarbonTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonTokens)4178_storage"
      },
      "t_mapping(t_uint256,t_struct(CarbonTrackerDetails)4201_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CarbonTracker.CarbonTrackerDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonTrackerDetails)4201_storage"
      },
      "t_mapping(t_uint256,t_struct(CarbonTrackerMappings)4222_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CarbonTracker.CarbonTrackerMappings)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonTrackerMappings)4222_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CarbonTokens)4178_storage": {
        "encoding": "inplace",
        "label": "struct CarbonTracker.CarbonTokens",
        "members": [
          {
            "astId": 4165,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "tokenIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4169,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "idIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4173,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "inAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4177,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "outAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CarbonTrackerDetails)4201_storage": {
        "encoding": "inplace",
        "label": "struct CarbonTracker.CarbonTrackerDetails",
        "members": [
          {
            "astId": 4180,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "trackerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4182,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "trackee",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4184,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "auditor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4186,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "totalEmissions",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4188,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "totalAudited",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4190,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "totalOffset",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4192,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "fromDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4194,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "thruDate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4196,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "dateCreated",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4198,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "metadata",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 4200,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "description",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(CarbonTrackerMappings)4222_storage": {
        "encoding": "inplace",
        "label": "struct CarbonTracker.CarbonTrackerMappings",
        "members": [
          {
            "astId": 4204,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "trackerIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4208,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "trackerIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4213,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "carbonTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(CarbonTokens)4178_storage)"
          },
          {
            "astId": 4217,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "totalOut",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4221,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "totalTracked",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)3101_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3100,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/Governance/CarbonTracker.sol:CarbonTracker",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}